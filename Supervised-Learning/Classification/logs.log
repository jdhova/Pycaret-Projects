2023-03-15 15:28:48,002:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-03-15 15:28:48,002:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-03-15 15:28:48,002:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-03-15 15:28:48,002:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-03-15 15:28:48,956:WARNING:
'prophet' is a soft dependency and not included in the pycaret installation. Please run: `pip install prophet` to install.
2023-03-15 15:28:49,204:INFO:PyCaret ClassificationExperiment
2023-03-15 15:28:49,204:INFO:Logging name: clf-default-name
2023-03-15 15:28:49,204:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2023-03-15 15:28:49,204:INFO:version 3.0.0.rc9
2023-03-15 15:28:49,205:INFO:Initializing setup()
2023-03-15 15:28:49,205:INFO:self.USI: 4479
2023-03-15 15:28:49,205:INFO:self._variable_keys: {'is_multiclass', 'X_train', 'gpu_param', 'target_param', 'exp_id', '_ml_usecase', 'y_train', '_available_plots', 'X_test', 'memory', 'fold_groups_param', 'X', 'data', 'y', 'USI', 'idx', 'exp_name_log', 'fold_generator', 'log_plots_param', 'fold_shuffle_param', 'logging_param', 'y_test', 'pipeline', 'fix_imbalance', 'gpu_n_jobs_param', 'n_jobs_param', 'html_param', 'seed'}
2023-03-15 15:28:49,205:INFO:Checking environment
2023-03-15 15:28:49,205:INFO:python_version: 3.10.9
2023-03-15 15:28:49,205:INFO:python_build: ('main', 'Mar  1 2023 18:18:15')
2023-03-15 15:28:49,205:INFO:machine: AMD64
2023-03-15 15:28:49,205:INFO:platform: Windows-10-10.0.22621-SP0
2023-03-15 15:28:49,208:INFO:Memory: svmem(total=17005780992, available=5319278592, percent=68.7, used=11686502400, free=5319278592)
2023-03-15 15:28:49,209:INFO:Physical Core: 4
2023-03-15 15:28:49,209:INFO:Logical Core: 8
2023-03-15 15:28:49,209:INFO:Checking libraries
2023-03-15 15:28:49,209:INFO:System:
2023-03-15 15:28:49,209:INFO:    python: 3.10.9 | packaged by Anaconda, Inc. | (main, Mar  1 2023, 18:18:15) [MSC v.1916 64 bit (AMD64)]
2023-03-15 15:28:49,209:INFO:executable: c:\Users\juud0\miniconda3\envs\pip310\python.exe
2023-03-15 15:28:49,209:INFO:   machine: Windows-10-10.0.22621-SP0
2023-03-15 15:28:49,209:INFO:PyCaret required dependencies:
2023-03-15 15:28:49,209:INFO:                 pip: 23.0.1
2023-03-15 15:28:49,209:INFO:          setuptools: 65.6.3
2023-03-15 15:28:49,209:INFO:             pycaret: 3.0.0rc9
2023-03-15 15:28:49,209:INFO:             IPython: 8.11.0
2023-03-15 15:28:49,209:INFO:          ipywidgets: 8.0.4
2023-03-15 15:28:49,210:INFO:                tqdm: 4.65.0
2023-03-15 15:28:49,210:INFO:               numpy: 1.23.5
2023-03-15 15:28:49,210:INFO:              pandas: 1.5.3
2023-03-15 15:28:49,210:INFO:              jinja2: 3.1.2
2023-03-15 15:28:49,210:INFO:               scipy: 1.10.1
2023-03-15 15:28:49,210:INFO:              joblib: 1.2.0
2023-03-15 15:28:49,210:INFO:             sklearn: 1.2.1
2023-03-15 15:28:49,210:INFO:                pyod: 1.0.7
2023-03-15 15:28:49,210:INFO:            imblearn: 0.10.1
2023-03-15 15:28:49,210:INFO:   category_encoders: 2.6.0
2023-03-15 15:28:49,210:INFO:            lightgbm: 3.3.5
2023-03-15 15:28:49,210:INFO:               numba: 0.56.4
2023-03-15 15:28:49,210:INFO:            requests: 2.28.2
2023-03-15 15:28:49,210:INFO:          matplotlib: 3.7.1
2023-03-15 15:28:49,210:INFO:          scikitplot: 0.3.7
2023-03-15 15:28:49,211:INFO:         yellowbrick: 1.5
2023-03-15 15:28:49,211:INFO:              plotly: 5.13.1
2023-03-15 15:28:49,211:INFO:             kaleido: 0.2.1
2023-03-15 15:28:49,211:INFO:         statsmodels: 0.13.5
2023-03-15 15:28:49,211:INFO:              sktime: 0.16.1
2023-03-15 15:28:49,211:INFO:               tbats: 1.1.2
2023-03-15 15:28:49,211:INFO:            pmdarima: 2.0.2
2023-03-15 15:28:49,211:INFO:              psutil: 5.9.4
2023-03-15 15:28:49,211:INFO:PyCaret optional dependencies:
2023-03-15 15:28:49,228:INFO:                shap: Not installed
2023-03-15 15:28:49,228:INFO:           interpret: Not installed
2023-03-15 15:28:49,228:INFO:                umap: Not installed
2023-03-15 15:28:49,228:INFO:    pandas_profiling: Not installed
2023-03-15 15:28:49,228:INFO:  explainerdashboard: Not installed
2023-03-15 15:28:49,228:INFO:             autoviz: Not installed
2023-03-15 15:28:49,228:INFO:           fairlearn: Not installed
2023-03-15 15:28:49,228:INFO:             xgboost: Not installed
2023-03-15 15:28:49,228:INFO:            catboost: Not installed
2023-03-15 15:28:49,228:INFO:              kmodes: Not installed
2023-03-15 15:28:49,228:INFO:             mlxtend: Not installed
2023-03-15 15:28:49,229:INFO:       statsforecast: Not installed
2023-03-15 15:28:49,229:INFO:        tune_sklearn: Not installed
2023-03-15 15:28:49,229:INFO:                 ray: Not installed
2023-03-15 15:28:49,229:INFO:            hyperopt: Not installed
2023-03-15 15:28:49,229:INFO:              optuna: Not installed
2023-03-15 15:28:49,229:INFO:               skopt: Not installed
2023-03-15 15:28:49,229:INFO:              mlflow: Not installed
2023-03-15 15:28:49,229:INFO:              gradio: Not installed
2023-03-15 15:28:49,229:INFO:             fastapi: Not installed
2023-03-15 15:28:49,229:INFO:             uvicorn: Not installed
2023-03-15 15:28:49,229:INFO:              m2cgen: Not installed
2023-03-15 15:28:49,229:INFO:           evidently: Not installed
2023-03-15 15:28:49,229:INFO:               fugue: Not installed
2023-03-15 15:28:49,229:INFO:           streamlit: Not installed
2023-03-15 15:28:49,229:INFO:             prophet: Not installed
2023-03-15 15:28:49,229:INFO:None
2023-03-15 15:28:49,229:INFO:Set up data.
2023-03-15 15:28:49,236:INFO:Set up train/test split.
2023-03-15 15:28:49,246:INFO:Set up index.
2023-03-15 15:28:49,247:INFO:Set up folding strategy.
2023-03-15 15:28:49,247:INFO:Assigning column types.
2023-03-15 15:28:49,251:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-03-15 15:28:49,352:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-03-15 15:28:49,356:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-03-15 15:28:49,424:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 15:28:49,448:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 15:28:49,499:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-03-15 15:28:49,500:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-03-15 15:28:49,531:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 15:28:49,531:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 15:28:49,532:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-03-15 15:28:49,581:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-03-15 15:28:49,611:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 15:28:49,611:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 15:28:49,660:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-03-15 15:28:49,689:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 15:28:49,689:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 15:28:49,690:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2023-03-15 15:28:49,767:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 15:28:49,768:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 15:28:49,847:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 15:28:49,847:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 15:28:49,849:INFO:Preparing preprocessing pipeline...
2023-03-15 15:28:49,850:INFO:Set up column name cleaning.
2023-03-15 15:28:49,854:INFO:Set up simple imputation.
2023-03-15 15:28:49,886:INFO:Finished creating preprocessing pipeline.
2023-03-15 15:28:49,894:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\juud0\AppData\Local\Temp\joblib),
         steps=[('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Number of times pregnant',
                                             'Plasma glucose concentration a 2 '
                                             'hours in an oral glu...
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated')))],
         verbose=False)
2023-03-15 15:28:49,894:INFO:Creating final display dataframe.
2023-03-15 15:28:50,038:INFO:Setup _display_container:                     Description             Value
0                    Session id                42
1                        Target    Class variable
2                   Target type            Binary
3           Original data shape          (768, 9)
4        Transformed data shape          (768, 9)
5   Transformed train set shape          (614, 9)
6    Transformed test set shape          (154, 9)
7              Numeric features                 8
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12               Fold Generator   StratifiedKFold
13                  Fold Number                10
14                     CPU Jobs                -1
15                      Use GPU             False
16               Log Experiment             False
17              Experiment Name  clf-default-name
18                          USI              4479
2023-03-15 15:28:50,186:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 15:28:50,186:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 15:28:50,272:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 15:28:50,274:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 15:28:50,274:INFO:setup() successfully completed in 1.07s...............
2023-03-15 15:28:50,336:INFO:Initializing compare_models()
2023-03-15 15:28:50,336:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C9358D7B20>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000002C9358D7B20>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2023-03-15 15:28:50,337:INFO:Checking exceptions
2023-03-15 15:28:50,344:INFO:Preparing display monitor
2023-03-15 15:28:50,390:INFO:Initializing Logistic Regression
2023-03-15 15:28:50,390:INFO:Total runtime is 0.0 minutes
2023-03-15 15:28:50,395:INFO:SubProcess create_model() called ==================================
2023-03-15 15:28:50,396:INFO:Initializing create_model()
2023-03-15 15:28:50,396:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C9358D7B20>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C9358D6AA0>, model_only=True, return_train_score=False, kwargs={})
2023-03-15 15:28:50,396:INFO:Checking exceptions
2023-03-15 15:28:50,396:INFO:Importing libraries
2023-03-15 15:28:50,397:INFO:Copying training dataset
2023-03-15 15:28:50,403:INFO:Defining folds
2023-03-15 15:28:50,403:INFO:Declaring metric variables
2023-03-15 15:28:50,409:INFO:Importing untrained model
2023-03-15 15:28:50,414:INFO:Logistic Regression Imported successfully
2023-03-15 15:28:50,426:INFO:Starting cross validation
2023-03-15 15:28:50,428:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-15 15:28:58,760:INFO:Calculating mean and std
2023-03-15 15:28:58,763:INFO:Creating metrics dataframe
2023-03-15 15:28:58,774:INFO:Uploading results into container
2023-03-15 15:28:58,775:INFO:Uploading model into container now
2023-03-15 15:28:58,776:INFO:_master_model_container: 1
2023-03-15 15:28:58,776:INFO:_display_container: 2
2023-03-15 15:28:58,777:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=42, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2023-03-15 15:28:58,777:INFO:create_model() successfully completed......................................
2023-03-15 15:28:58,895:INFO:SubProcess create_model() end ==================================
2023-03-15 15:28:58,896:INFO:Creating metrics dataframe
2023-03-15 15:28:58,923:INFO:Initializing K Neighbors Classifier
2023-03-15 15:28:58,923:INFO:Total runtime is 0.1422287623087565 minutes
2023-03-15 15:28:58,931:INFO:SubProcess create_model() called ==================================
2023-03-15 15:28:58,933:INFO:Initializing create_model()
2023-03-15 15:28:58,933:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C9358D7B20>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C9358D6AA0>, model_only=True, return_train_score=False, kwargs={})
2023-03-15 15:28:58,933:INFO:Checking exceptions
2023-03-15 15:28:58,933:INFO:Importing libraries
2023-03-15 15:28:58,933:INFO:Copying training dataset
2023-03-15 15:28:58,945:INFO:Defining folds
2023-03-15 15:28:58,946:INFO:Declaring metric variables
2023-03-15 15:28:58,958:INFO:Importing untrained model
2023-03-15 15:28:58,967:INFO:K Neighbors Classifier Imported successfully
2023-03-15 15:28:58,996:INFO:Starting cross validation
2023-03-15 15:28:58,998:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-15 15:28:59,400:INFO:Calculating mean and std
2023-03-15 15:28:59,402:INFO:Creating metrics dataframe
2023-03-15 15:28:59,407:INFO:Uploading results into container
2023-03-15 15:28:59,408:INFO:Uploading model into container now
2023-03-15 15:28:59,408:INFO:_master_model_container: 2
2023-03-15 15:28:59,408:INFO:_display_container: 2
2023-03-15 15:28:59,409:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2023-03-15 15:28:59,409:INFO:create_model() successfully completed......................................
2023-03-15 15:28:59,501:INFO:SubProcess create_model() end ==================================
2023-03-15 15:28:59,501:INFO:Creating metrics dataframe
2023-03-15 15:28:59,527:INFO:Initializing Naive Bayes
2023-03-15 15:28:59,528:INFO:Total runtime is 0.15231013695398965 minutes
2023-03-15 15:28:59,537:INFO:SubProcess create_model() called ==================================
2023-03-15 15:28:59,539:INFO:Initializing create_model()
2023-03-15 15:28:59,539:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C9358D7B20>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C9358D6AA0>, model_only=True, return_train_score=False, kwargs={})
2023-03-15 15:28:59,539:INFO:Checking exceptions
2023-03-15 15:28:59,541:INFO:Importing libraries
2023-03-15 15:28:59,541:INFO:Copying training dataset
2023-03-15 15:28:59,551:INFO:Defining folds
2023-03-15 15:28:59,551:INFO:Declaring metric variables
2023-03-15 15:28:59,563:INFO:Importing untrained model
2023-03-15 15:28:59,573:INFO:Naive Bayes Imported successfully
2023-03-15 15:28:59,596:INFO:Starting cross validation
2023-03-15 15:28:59,598:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-15 15:28:59,939:INFO:Calculating mean and std
2023-03-15 15:28:59,940:INFO:Creating metrics dataframe
2023-03-15 15:28:59,944:INFO:Uploading results into container
2023-03-15 15:28:59,945:INFO:Uploading model into container now
2023-03-15 15:28:59,945:INFO:_master_model_container: 3
2023-03-15 15:28:59,945:INFO:_display_container: 2
2023-03-15 15:28:59,945:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2023-03-15 15:28:59,945:INFO:create_model() successfully completed......................................
2023-03-15 15:29:00,028:INFO:SubProcess create_model() end ==================================
2023-03-15 15:29:00,028:INFO:Creating metrics dataframe
2023-03-15 15:29:00,049:INFO:Initializing Decision Tree Classifier
2023-03-15 15:29:00,049:INFO:Total runtime is 0.16099061965942382 minutes
2023-03-15 15:29:00,055:INFO:SubProcess create_model() called ==================================
2023-03-15 15:29:00,056:INFO:Initializing create_model()
2023-03-15 15:29:00,056:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C9358D7B20>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C9358D6AA0>, model_only=True, return_train_score=False, kwargs={})
2023-03-15 15:29:00,056:INFO:Checking exceptions
2023-03-15 15:29:00,056:INFO:Importing libraries
2023-03-15 15:29:00,057:INFO:Copying training dataset
2023-03-15 15:29:00,064:INFO:Defining folds
2023-03-15 15:29:00,064:INFO:Declaring metric variables
2023-03-15 15:29:00,070:INFO:Importing untrained model
2023-03-15 15:29:00,076:INFO:Decision Tree Classifier Imported successfully
2023-03-15 15:29:00,091:INFO:Starting cross validation
2023-03-15 15:29:00,093:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-15 15:29:00,416:INFO:Calculating mean and std
2023-03-15 15:29:00,417:INFO:Creating metrics dataframe
2023-03-15 15:29:00,422:INFO:Uploading results into container
2023-03-15 15:29:00,422:INFO:Uploading model into container now
2023-03-15 15:29:00,423:INFO:_master_model_container: 4
2023-03-15 15:29:00,423:INFO:_display_container: 2
2023-03-15 15:29:00,423:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=42, splitter='best')
2023-03-15 15:29:00,423:INFO:create_model() successfully completed......................................
2023-03-15 15:29:00,509:INFO:SubProcess create_model() end ==================================
2023-03-15 15:29:00,509:INFO:Creating metrics dataframe
2023-03-15 15:29:00,537:INFO:Initializing SVM - Linear Kernel
2023-03-15 15:29:00,537:INFO:Total runtime is 0.16911836465199787 minutes
2023-03-15 15:29:00,544:INFO:SubProcess create_model() called ==================================
2023-03-15 15:29:00,544:INFO:Initializing create_model()
2023-03-15 15:29:00,545:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C9358D7B20>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C9358D6AA0>, model_only=True, return_train_score=False, kwargs={})
2023-03-15 15:29:00,545:INFO:Checking exceptions
2023-03-15 15:29:00,545:INFO:Importing libraries
2023-03-15 15:29:00,545:INFO:Copying training dataset
2023-03-15 15:29:00,557:INFO:Defining folds
2023-03-15 15:29:00,558:INFO:Declaring metric variables
2023-03-15 15:29:00,564:INFO:Importing untrained model
2023-03-15 15:29:00,573:INFO:SVM - Linear Kernel Imported successfully
2023-03-15 15:29:00,585:INFO:Starting cross validation
2023-03-15 15:29:00,587:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-15 15:29:00,901:INFO:Calculating mean and std
2023-03-15 15:29:00,904:INFO:Creating metrics dataframe
2023-03-15 15:29:00,907:INFO:Uploading results into container
2023-03-15 15:29:00,908:INFO:Uploading model into container now
2023-03-15 15:29:00,908:INFO:_master_model_container: 5
2023-03-15 15:29:00,908:INFO:_display_container: 2
2023-03-15 15:29:00,909:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=42, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2023-03-15 15:29:00,909:INFO:create_model() successfully completed......................................
2023-03-15 15:29:00,995:INFO:SubProcess create_model() end ==================================
2023-03-15 15:29:00,995:INFO:Creating metrics dataframe
2023-03-15 15:29:01,026:INFO:Initializing Ridge Classifier
2023-03-15 15:29:01,027:INFO:Total runtime is 0.17729676961898802 minutes
2023-03-15 15:29:01,035:INFO:SubProcess create_model() called ==================================
2023-03-15 15:29:01,036:INFO:Initializing create_model()
2023-03-15 15:29:01,036:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C9358D7B20>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C9358D6AA0>, model_only=True, return_train_score=False, kwargs={})
2023-03-15 15:29:01,037:INFO:Checking exceptions
2023-03-15 15:29:01,037:INFO:Importing libraries
2023-03-15 15:29:01,037:INFO:Copying training dataset
2023-03-15 15:29:01,043:INFO:Defining folds
2023-03-15 15:29:01,044:INFO:Declaring metric variables
2023-03-15 15:29:01,053:INFO:Importing untrained model
2023-03-15 15:29:01,059:INFO:Ridge Classifier Imported successfully
2023-03-15 15:29:01,073:INFO:Starting cross validation
2023-03-15 15:29:01,074:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-15 15:29:01,327:INFO:Calculating mean and std
2023-03-15 15:29:01,328:INFO:Creating metrics dataframe
2023-03-15 15:29:01,331:INFO:Uploading results into container
2023-03-15 15:29:01,333:INFO:Uploading model into container now
2023-03-15 15:29:01,333:INFO:_master_model_container: 6
2023-03-15 15:29:01,333:INFO:_display_container: 2
2023-03-15 15:29:01,333:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=42, solver='auto',
                tol=0.0001)
2023-03-15 15:29:01,333:INFO:create_model() successfully completed......................................
2023-03-15 15:29:01,425:INFO:SubProcess create_model() end ==================================
2023-03-15 15:29:01,425:INFO:Creating metrics dataframe
2023-03-15 15:29:01,457:INFO:Initializing Random Forest Classifier
2023-03-15 15:29:01,458:INFO:Total runtime is 0.18447935183842976 minutes
2023-03-15 15:29:01,469:INFO:SubProcess create_model() called ==================================
2023-03-15 15:29:01,470:INFO:Initializing create_model()
2023-03-15 15:29:01,471:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C9358D7B20>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C9358D6AA0>, model_only=True, return_train_score=False, kwargs={})
2023-03-15 15:29:01,471:INFO:Checking exceptions
2023-03-15 15:29:01,471:INFO:Importing libraries
2023-03-15 15:29:01,471:INFO:Copying training dataset
2023-03-15 15:29:01,483:INFO:Defining folds
2023-03-15 15:29:01,483:INFO:Declaring metric variables
2023-03-15 15:29:01,497:INFO:Importing untrained model
2023-03-15 15:29:01,508:INFO:Random Forest Classifier Imported successfully
2023-03-15 15:29:01,527:INFO:Starting cross validation
2023-03-15 15:29:01,528:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-15 15:29:02,568:INFO:Calculating mean and std
2023-03-15 15:29:02,569:INFO:Creating metrics dataframe
2023-03-15 15:29:02,573:INFO:Uploading results into container
2023-03-15 15:29:02,574:INFO:Uploading model into container now
2023-03-15 15:29:02,574:INFO:_master_model_container: 7
2023-03-15 15:29:02,574:INFO:_display_container: 2
2023-03-15 15:29:02,574:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       n_estimators=100, n_jobs=-1, oob_score=False,
                       random_state=42, verbose=0, warm_start=False)
2023-03-15 15:29:02,575:INFO:create_model() successfully completed......................................
2023-03-15 15:29:02,661:INFO:SubProcess create_model() end ==================================
2023-03-15 15:29:02,661:INFO:Creating metrics dataframe
2023-03-15 15:29:02,685:INFO:Initializing Quadratic Discriminant Analysis
2023-03-15 15:29:02,686:INFO:Total runtime is 0.20494848092397053 minutes
2023-03-15 15:29:02,693:INFO:SubProcess create_model() called ==================================
2023-03-15 15:29:02,693:INFO:Initializing create_model()
2023-03-15 15:29:02,693:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C9358D7B20>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C9358D6AA0>, model_only=True, return_train_score=False, kwargs={})
2023-03-15 15:29:02,693:INFO:Checking exceptions
2023-03-15 15:29:02,693:INFO:Importing libraries
2023-03-15 15:29:02,694:INFO:Copying training dataset
2023-03-15 15:29:02,705:INFO:Defining folds
2023-03-15 15:29:02,705:INFO:Declaring metric variables
2023-03-15 15:29:02,711:INFO:Importing untrained model
2023-03-15 15:29:02,718:INFO:Quadratic Discriminant Analysis Imported successfully
2023-03-15 15:29:02,730:INFO:Starting cross validation
2023-03-15 15:29:02,733:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-15 15:29:03,036:INFO:Calculating mean and std
2023-03-15 15:29:03,038:INFO:Creating metrics dataframe
2023-03-15 15:29:03,041:INFO:Uploading results into container
2023-03-15 15:29:03,042:INFO:Uploading model into container now
2023-03-15 15:29:03,042:INFO:_master_model_container: 8
2023-03-15 15:29:03,042:INFO:_display_container: 2
2023-03-15 15:29:03,042:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2023-03-15 15:29:03,042:INFO:create_model() successfully completed......................................
2023-03-15 15:29:03,126:INFO:SubProcess create_model() end ==================================
2023-03-15 15:29:03,126:INFO:Creating metrics dataframe
2023-03-15 15:29:03,149:INFO:Initializing Ada Boost Classifier
2023-03-15 15:29:03,149:INFO:Total runtime is 0.21266457637151082 minutes
2023-03-15 15:29:03,157:INFO:SubProcess create_model() called ==================================
2023-03-15 15:29:03,157:INFO:Initializing create_model()
2023-03-15 15:29:03,157:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C9358D7B20>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C9358D6AA0>, model_only=True, return_train_score=False, kwargs={})
2023-03-15 15:29:03,159:INFO:Checking exceptions
2023-03-15 15:29:03,159:INFO:Importing libraries
2023-03-15 15:29:03,159:INFO:Copying training dataset
2023-03-15 15:29:03,166:INFO:Defining folds
2023-03-15 15:29:03,166:INFO:Declaring metric variables
2023-03-15 15:29:03,174:INFO:Importing untrained model
2023-03-15 15:29:03,180:INFO:Ada Boost Classifier Imported successfully
2023-03-15 15:29:03,194:INFO:Starting cross validation
2023-03-15 15:29:03,196:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-15 15:29:03,861:INFO:Calculating mean and std
2023-03-15 15:29:03,862:INFO:Creating metrics dataframe
2023-03-15 15:29:03,866:INFO:Uploading results into container
2023-03-15 15:29:03,866:INFO:Uploading model into container now
2023-03-15 15:29:03,866:INFO:_master_model_container: 9
2023-03-15 15:29:03,867:INFO:_display_container: 2
2023-03-15 15:29:03,867:INFO:AdaBoostClassifier(algorithm='SAMME.R', base_estimator='deprecated',
                   estimator=None, learning_rate=1.0, n_estimators=50,
                   random_state=42)
2023-03-15 15:29:03,867:INFO:create_model() successfully completed......................................
2023-03-15 15:29:03,950:INFO:SubProcess create_model() end ==================================
2023-03-15 15:29:03,950:INFO:Creating metrics dataframe
2023-03-15 15:29:03,975:INFO:Initializing Gradient Boosting Classifier
2023-03-15 15:29:03,975:INFO:Total runtime is 0.22643233537673949 minutes
2023-03-15 15:29:03,982:INFO:SubProcess create_model() called ==================================
2023-03-15 15:29:03,983:INFO:Initializing create_model()
2023-03-15 15:29:03,983:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C9358D7B20>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C9358D6AA0>, model_only=True, return_train_score=False, kwargs={})
2023-03-15 15:29:03,983:INFO:Checking exceptions
2023-03-15 15:29:03,983:INFO:Importing libraries
2023-03-15 15:29:03,983:INFO:Copying training dataset
2023-03-15 15:29:03,992:INFO:Defining folds
2023-03-15 15:29:03,992:INFO:Declaring metric variables
2023-03-15 15:29:03,997:INFO:Importing untrained model
2023-03-15 15:29:04,004:INFO:Gradient Boosting Classifier Imported successfully
2023-03-15 15:29:04,016:INFO:Starting cross validation
2023-03-15 15:29:04,020:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-15 15:29:04,782:INFO:Calculating mean and std
2023-03-15 15:29:04,783:INFO:Creating metrics dataframe
2023-03-15 15:29:04,789:INFO:Uploading results into container
2023-03-15 15:29:04,790:INFO:Uploading model into container now
2023-03-15 15:29:04,790:INFO:_master_model_container: 10
2023-03-15 15:29:04,790:INFO:_display_container: 2
2023-03-15 15:29:04,791:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=42, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2023-03-15 15:29:04,791:INFO:create_model() successfully completed......................................
2023-03-15 15:29:04,882:INFO:SubProcess create_model() end ==================================
2023-03-15 15:29:04,882:INFO:Creating metrics dataframe
2023-03-15 15:29:04,908:INFO:Initializing Linear Discriminant Analysis
2023-03-15 15:29:04,909:INFO:Total runtime is 0.24199541807174682 minutes
2023-03-15 15:29:04,914:INFO:SubProcess create_model() called ==================================
2023-03-15 15:29:04,915:INFO:Initializing create_model()
2023-03-15 15:29:04,915:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C9358D7B20>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C9358D6AA0>, model_only=True, return_train_score=False, kwargs={})
2023-03-15 15:29:04,915:INFO:Checking exceptions
2023-03-15 15:29:04,915:INFO:Importing libraries
2023-03-15 15:29:04,915:INFO:Copying training dataset
2023-03-15 15:29:04,923:INFO:Defining folds
2023-03-15 15:29:04,924:INFO:Declaring metric variables
2023-03-15 15:29:04,928:INFO:Importing untrained model
2023-03-15 15:29:04,936:INFO:Linear Discriminant Analysis Imported successfully
2023-03-15 15:29:04,949:INFO:Starting cross validation
2023-03-15 15:29:04,952:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-15 15:29:05,258:INFO:Calculating mean and std
2023-03-15 15:29:05,261:INFO:Creating metrics dataframe
2023-03-15 15:29:05,264:INFO:Uploading results into container
2023-03-15 15:29:05,265:INFO:Uploading model into container now
2023-03-15 15:29:05,265:INFO:_master_model_container: 11
2023-03-15 15:29:05,265:INFO:_display_container: 2
2023-03-15 15:29:05,266:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2023-03-15 15:29:05,266:INFO:create_model() successfully completed......................................
2023-03-15 15:29:05,350:INFO:SubProcess create_model() end ==================================
2023-03-15 15:29:05,350:INFO:Creating metrics dataframe
2023-03-15 15:29:05,377:INFO:Initializing Extra Trees Classifier
2023-03-15 15:29:05,377:INFO:Total runtime is 0.24979925553003945 minutes
2023-03-15 15:29:05,383:INFO:SubProcess create_model() called ==================================
2023-03-15 15:29:05,383:INFO:Initializing create_model()
2023-03-15 15:29:05,383:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C9358D7B20>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C9358D6AA0>, model_only=True, return_train_score=False, kwargs={})
2023-03-15 15:29:05,383:INFO:Checking exceptions
2023-03-15 15:29:05,383:INFO:Importing libraries
2023-03-15 15:29:05,383:INFO:Copying training dataset
2023-03-15 15:29:05,392:INFO:Defining folds
2023-03-15 15:29:05,392:INFO:Declaring metric variables
2023-03-15 15:29:05,399:INFO:Importing untrained model
2023-03-15 15:29:05,406:INFO:Extra Trees Classifier Imported successfully
2023-03-15 15:29:05,418:INFO:Starting cross validation
2023-03-15 15:29:05,420:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-15 15:29:06,487:INFO:Calculating mean and std
2023-03-15 15:29:06,488:INFO:Creating metrics dataframe
2023-03-15 15:29:06,492:INFO:Uploading results into container
2023-03-15 15:29:06,492:INFO:Uploading model into container now
2023-03-15 15:29:06,493:INFO:_master_model_container: 12
2023-03-15 15:29:06,493:INFO:_display_container: 2
2023-03-15 15:29:06,493:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     n_estimators=100, n_jobs=-1, oob_score=False,
                     random_state=42, verbose=0, warm_start=False)
2023-03-15 15:29:06,493:INFO:create_model() successfully completed......................................
2023-03-15 15:29:06,582:INFO:SubProcess create_model() end ==================================
2023-03-15 15:29:06,582:INFO:Creating metrics dataframe
2023-03-15 15:29:06,610:INFO:Initializing Light Gradient Boosting Machine
2023-03-15 15:29:06,611:INFO:Total runtime is 0.27036305665969845 minutes
2023-03-15 15:29:06,618:INFO:SubProcess create_model() called ==================================
2023-03-15 15:29:06,619:INFO:Initializing create_model()
2023-03-15 15:29:06,619:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C9358D7B20>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C9358D6AA0>, model_only=True, return_train_score=False, kwargs={})
2023-03-15 15:29:06,620:INFO:Checking exceptions
2023-03-15 15:29:06,620:INFO:Importing libraries
2023-03-15 15:29:06,620:INFO:Copying training dataset
2023-03-15 15:29:06,629:INFO:Defining folds
2023-03-15 15:29:06,629:INFO:Declaring metric variables
2023-03-15 15:29:06,635:INFO:Importing untrained model
2023-03-15 15:29:06,644:INFO:Light Gradient Boosting Machine Imported successfully
2023-03-15 15:29:06,656:INFO:Starting cross validation
2023-03-15 15:29:06,657:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-15 15:29:07,125:INFO:Calculating mean and std
2023-03-15 15:29:07,127:INFO:Creating metrics dataframe
2023-03-15 15:29:07,131:INFO:Uploading results into container
2023-03-15 15:29:07,131:INFO:Uploading model into container now
2023-03-15 15:29:07,132:INFO:_master_model_container: 13
2023-03-15 15:29:07,132:INFO:_display_container: 2
2023-03-15 15:29:07,132:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=42, reg_alpha=0.0, reg_lambda=0.0, silent='warn',
               subsample=1.0, subsample_for_bin=200000, subsample_freq=0)
2023-03-15 15:29:07,132:INFO:create_model() successfully completed......................................
2023-03-15 15:29:07,218:INFO:SubProcess create_model() end ==================================
2023-03-15 15:29:07,218:INFO:Creating metrics dataframe
2023-03-15 15:29:07,245:INFO:Initializing Dummy Classifier
2023-03-15 15:29:07,245:INFO:Total runtime is 0.2809307217597961 minutes
2023-03-15 15:29:07,252:INFO:SubProcess create_model() called ==================================
2023-03-15 15:29:07,252:INFO:Initializing create_model()
2023-03-15 15:29:07,252:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C9358D7B20>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C9358D6AA0>, model_only=True, return_train_score=False, kwargs={})
2023-03-15 15:29:07,252:INFO:Checking exceptions
2023-03-15 15:29:07,254:INFO:Importing libraries
2023-03-15 15:29:07,254:INFO:Copying training dataset
2023-03-15 15:29:07,261:INFO:Defining folds
2023-03-15 15:29:07,261:INFO:Declaring metric variables
2023-03-15 15:29:07,267:INFO:Importing untrained model
2023-03-15 15:29:07,274:INFO:Dummy Classifier Imported successfully
2023-03-15 15:29:07,286:INFO:Starting cross validation
2023-03-15 15:29:07,288:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-15 15:29:07,471:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-03-15 15:29:07,471:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-03-15 15:29:07,476:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-03-15 15:29:07,480:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-03-15 15:29:07,486:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-03-15 15:29:07,494:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-03-15 15:29:07,502:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-03-15 15:29:07,507:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-03-15 15:29:07,565:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-03-15 15:29:07,566:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-03-15 15:29:07,570:INFO:Calculating mean and std
2023-03-15 15:29:07,572:INFO:Creating metrics dataframe
2023-03-15 15:29:07,576:INFO:Uploading results into container
2023-03-15 15:29:07,576:INFO:Uploading model into container now
2023-03-15 15:29:07,577:INFO:_master_model_container: 14
2023-03-15 15:29:07,577:INFO:_display_container: 2
2023-03-15 15:29:07,577:INFO:DummyClassifier(constant=None, random_state=42, strategy='prior')
2023-03-15 15:29:07,577:INFO:create_model() successfully completed......................................
2023-03-15 15:29:07,662:INFO:SubProcess create_model() end ==================================
2023-03-15 15:29:07,662:INFO:Creating metrics dataframe
2023-03-15 15:29:07,705:INFO:Initializing create_model()
2023-03-15 15:29:07,705:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C9358D7B20>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=42, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-03-15 15:29:07,705:INFO:Checking exceptions
2023-03-15 15:29:07,709:INFO:Importing libraries
2023-03-15 15:29:07,710:INFO:Copying training dataset
2023-03-15 15:29:07,719:INFO:Defining folds
2023-03-15 15:29:07,719:INFO:Declaring metric variables
2023-03-15 15:29:07,719:INFO:Importing untrained model
2023-03-15 15:29:07,752:INFO:Declaring custom model
2023-03-15 15:29:07,754:INFO:Logistic Regression Imported successfully
2023-03-15 15:29:07,755:INFO:Cross validation set to False
2023-03-15 15:29:07,755:INFO:Fitting Model
2023-03-15 15:29:07,861:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=42, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2023-03-15 15:29:07,861:INFO:create_model() successfully completed......................................
2023-03-15 15:29:08,028:INFO:_master_model_container: 14
2023-03-15 15:29:08,028:INFO:_display_container: 2
2023-03-15 15:29:08,029:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=42, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2023-03-15 15:29:08,029:INFO:compare_models() successfully completed......................................
2023-03-15 15:29:08,271:INFO:gpu_param set to False
2023-03-15 15:29:08,373:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 15:29:08,373:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 15:29:08,457:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 15:29:08,457:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 15:29:08,522:INFO:gpu_param set to False
2023-03-15 15:29:08,665:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 15:29:08,666:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 15:29:08,747:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 15:29:08,747:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 15:29:08,888:INFO:Initializing evaluate_model()
2023-03-15 15:29:08,888:INFO:evaluate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C9358D7B20>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=42, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None, use_train_data=False)
2023-03-15 15:29:08,916:INFO:Initializing plot_model()
2023-03-15 15:29:08,916:INFO:plot_model(plot=pipeline, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), use_train_data=False, verbose=False, display=None, display_format=None, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=42, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C9358D7B20>, system=True)
2023-03-15 15:29:08,916:INFO:Checking exceptions
2023-03-15 15:29:08,921:INFO:Preloading libraries
2023-03-15 15:29:08,921:INFO:Copying training dataset
2023-03-15 15:29:08,921:INFO:Plot type: pipeline
2023-03-15 15:29:09,200:INFO:Visual Rendered Successfully
2023-03-15 15:29:09,296:INFO:plot_model() successfully completed......................................
2023-03-15 15:29:09,381:INFO:Initializing predict_model()
2023-03-15 15:29:09,382:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C9358D7B20>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=42, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, replace_labels_in_column=<function _SupervisedExperiment.predict_model.<locals>.replace_labels_in_column at 0x000002C93989B400>)
2023-03-15 15:29:09,382:INFO:Checking exceptions
2023-03-15 15:29:09,382:INFO:Preloading libraries
2023-03-15 15:29:09,750:INFO:Initializing create_model()
2023-03-15 15:29:09,752:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C9358D7B20>, estimator=gbc, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-03-15 15:29:09,752:INFO:Checking exceptions
2023-03-15 15:29:09,785:INFO:Importing libraries
2023-03-15 15:29:09,785:INFO:Copying training dataset
2023-03-15 15:29:09,800:INFO:Defining folds
2023-03-15 15:29:09,800:INFO:Declaring metric variables
2023-03-15 15:29:09,811:INFO:Importing untrained model
2023-03-15 15:29:09,817:INFO:Gradient Boosting Classifier Imported successfully
2023-03-15 15:29:09,831:INFO:Starting cross validation
2023-03-15 15:29:09,833:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-15 15:29:10,475:INFO:Calculating mean and std
2023-03-15 15:29:10,475:INFO:Creating metrics dataframe
2023-03-15 15:29:10,481:INFO:Finalizing model
2023-03-15 15:29:10,534:INFO:Uploading results into container
2023-03-15 15:29:10,536:INFO:Uploading model into container now
2023-03-15 15:29:10,549:INFO:_master_model_container: 15
2023-03-15 15:29:10,549:INFO:_display_container: 4
2023-03-15 15:29:10,550:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=42, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2023-03-15 15:29:10,550:INFO:create_model() successfully completed......................................
2023-03-15 15:29:46,599:INFO:PyCaret ClassificationExperiment
2023-03-15 15:29:46,599:INFO:Logging name: clf-default-name
2023-03-15 15:29:46,599:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2023-03-15 15:29:46,601:INFO:version 3.0.0.rc9
2023-03-15 15:29:46,601:INFO:Initializing setup()
2023-03-15 15:29:46,601:INFO:self.USI: 1c0c
2023-03-15 15:29:46,601:INFO:self._variable_keys: {'is_multiclass', 'X_train', 'gpu_param', 'target_param', 'exp_id', '_ml_usecase', 'y_train', '_available_plots', 'X_test', 'memory', 'fold_groups_param', 'X', 'data', 'y', 'USI', 'idx', 'exp_name_log', 'fold_generator', 'log_plots_param', 'fold_shuffle_param', 'logging_param', 'y_test', 'pipeline', 'fix_imbalance', 'gpu_n_jobs_param', 'n_jobs_param', 'html_param', 'seed'}
2023-03-15 15:29:46,601:INFO:Checking environment
2023-03-15 15:29:46,601:INFO:python_version: 3.10.9
2023-03-15 15:29:46,601:INFO:python_build: ('main', 'Mar  1 2023 18:18:15')
2023-03-15 15:29:46,601:INFO:machine: AMD64
2023-03-15 15:29:46,601:INFO:platform: Windows-10-10.0.22621-SP0
2023-03-15 15:29:46,607:INFO:Memory: svmem(total=17005780992, available=5164445696, percent=69.6, used=11841335296, free=5164445696)
2023-03-15 15:29:46,607:INFO:Physical Core: 4
2023-03-15 15:29:46,608:INFO:Logical Core: 8
2023-03-15 15:29:46,608:INFO:Checking libraries
2023-03-15 15:29:46,608:INFO:System:
2023-03-15 15:29:46,608:INFO:    python: 3.10.9 | packaged by Anaconda, Inc. | (main, Mar  1 2023, 18:18:15) [MSC v.1916 64 bit (AMD64)]
2023-03-15 15:29:46,608:INFO:executable: c:\Users\juud0\miniconda3\envs\pip310\python.exe
2023-03-15 15:29:46,608:INFO:   machine: Windows-10-10.0.22621-SP0
2023-03-15 15:29:46,608:INFO:PyCaret required dependencies:
2023-03-15 15:29:46,608:INFO:                 pip: 23.0.1
2023-03-15 15:29:46,609:INFO:          setuptools: 65.6.3
2023-03-15 15:29:46,609:INFO:             pycaret: 3.0.0rc9
2023-03-15 15:29:46,609:INFO:             IPython: 8.11.0
2023-03-15 15:29:46,609:INFO:          ipywidgets: 8.0.4
2023-03-15 15:29:46,609:INFO:                tqdm: 4.65.0
2023-03-15 15:29:46,609:INFO:               numpy: 1.23.5
2023-03-15 15:29:46,609:INFO:              pandas: 1.5.3
2023-03-15 15:29:46,609:INFO:              jinja2: 3.1.2
2023-03-15 15:29:46,609:INFO:               scipy: 1.10.1
2023-03-15 15:29:46,609:INFO:              joblib: 1.2.0
2023-03-15 15:29:46,609:INFO:             sklearn: 1.2.1
2023-03-15 15:29:46,609:INFO:                pyod: 1.0.7
2023-03-15 15:29:46,609:INFO:            imblearn: 0.10.1
2023-03-15 15:29:46,609:INFO:   category_encoders: 2.6.0
2023-03-15 15:29:46,610:INFO:            lightgbm: 3.3.5
2023-03-15 15:29:46,610:INFO:               numba: 0.56.4
2023-03-15 15:29:46,610:INFO:            requests: 2.28.2
2023-03-15 15:29:46,610:INFO:          matplotlib: 3.7.1
2023-03-15 15:29:46,610:INFO:          scikitplot: 0.3.7
2023-03-15 15:29:46,610:INFO:         yellowbrick: 1.5
2023-03-15 15:29:46,610:INFO:              plotly: 5.13.1
2023-03-15 15:29:46,610:INFO:             kaleido: 0.2.1
2023-03-15 15:29:46,610:INFO:         statsmodels: 0.13.5
2023-03-15 15:29:46,610:INFO:              sktime: 0.16.1
2023-03-15 15:29:46,610:INFO:               tbats: 1.1.2
2023-03-15 15:29:46,611:INFO:            pmdarima: 2.0.2
2023-03-15 15:29:46,611:INFO:              psutil: 5.9.4
2023-03-15 15:29:46,611:INFO:PyCaret optional dependencies:
2023-03-15 15:29:46,611:INFO:                shap: Not installed
2023-03-15 15:29:46,611:INFO:           interpret: Not installed
2023-03-15 15:29:46,611:INFO:                umap: Not installed
2023-03-15 15:29:46,611:INFO:    pandas_profiling: Not installed
2023-03-15 15:29:46,611:INFO:  explainerdashboard: Not installed
2023-03-15 15:29:46,611:INFO:             autoviz: Not installed
2023-03-15 15:29:46,611:INFO:           fairlearn: Not installed
2023-03-15 15:29:46,611:INFO:             xgboost: Not installed
2023-03-15 15:29:46,612:INFO:            catboost: Not installed
2023-03-15 15:29:46,612:INFO:              kmodes: Not installed
2023-03-15 15:29:46,612:INFO:             mlxtend: Not installed
2023-03-15 15:29:46,612:INFO:       statsforecast: Not installed
2023-03-15 15:29:46,612:INFO:        tune_sklearn: Not installed
2023-03-15 15:29:46,612:INFO:                 ray: Not installed
2023-03-15 15:29:46,612:INFO:            hyperopt: Not installed
2023-03-15 15:29:46,612:INFO:              optuna: Not installed
2023-03-15 15:29:46,612:INFO:               skopt: Not installed
2023-03-15 15:29:46,613:INFO:              mlflow: Not installed
2023-03-15 15:29:46,613:INFO:              gradio: Not installed
2023-03-15 15:29:46,613:INFO:             fastapi: Not installed
2023-03-15 15:29:46,613:INFO:             uvicorn: Not installed
2023-03-15 15:29:46,613:INFO:              m2cgen: Not installed
2023-03-15 15:29:46,613:INFO:           evidently: Not installed
2023-03-15 15:29:46,613:INFO:               fugue: Not installed
2023-03-15 15:29:46,613:INFO:           streamlit: Not installed
2023-03-15 15:29:46,613:INFO:             prophet: Not installed
2023-03-15 15:29:46,613:INFO:None
2023-03-15 15:29:46,613:INFO:Set up data.
2023-03-15 15:29:46,621:INFO:Set up train/test split.
2023-03-15 15:29:46,630:INFO:Set up index.
2023-03-15 15:29:46,631:INFO:Set up folding strategy.
2023-03-15 15:29:46,631:INFO:Assigning column types.
2023-03-15 15:29:46,636:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-03-15 15:29:46,696:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-03-15 15:29:46,697:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-03-15 15:29:46,738:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 15:29:46,738:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 15:29:46,798:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-03-15 15:29:46,798:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-03-15 15:29:46,831:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 15:29:46,831:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 15:29:46,832:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-03-15 15:29:46,884:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-03-15 15:29:46,923:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 15:29:46,924:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 15:29:46,982:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-03-15 15:29:47,019:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 15:29:47,019:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 15:29:47,020:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2023-03-15 15:29:47,109:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 15:29:47,110:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 15:29:47,200:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 15:29:47,201:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 15:29:47,202:INFO:Preparing preprocessing pipeline...
2023-03-15 15:29:47,202:INFO:Set up column name cleaning.
2023-03-15 15:29:47,203:INFO:Set up simple imputation.
2023-03-15 15:29:47,233:INFO:Finished creating preprocessing pipeline.
2023-03-15 15:29:47,239:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\juud0\AppData\Local\Temp\joblib),
         steps=[('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Number of times pregnant',
                                             'Plasma glucose concentration a 2 '
                                             'hours in an oral glu...
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated')))],
         verbose=False)
2023-03-15 15:29:47,239:INFO:Creating final display dataframe.
2023-03-15 15:29:47,396:INFO:Setup _display_container:                     Description             Value
0                    Session id                42
1                        Target    Class variable
2                   Target type            Binary
3           Original data shape          (768, 9)
4        Transformed data shape          (768, 9)
5   Transformed train set shape          (614, 9)
6    Transformed test set shape          (154, 9)
7              Numeric features                 8
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12               Fold Generator   StratifiedKFold
13                  Fold Number                10
14                     CPU Jobs                -1
15                      Use GPU             False
16               Log Experiment             False
17              Experiment Name  clf-default-name
18                          USI              1c0c
2023-03-15 15:29:47,494:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 15:29:47,494:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 15:29:47,585:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 15:29:47,585:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 15:29:47,586:INFO:setup() successfully completed in 0.99s...............
2023-03-15 15:29:47,659:INFO:Initializing compare_models()
2023-03-15 15:29:47,659:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C9386111E0>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000002C9386111E0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2023-03-15 15:29:47,659:INFO:Checking exceptions
2023-03-15 15:29:47,665:INFO:Preparing display monitor
2023-03-15 15:29:47,711:INFO:Initializing Logistic Regression
2023-03-15 15:29:47,712:INFO:Total runtime is 1.6585985819498697e-05 minutes
2023-03-15 15:29:47,717:INFO:SubProcess create_model() called ==================================
2023-03-15 15:29:47,717:INFO:Initializing create_model()
2023-03-15 15:29:47,717:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C9386111E0>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C9384A6950>, model_only=True, return_train_score=False, kwargs={})
2023-03-15 15:29:47,718:INFO:Checking exceptions
2023-03-15 15:29:47,718:INFO:Importing libraries
2023-03-15 15:29:47,718:INFO:Copying training dataset
2023-03-15 15:29:47,723:INFO:Defining folds
2023-03-15 15:29:47,723:INFO:Declaring metric variables
2023-03-15 15:29:47,729:INFO:Importing untrained model
2023-03-15 15:29:47,735:INFO:Logistic Regression Imported successfully
2023-03-15 15:29:47,745:INFO:Starting cross validation
2023-03-15 15:29:47,747:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-15 15:29:48,107:INFO:Calculating mean and std
2023-03-15 15:29:48,108:INFO:Creating metrics dataframe
2023-03-15 15:29:48,112:INFO:Uploading results into container
2023-03-15 15:29:48,113:INFO:Uploading model into container now
2023-03-15 15:29:48,113:INFO:_master_model_container: 1
2023-03-15 15:29:48,113:INFO:_display_container: 2
2023-03-15 15:29:48,114:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=42, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2023-03-15 15:29:48,114:INFO:create_model() successfully completed......................................
2023-03-15 15:29:48,212:INFO:SubProcess create_model() end ==================================
2023-03-15 15:29:48,213:INFO:Creating metrics dataframe
2023-03-15 15:29:48,231:INFO:Initializing K Neighbors Classifier
2023-03-15 15:29:48,231:INFO:Total runtime is 0.008679056167602539 minutes
2023-03-15 15:29:48,237:INFO:SubProcess create_model() called ==================================
2023-03-15 15:29:48,238:INFO:Initializing create_model()
2023-03-15 15:29:48,238:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C9386111E0>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C9384A6950>, model_only=True, return_train_score=False, kwargs={})
2023-03-15 15:29:48,238:INFO:Checking exceptions
2023-03-15 15:29:48,238:INFO:Importing libraries
2023-03-15 15:29:48,238:INFO:Copying training dataset
2023-03-15 15:29:48,245:INFO:Defining folds
2023-03-15 15:29:48,245:INFO:Declaring metric variables
2023-03-15 15:29:48,251:INFO:Importing untrained model
2023-03-15 15:29:48,258:INFO:K Neighbors Classifier Imported successfully
2023-03-15 15:29:48,273:INFO:Starting cross validation
2023-03-15 15:29:48,276:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-15 15:29:48,635:INFO:Calculating mean and std
2023-03-15 15:29:48,635:INFO:Creating metrics dataframe
2023-03-15 15:29:48,639:INFO:Uploading results into container
2023-03-15 15:29:48,639:INFO:Uploading model into container now
2023-03-15 15:29:48,640:INFO:_master_model_container: 2
2023-03-15 15:29:48,640:INFO:_display_container: 2
2023-03-15 15:29:48,640:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2023-03-15 15:29:48,640:INFO:create_model() successfully completed......................................
2023-03-15 15:29:48,726:INFO:SubProcess create_model() end ==================================
2023-03-15 15:29:48,726:INFO:Creating metrics dataframe
2023-03-15 15:29:48,742:INFO:Initializing Naive Bayes
2023-03-15 15:29:48,743:INFO:Total runtime is 0.01720212697982788 minutes
2023-03-15 15:29:48,747:INFO:SubProcess create_model() called ==================================
2023-03-15 15:29:48,749:INFO:Initializing create_model()
2023-03-15 15:29:48,749:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C9386111E0>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C9384A6950>, model_only=True, return_train_score=False, kwargs={})
2023-03-15 15:29:48,749:INFO:Checking exceptions
2023-03-15 15:29:48,750:INFO:Importing libraries
2023-03-15 15:29:48,750:INFO:Copying training dataset
2023-03-15 15:29:48,758:INFO:Defining folds
2023-03-15 15:29:48,759:INFO:Declaring metric variables
2023-03-15 15:29:48,766:INFO:Importing untrained model
2023-03-15 15:29:48,770:INFO:Naive Bayes Imported successfully
2023-03-15 15:29:48,782:INFO:Starting cross validation
2023-03-15 15:29:48,785:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-15 15:29:49,091:INFO:Calculating mean and std
2023-03-15 15:29:49,093:INFO:Creating metrics dataframe
2023-03-15 15:29:49,100:INFO:Uploading results into container
2023-03-15 15:29:49,102:INFO:Uploading model into container now
2023-03-15 15:29:49,102:INFO:_master_model_container: 3
2023-03-15 15:29:49,102:INFO:_display_container: 2
2023-03-15 15:29:49,103:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2023-03-15 15:29:49,103:INFO:create_model() successfully completed......................................
2023-03-15 15:29:49,190:INFO:SubProcess create_model() end ==================================
2023-03-15 15:29:49,190:INFO:Creating metrics dataframe
2023-03-15 15:29:49,213:INFO:Initializing Decision Tree Classifier
2023-03-15 15:29:49,213:INFO:Total runtime is 0.02504451274871826 minutes
2023-03-15 15:29:49,220:INFO:SubProcess create_model() called ==================================
2023-03-15 15:29:49,221:INFO:Initializing create_model()
2023-03-15 15:29:49,221:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C9386111E0>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C9384A6950>, model_only=True, return_train_score=False, kwargs={})
2023-03-15 15:29:49,221:INFO:Checking exceptions
2023-03-15 15:29:49,221:INFO:Importing libraries
2023-03-15 15:29:49,221:INFO:Copying training dataset
2023-03-15 15:29:49,230:INFO:Defining folds
2023-03-15 15:29:49,230:INFO:Declaring metric variables
2023-03-15 15:29:49,240:INFO:Importing untrained model
2023-03-15 15:29:49,251:INFO:Decision Tree Classifier Imported successfully
2023-03-15 15:29:49,270:INFO:Starting cross validation
2023-03-15 15:29:49,272:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-15 15:29:49,687:INFO:Calculating mean and std
2023-03-15 15:29:49,689:INFO:Creating metrics dataframe
2023-03-15 15:29:49,697:INFO:Uploading results into container
2023-03-15 15:29:49,698:INFO:Uploading model into container now
2023-03-15 15:29:49,699:INFO:_master_model_container: 4
2023-03-15 15:29:49,699:INFO:_display_container: 2
2023-03-15 15:29:49,699:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=42, splitter='best')
2023-03-15 15:29:49,699:INFO:create_model() successfully completed......................................
2023-03-15 15:29:49,805:INFO:SubProcess create_model() end ==================================
2023-03-15 15:29:49,805:INFO:Creating metrics dataframe
2023-03-15 15:29:49,825:INFO:Initializing SVM - Linear Kernel
2023-03-15 15:29:49,825:INFO:Total runtime is 0.035235949357350665 minutes
2023-03-15 15:29:49,832:INFO:SubProcess create_model() called ==================================
2023-03-15 15:29:49,832:INFO:Initializing create_model()
2023-03-15 15:29:49,832:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C9386111E0>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C9384A6950>, model_only=True, return_train_score=False, kwargs={})
2023-03-15 15:29:49,832:INFO:Checking exceptions
2023-03-15 15:29:49,832:INFO:Importing libraries
2023-03-15 15:29:49,832:INFO:Copying training dataset
2023-03-15 15:29:49,840:INFO:Defining folds
2023-03-15 15:29:49,840:INFO:Declaring metric variables
2023-03-15 15:29:49,846:INFO:Importing untrained model
2023-03-15 15:29:49,853:INFO:SVM - Linear Kernel Imported successfully
2023-03-15 15:29:49,866:INFO:Starting cross validation
2023-03-15 15:29:49,867:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-15 15:29:50,186:INFO:Calculating mean and std
2023-03-15 15:29:50,187:INFO:Creating metrics dataframe
2023-03-15 15:29:50,191:INFO:Uploading results into container
2023-03-15 15:29:50,192:INFO:Uploading model into container now
2023-03-15 15:29:50,193:INFO:_master_model_container: 5
2023-03-15 15:29:50,193:INFO:_display_container: 2
2023-03-15 15:29:50,194:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=42, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2023-03-15 15:29:50,194:INFO:create_model() successfully completed......................................
2023-03-15 15:29:50,280:INFO:SubProcess create_model() end ==================================
2023-03-15 15:29:50,280:INFO:Creating metrics dataframe
2023-03-15 15:29:50,306:INFO:Initializing Ridge Classifier
2023-03-15 15:29:50,306:INFO:Total runtime is 0.04325388669967651 minutes
2023-03-15 15:29:50,316:INFO:SubProcess create_model() called ==================================
2023-03-15 15:29:50,317:INFO:Initializing create_model()
2023-03-15 15:29:50,317:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C9386111E0>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C9384A6950>, model_only=True, return_train_score=False, kwargs={})
2023-03-15 15:29:50,318:INFO:Checking exceptions
2023-03-15 15:29:50,318:INFO:Importing libraries
2023-03-15 15:29:50,318:INFO:Copying training dataset
2023-03-15 15:29:50,331:INFO:Defining folds
2023-03-15 15:29:50,331:INFO:Declaring metric variables
2023-03-15 15:29:50,341:INFO:Importing untrained model
2023-03-15 15:29:50,352:INFO:Ridge Classifier Imported successfully
2023-03-15 15:29:50,376:INFO:Starting cross validation
2023-03-15 15:29:50,379:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-15 15:29:50,677:INFO:Calculating mean and std
2023-03-15 15:29:50,678:INFO:Creating metrics dataframe
2023-03-15 15:29:50,682:INFO:Uploading results into container
2023-03-15 15:29:50,682:INFO:Uploading model into container now
2023-03-15 15:29:50,682:INFO:_master_model_container: 6
2023-03-15 15:29:50,683:INFO:_display_container: 2
2023-03-15 15:29:50,683:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=42, solver='auto',
                tol=0.0001)
2023-03-15 15:29:50,683:INFO:create_model() successfully completed......................................
2023-03-15 15:29:50,786:INFO:SubProcess create_model() end ==================================
2023-03-15 15:29:50,786:INFO:Creating metrics dataframe
2023-03-15 15:29:50,808:INFO:Initializing Random Forest Classifier
2023-03-15 15:29:50,809:INFO:Total runtime is 0.05161478916803995 minutes
2023-03-15 15:29:50,815:INFO:SubProcess create_model() called ==================================
2023-03-15 15:29:50,816:INFO:Initializing create_model()
2023-03-15 15:29:50,816:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C9386111E0>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C9384A6950>, model_only=True, return_train_score=False, kwargs={})
2023-03-15 15:29:50,816:INFO:Checking exceptions
2023-03-15 15:29:50,816:INFO:Importing libraries
2023-03-15 15:29:50,817:INFO:Copying training dataset
2023-03-15 15:29:50,822:INFO:Defining folds
2023-03-15 15:29:50,823:INFO:Declaring metric variables
2023-03-15 15:29:50,828:INFO:Importing untrained model
2023-03-15 15:29:50,836:INFO:Random Forest Classifier Imported successfully
2023-03-15 15:29:50,847:INFO:Starting cross validation
2023-03-15 15:29:50,848:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-15 15:29:51,903:INFO:Calculating mean and std
2023-03-15 15:29:51,906:INFO:Creating metrics dataframe
2023-03-15 15:29:51,910:INFO:Uploading results into container
2023-03-15 15:29:51,910:INFO:Uploading model into container now
2023-03-15 15:29:51,911:INFO:_master_model_container: 7
2023-03-15 15:29:51,911:INFO:_display_container: 2
2023-03-15 15:29:51,911:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       n_estimators=100, n_jobs=-1, oob_score=False,
                       random_state=42, verbose=0, warm_start=False)
2023-03-15 15:29:51,911:INFO:create_model() successfully completed......................................
2023-03-15 15:29:52,001:INFO:SubProcess create_model() end ==================================
2023-03-15 15:29:52,001:INFO:Creating metrics dataframe
2023-03-15 15:29:52,026:INFO:Initializing Quadratic Discriminant Analysis
2023-03-15 15:29:52,027:INFO:Total runtime is 0.07191450198491414 minutes
2023-03-15 15:29:52,032:INFO:SubProcess create_model() called ==================================
2023-03-15 15:29:52,032:INFO:Initializing create_model()
2023-03-15 15:29:52,032:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C9386111E0>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C9384A6950>, model_only=True, return_train_score=False, kwargs={})
2023-03-15 15:29:52,033:INFO:Checking exceptions
2023-03-15 15:29:52,033:INFO:Importing libraries
2023-03-15 15:29:52,033:INFO:Copying training dataset
2023-03-15 15:29:52,041:INFO:Defining folds
2023-03-15 15:29:52,042:INFO:Declaring metric variables
2023-03-15 15:29:52,048:INFO:Importing untrained model
2023-03-15 15:29:52,053:INFO:Quadratic Discriminant Analysis Imported successfully
2023-03-15 15:29:52,067:INFO:Starting cross validation
2023-03-15 15:29:52,069:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-15 15:29:52,384:INFO:Calculating mean and std
2023-03-15 15:29:52,385:INFO:Creating metrics dataframe
2023-03-15 15:29:52,390:INFO:Uploading results into container
2023-03-15 15:29:52,391:INFO:Uploading model into container now
2023-03-15 15:29:52,391:INFO:_master_model_container: 8
2023-03-15 15:29:52,391:INFO:_display_container: 2
2023-03-15 15:29:52,391:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2023-03-15 15:29:52,392:INFO:create_model() successfully completed......................................
2023-03-15 15:29:52,479:INFO:SubProcess create_model() end ==================================
2023-03-15 15:29:52,479:INFO:Creating metrics dataframe
2023-03-15 15:29:52,501:INFO:Initializing Ada Boost Classifier
2023-03-15 15:29:52,501:INFO:Total runtime is 0.07984171311060587 minutes
2023-03-15 15:29:52,508:INFO:SubProcess create_model() called ==================================
2023-03-15 15:29:52,508:INFO:Initializing create_model()
2023-03-15 15:29:52,508:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C9386111E0>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C9384A6950>, model_only=True, return_train_score=False, kwargs={})
2023-03-15 15:29:52,509:INFO:Checking exceptions
2023-03-15 15:29:52,509:INFO:Importing libraries
2023-03-15 15:29:52,509:INFO:Copying training dataset
2023-03-15 15:29:52,518:INFO:Defining folds
2023-03-15 15:29:52,518:INFO:Declaring metric variables
2023-03-15 15:29:52,524:INFO:Importing untrained model
2023-03-15 15:29:52,531:INFO:Ada Boost Classifier Imported successfully
2023-03-15 15:29:52,542:INFO:Starting cross validation
2023-03-15 15:29:52,543:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-15 15:29:53,166:INFO:Calculating mean and std
2023-03-15 15:29:53,167:INFO:Creating metrics dataframe
2023-03-15 15:29:53,171:INFO:Uploading results into container
2023-03-15 15:29:53,171:INFO:Uploading model into container now
2023-03-15 15:29:53,172:INFO:_master_model_container: 9
2023-03-15 15:29:53,172:INFO:_display_container: 2
2023-03-15 15:29:53,172:INFO:AdaBoostClassifier(algorithm='SAMME.R', base_estimator='deprecated',
                   estimator=None, learning_rate=1.0, n_estimators=50,
                   random_state=42)
2023-03-15 15:29:53,172:INFO:create_model() successfully completed......................................
2023-03-15 15:29:53,263:INFO:SubProcess create_model() end ==================================
2023-03-15 15:29:53,263:INFO:Creating metrics dataframe
2023-03-15 15:29:53,297:INFO:Initializing Gradient Boosting Classifier
2023-03-15 15:29:53,297:INFO:Total runtime is 0.09310725132624308 minutes
2023-03-15 15:29:53,311:INFO:SubProcess create_model() called ==================================
2023-03-15 15:29:53,311:INFO:Initializing create_model()
2023-03-15 15:29:53,312:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C9386111E0>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C9384A6950>, model_only=True, return_train_score=False, kwargs={})
2023-03-15 15:29:53,312:INFO:Checking exceptions
2023-03-15 15:29:53,313:INFO:Importing libraries
2023-03-15 15:29:53,313:INFO:Copying training dataset
2023-03-15 15:29:53,323:INFO:Defining folds
2023-03-15 15:29:53,325:INFO:Declaring metric variables
2023-03-15 15:29:53,335:INFO:Importing untrained model
2023-03-15 15:29:53,344:INFO:Gradient Boosting Classifier Imported successfully
2023-03-15 15:29:53,368:INFO:Starting cross validation
2023-03-15 15:29:53,369:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-15 15:29:54,082:INFO:Calculating mean and std
2023-03-15 15:29:54,084:INFO:Creating metrics dataframe
2023-03-15 15:29:54,089:INFO:Uploading results into container
2023-03-15 15:29:54,091:INFO:Uploading model into container now
2023-03-15 15:29:54,091:INFO:_master_model_container: 10
2023-03-15 15:29:54,091:INFO:_display_container: 2
2023-03-15 15:29:54,092:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=42, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2023-03-15 15:29:54,092:INFO:create_model() successfully completed......................................
2023-03-15 15:29:54,186:INFO:SubProcess create_model() end ==================================
2023-03-15 15:29:54,186:INFO:Creating metrics dataframe
2023-03-15 15:29:54,213:INFO:Initializing Linear Discriminant Analysis
2023-03-15 15:29:54,213:INFO:Total runtime is 0.10837295055389404 minutes
2023-03-15 15:29:54,218:INFO:SubProcess create_model() called ==================================
2023-03-15 15:29:54,219:INFO:Initializing create_model()
2023-03-15 15:29:54,219:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C9386111E0>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C9384A6950>, model_only=True, return_train_score=False, kwargs={})
2023-03-15 15:29:54,219:INFO:Checking exceptions
2023-03-15 15:29:54,219:INFO:Importing libraries
2023-03-15 15:29:54,219:INFO:Copying training dataset
2023-03-15 15:29:54,230:INFO:Defining folds
2023-03-15 15:29:54,230:INFO:Declaring metric variables
2023-03-15 15:29:54,236:INFO:Importing untrained model
2023-03-15 15:29:54,245:INFO:Linear Discriminant Analysis Imported successfully
2023-03-15 15:29:54,261:INFO:Starting cross validation
2023-03-15 15:29:54,263:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-15 15:29:54,592:INFO:Calculating mean and std
2023-03-15 15:29:54,594:INFO:Creating metrics dataframe
2023-03-15 15:29:54,598:INFO:Uploading results into container
2023-03-15 15:29:54,599:INFO:Uploading model into container now
2023-03-15 15:29:54,599:INFO:_master_model_container: 11
2023-03-15 15:29:54,599:INFO:_display_container: 2
2023-03-15 15:29:54,600:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2023-03-15 15:29:54,600:INFO:create_model() successfully completed......................................
2023-03-15 15:29:54,688:INFO:SubProcess create_model() end ==================================
2023-03-15 15:29:54,688:INFO:Creating metrics dataframe
2023-03-15 15:29:54,724:INFO:Initializing Extra Trees Classifier
2023-03-15 15:29:54,724:INFO:Total runtime is 0.11688147783279418 minutes
2023-03-15 15:29:54,737:INFO:SubProcess create_model() called ==================================
2023-03-15 15:29:54,737:INFO:Initializing create_model()
2023-03-15 15:29:54,737:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C9386111E0>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C9384A6950>, model_only=True, return_train_score=False, kwargs={})
2023-03-15 15:29:54,738:INFO:Checking exceptions
2023-03-15 15:29:54,738:INFO:Importing libraries
2023-03-15 15:29:54,738:INFO:Copying training dataset
2023-03-15 15:29:54,762:INFO:Defining folds
2023-03-15 15:29:54,762:INFO:Declaring metric variables
2023-03-15 15:29:54,777:INFO:Importing untrained model
2023-03-15 15:29:54,792:INFO:Extra Trees Classifier Imported successfully
2023-03-15 15:29:54,816:INFO:Starting cross validation
2023-03-15 15:29:54,819:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-15 15:29:55,934:INFO:Calculating mean and std
2023-03-15 15:29:55,935:INFO:Creating metrics dataframe
2023-03-15 15:29:55,939:INFO:Uploading results into container
2023-03-15 15:29:55,940:INFO:Uploading model into container now
2023-03-15 15:29:55,940:INFO:_master_model_container: 12
2023-03-15 15:29:55,940:INFO:_display_container: 2
2023-03-15 15:29:55,941:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     n_estimators=100, n_jobs=-1, oob_score=False,
                     random_state=42, verbose=0, warm_start=False)
2023-03-15 15:29:55,941:INFO:create_model() successfully completed......................................
2023-03-15 15:29:56,040:INFO:SubProcess create_model() end ==================================
2023-03-15 15:29:56,040:INFO:Creating metrics dataframe
2023-03-15 15:29:56,066:INFO:Initializing Light Gradient Boosting Machine
2023-03-15 15:29:56,066:INFO:Total runtime is 0.13925822973251342 minutes
2023-03-15 15:29:56,071:INFO:SubProcess create_model() called ==================================
2023-03-15 15:29:56,072:INFO:Initializing create_model()
2023-03-15 15:29:56,072:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C9386111E0>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C9384A6950>, model_only=True, return_train_score=False, kwargs={})
2023-03-15 15:29:56,074:INFO:Checking exceptions
2023-03-15 15:29:56,074:INFO:Importing libraries
2023-03-15 15:29:56,074:INFO:Copying training dataset
2023-03-15 15:29:56,082:INFO:Defining folds
2023-03-15 15:29:56,082:INFO:Declaring metric variables
2023-03-15 15:29:56,088:INFO:Importing untrained model
2023-03-15 15:29:56,095:INFO:Light Gradient Boosting Machine Imported successfully
2023-03-15 15:29:56,105:INFO:Starting cross validation
2023-03-15 15:29:56,108:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-15 15:29:56,500:INFO:Calculating mean and std
2023-03-15 15:29:56,501:INFO:Creating metrics dataframe
2023-03-15 15:29:56,505:INFO:Uploading results into container
2023-03-15 15:29:56,506:INFO:Uploading model into container now
2023-03-15 15:29:56,507:INFO:_master_model_container: 13
2023-03-15 15:29:56,507:INFO:_display_container: 2
2023-03-15 15:29:56,507:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=42, reg_alpha=0.0, reg_lambda=0.0, silent='warn',
               subsample=1.0, subsample_for_bin=200000, subsample_freq=0)
2023-03-15 15:29:56,507:INFO:create_model() successfully completed......................................
2023-03-15 15:29:56,593:INFO:SubProcess create_model() end ==================================
2023-03-15 15:29:56,594:INFO:Creating metrics dataframe
2023-03-15 15:29:56,617:INFO:Initializing Dummy Classifier
2023-03-15 15:29:56,618:INFO:Total runtime is 0.14845884243647256 minutes
2023-03-15 15:29:56,624:INFO:SubProcess create_model() called ==================================
2023-03-15 15:29:56,625:INFO:Initializing create_model()
2023-03-15 15:29:56,625:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C9386111E0>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C9384A6950>, model_only=True, return_train_score=False, kwargs={})
2023-03-15 15:29:56,625:INFO:Checking exceptions
2023-03-15 15:29:56,625:INFO:Importing libraries
2023-03-15 15:29:56,625:INFO:Copying training dataset
2023-03-15 15:29:56,632:INFO:Defining folds
2023-03-15 15:29:56,632:INFO:Declaring metric variables
2023-03-15 15:29:56,637:INFO:Importing untrained model
2023-03-15 15:29:56,646:INFO:Dummy Classifier Imported successfully
2023-03-15 15:29:56,657:INFO:Starting cross validation
2023-03-15 15:29:56,659:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-15 15:29:56,828:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-03-15 15:29:56,838:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-03-15 15:29:56,842:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-03-15 15:29:56,843:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-03-15 15:29:56,849:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-03-15 15:29:56,849:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-03-15 15:29:56,863:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-03-15 15:29:56,864:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-03-15 15:29:56,931:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-03-15 15:29:56,936:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-03-15 15:29:56,940:INFO:Calculating mean and std
2023-03-15 15:29:56,942:INFO:Creating metrics dataframe
2023-03-15 15:29:56,945:INFO:Uploading results into container
2023-03-15 15:29:56,946:INFO:Uploading model into container now
2023-03-15 15:29:56,946:INFO:_master_model_container: 14
2023-03-15 15:29:56,946:INFO:_display_container: 2
2023-03-15 15:29:56,946:INFO:DummyClassifier(constant=None, random_state=42, strategy='prior')
2023-03-15 15:29:56,946:INFO:create_model() successfully completed......................................
2023-03-15 15:29:57,042:INFO:SubProcess create_model() end ==================================
2023-03-15 15:29:57,043:INFO:Creating metrics dataframe
2023-03-15 15:29:57,102:INFO:Initializing create_model()
2023-03-15 15:29:57,102:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C9386111E0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=42, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-03-15 15:29:57,102:INFO:Checking exceptions
2023-03-15 15:29:57,105:INFO:Importing libraries
2023-03-15 15:29:57,106:INFO:Copying training dataset
2023-03-15 15:29:57,118:INFO:Defining folds
2023-03-15 15:29:57,118:INFO:Declaring metric variables
2023-03-15 15:29:57,118:INFO:Importing untrained model
2023-03-15 15:29:57,118:INFO:Declaring custom model
2023-03-15 15:29:57,120:INFO:Logistic Regression Imported successfully
2023-03-15 15:29:57,121:INFO:Cross validation set to False
2023-03-15 15:29:57,121:INFO:Fitting Model
2023-03-15 15:29:57,172:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=42, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2023-03-15 15:29:57,172:INFO:create_model() successfully completed......................................
2023-03-15 15:29:57,339:INFO:_master_model_container: 14
2023-03-15 15:29:57,340:INFO:_display_container: 2
2023-03-15 15:29:57,341:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=42, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2023-03-15 15:29:57,341:INFO:compare_models() successfully completed......................................
2023-03-15 15:29:57,504:INFO:gpu_param set to False
2023-03-15 15:29:57,602:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 15:29:57,603:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 15:29:57,690:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 15:29:57,691:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 15:29:57,756:INFO:gpu_param set to False
2023-03-15 15:29:57,886:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 15:29:57,887:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 15:29:57,968:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 15:29:57,969:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 15:29:58,102:INFO:Initializing evaluate_model()
2023-03-15 15:29:58,102:INFO:evaluate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C9386111E0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=42, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None, use_train_data=False)
2023-03-15 15:29:58,126:INFO:Initializing plot_model()
2023-03-15 15:29:58,126:INFO:plot_model(plot=pipeline, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), use_train_data=False, verbose=False, display=None, display_format=None, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=42, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C9386111E0>, system=True)
2023-03-15 15:29:58,126:INFO:Checking exceptions
2023-03-15 15:29:58,131:INFO:Preloading libraries
2023-03-15 15:29:58,131:INFO:Copying training dataset
2023-03-15 15:29:58,133:INFO:Plot type: pipeline
2023-03-15 15:29:58,269:INFO:Visual Rendered Successfully
2023-03-15 15:29:58,363:INFO:plot_model() successfully completed......................................
2023-03-15 15:29:58,448:INFO:Initializing predict_model()
2023-03-15 15:29:58,449:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C9386111E0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=42, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, replace_labels_in_column=<function _SupervisedExperiment.predict_model.<locals>.replace_labels_in_column at 0x000002C93887FF40>)
2023-03-15 15:29:58,449:INFO:Checking exceptions
2023-03-15 15:29:58,449:INFO:Preloading libraries
2023-03-15 15:29:58,714:INFO:Initializing create_model()
2023-03-15 15:29:58,715:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C9386111E0>, estimator=gbc, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-03-15 15:29:58,715:INFO:Checking exceptions
2023-03-15 15:29:58,747:INFO:Importing libraries
2023-03-15 15:29:58,747:INFO:Copying training dataset
2023-03-15 15:29:58,759:INFO:Defining folds
2023-03-15 15:29:58,759:INFO:Declaring metric variables
2023-03-15 15:29:58,766:INFO:Importing untrained model
2023-03-15 15:29:58,777:INFO:Gradient Boosting Classifier Imported successfully
2023-03-15 15:29:58,802:INFO:Starting cross validation
2023-03-15 15:29:58,804:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-15 15:29:59,540:INFO:Calculating mean and std
2023-03-15 15:29:59,541:INFO:Creating metrics dataframe
2023-03-15 15:29:59,546:INFO:Finalizing model
2023-03-15 15:29:59,602:INFO:Uploading results into container
2023-03-15 15:29:59,604:INFO:Uploading model into container now
2023-03-15 15:29:59,625:INFO:_master_model_container: 15
2023-03-15 15:29:59,626:INFO:_display_container: 4
2023-03-15 15:29:59,627:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=42, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2023-03-15 15:29:59,627:INFO:create_model() successfully completed......................................
2023-03-15 15:41:43,018:INFO:PyCaret ClassificationExperiment
2023-03-15 15:41:43,018:INFO:Logging name: clf-default-name
2023-03-15 15:41:43,019:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2023-03-15 15:41:43,019:INFO:version 3.0.0.rc9
2023-03-15 15:41:43,019:INFO:Initializing setup()
2023-03-15 15:41:43,019:INFO:self.USI: c99d
2023-03-15 15:41:43,019:INFO:self._variable_keys: {'is_multiclass', 'X_train', 'gpu_param', 'target_param', 'exp_id', '_ml_usecase', 'y_train', '_available_plots', 'X_test', 'memory', 'fold_groups_param', 'X', 'data', 'y', 'USI', 'idx', 'exp_name_log', 'fold_generator', 'log_plots_param', 'fold_shuffle_param', 'logging_param', 'y_test', 'pipeline', 'fix_imbalance', 'gpu_n_jobs_param', 'n_jobs_param', 'html_param', 'seed'}
2023-03-15 15:41:43,020:INFO:Checking environment
2023-03-15 15:41:43,020:INFO:python_version: 3.10.9
2023-03-15 15:41:43,020:INFO:python_build: ('main', 'Mar  1 2023 18:18:15')
2023-03-15 15:41:43,020:INFO:machine: AMD64
2023-03-15 15:41:43,020:INFO:platform: Windows-10-10.0.22621-SP0
2023-03-15 15:41:43,024:INFO:Memory: svmem(total=17005780992, available=6058311680, percent=64.4, used=10947469312, free=6058311680)
2023-03-15 15:41:43,025:INFO:Physical Core: 4
2023-03-15 15:41:43,025:INFO:Logical Core: 8
2023-03-15 15:41:43,025:INFO:Checking libraries
2023-03-15 15:41:43,025:INFO:System:
2023-03-15 15:41:43,025:INFO:    python: 3.10.9 | packaged by Anaconda, Inc. | (main, Mar  1 2023, 18:18:15) [MSC v.1916 64 bit (AMD64)]
2023-03-15 15:41:43,025:INFO:executable: c:\Users\juud0\miniconda3\envs\pip310\python.exe
2023-03-15 15:41:43,025:INFO:   machine: Windows-10-10.0.22621-SP0
2023-03-15 15:41:43,025:INFO:PyCaret required dependencies:
2023-03-15 15:41:43,025:INFO:                 pip: 23.0.1
2023-03-15 15:41:43,025:INFO:          setuptools: 65.6.3
2023-03-15 15:41:43,026:INFO:             pycaret: 3.0.0rc9
2023-03-15 15:41:43,026:INFO:             IPython: 8.11.0
2023-03-15 15:41:43,026:INFO:          ipywidgets: 8.0.4
2023-03-15 15:41:43,026:INFO:                tqdm: 4.65.0
2023-03-15 15:41:43,026:INFO:               numpy: 1.23.5
2023-03-15 15:41:43,026:INFO:              pandas: 1.5.3
2023-03-15 15:41:43,026:INFO:              jinja2: 3.1.2
2023-03-15 15:41:43,026:INFO:               scipy: 1.10.1
2023-03-15 15:41:43,026:INFO:              joblib: 1.2.0
2023-03-15 15:41:43,026:INFO:             sklearn: 1.2.1
2023-03-15 15:41:43,026:INFO:                pyod: 1.0.7
2023-03-15 15:41:43,026:INFO:            imblearn: 0.10.1
2023-03-15 15:41:43,026:INFO:   category_encoders: 2.6.0
2023-03-15 15:41:43,026:INFO:            lightgbm: 3.3.5
2023-03-15 15:41:43,026:INFO:               numba: 0.56.4
2023-03-15 15:41:43,027:INFO:            requests: 2.28.2
2023-03-15 15:41:43,027:INFO:          matplotlib: 3.7.1
2023-03-15 15:41:43,027:INFO:          scikitplot: 0.3.7
2023-03-15 15:41:43,027:INFO:         yellowbrick: 1.5
2023-03-15 15:41:43,028:INFO:              plotly: 5.13.1
2023-03-15 15:41:43,028:INFO:             kaleido: 0.2.1
2023-03-15 15:41:43,028:INFO:         statsmodels: 0.13.5
2023-03-15 15:41:43,028:INFO:              sktime: 0.16.1
2023-03-15 15:41:43,028:INFO:               tbats: 1.1.2
2023-03-15 15:41:43,028:INFO:            pmdarima: 2.0.2
2023-03-15 15:41:43,028:INFO:              psutil: 5.9.4
2023-03-15 15:41:43,028:INFO:PyCaret optional dependencies:
2023-03-15 15:41:43,029:INFO:                shap: Not installed
2023-03-15 15:41:43,029:INFO:           interpret: Not installed
2023-03-15 15:41:43,029:INFO:                umap: Not installed
2023-03-15 15:41:43,029:INFO:    pandas_profiling: Not installed
2023-03-15 15:41:43,029:INFO:  explainerdashboard: Not installed
2023-03-15 15:41:43,029:INFO:             autoviz: Not installed
2023-03-15 15:41:43,029:INFO:           fairlearn: Not installed
2023-03-15 15:41:43,029:INFO:             xgboost: Not installed
2023-03-15 15:41:43,029:INFO:            catboost: Not installed
2023-03-15 15:41:43,029:INFO:              kmodes: Not installed
2023-03-15 15:41:43,029:INFO:             mlxtend: Not installed
2023-03-15 15:41:43,029:INFO:       statsforecast: Not installed
2023-03-15 15:41:43,029:INFO:        tune_sklearn: Not installed
2023-03-15 15:41:43,029:INFO:                 ray: Not installed
2023-03-15 15:41:43,029:INFO:            hyperopt: Not installed
2023-03-15 15:41:43,029:INFO:              optuna: Not installed
2023-03-15 15:41:43,029:INFO:               skopt: Not installed
2023-03-15 15:41:43,029:INFO:              mlflow: Not installed
2023-03-15 15:41:43,030:INFO:              gradio: Not installed
2023-03-15 15:41:43,030:INFO:             fastapi: Not installed
2023-03-15 15:41:43,030:INFO:             uvicorn: Not installed
2023-03-15 15:41:43,030:INFO:              m2cgen: Not installed
2023-03-15 15:41:43,030:INFO:           evidently: Not installed
2023-03-15 15:41:43,030:INFO:               fugue: Not installed
2023-03-15 15:41:43,030:INFO:           streamlit: Not installed
2023-03-15 15:41:43,030:INFO:             prophet: Not installed
2023-03-15 15:41:43,031:INFO:None
2023-03-15 15:41:43,031:INFO:Set up data.
2023-03-15 15:41:43,041:INFO:Set up train/test split.
2023-03-15 15:41:43,047:INFO:Set up index.
2023-03-15 15:41:43,049:INFO:Set up folding strategy.
2023-03-15 15:41:43,049:INFO:Assigning column types.
2023-03-15 15:41:43,056:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-03-15 15:41:43,118:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-03-15 15:41:43,119:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-03-15 15:41:43,150:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 15:41:43,152:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 15:41:43,264:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-03-15 15:41:43,265:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-03-15 15:41:43,309:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 15:41:43,309:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 15:41:43,310:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-03-15 15:41:43,364:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-03-15 15:41:43,394:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 15:41:43,394:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 15:41:43,446:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-03-15 15:41:43,478:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 15:41:43,478:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 15:41:43,479:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2023-03-15 15:41:43,557:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 15:41:43,557:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 15:41:43,636:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 15:41:43,637:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 15:41:43,638:INFO:Preparing preprocessing pipeline...
2023-03-15 15:41:43,639:INFO:Set up column name cleaning.
2023-03-15 15:41:43,639:INFO:Set up simple imputation.
2023-03-15 15:41:43,663:INFO:Finished creating preprocessing pipeline.
2023-03-15 15:41:43,670:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\juud0\AppData\Local\Temp\joblib),
         steps=[('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Number of times pregnant',
                                             'Plasma glucose concentration a 2 '
                                             'hours in an oral glu...
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated')))],
         verbose=False)
2023-03-15 15:41:43,670:INFO:Creating final display dataframe.
2023-03-15 15:41:43,808:INFO:Setup _display_container:                     Description             Value
0                    Session id                42
1                        Target    Class variable
2                   Target type            Binary
3           Original data shape          (768, 9)
4        Transformed data shape          (768, 9)
5   Transformed train set shape          (614, 9)
6    Transformed test set shape          (154, 9)
7              Numeric features                 8
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12               Fold Generator   StratifiedKFold
13                  Fold Number                10
14                     CPU Jobs                -1
15                      Use GPU             False
16               Log Experiment             False
17              Experiment Name  clf-default-name
18                          USI              c99d
2023-03-15 15:41:43,908:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 15:41:43,908:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 15:41:43,988:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 15:41:43,989:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 15:41:43,989:INFO:setup() successfully completed in 0.97s...............
2023-03-15 15:41:44,064:INFO:Initializing compare_models()
2023-03-15 15:41:44,064:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C93BBB9A80>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000002C93BBB9A80>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2023-03-15 15:41:44,064:INFO:Checking exceptions
2023-03-15 15:41:44,071:INFO:Preparing display monitor
2023-03-15 15:41:44,115:INFO:Initializing Logistic Regression
2023-03-15 15:41:44,115:INFO:Total runtime is 0.0 minutes
2023-03-15 15:41:44,123:INFO:SubProcess create_model() called ==================================
2023-03-15 15:41:44,123:INFO:Initializing create_model()
2023-03-15 15:41:44,124:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C93BBB9A80>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C93BC27940>, model_only=True, return_train_score=False, kwargs={})
2023-03-15 15:41:44,124:INFO:Checking exceptions
2023-03-15 15:41:44,124:INFO:Importing libraries
2023-03-15 15:41:44,124:INFO:Copying training dataset
2023-03-15 15:41:44,131:INFO:Defining folds
2023-03-15 15:41:44,131:INFO:Declaring metric variables
2023-03-15 15:41:44,137:INFO:Importing untrained model
2023-03-15 15:41:44,142:INFO:Logistic Regression Imported successfully
2023-03-15 15:41:44,152:INFO:Starting cross validation
2023-03-15 15:41:44,154:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-15 15:41:51,591:INFO:Calculating mean and std
2023-03-15 15:41:51,593:INFO:Creating metrics dataframe
2023-03-15 15:41:51,599:INFO:Uploading results into container
2023-03-15 15:41:51,600:INFO:Uploading model into container now
2023-03-15 15:41:51,600:INFO:_master_model_container: 1
2023-03-15 15:41:51,600:INFO:_display_container: 2
2023-03-15 15:41:51,600:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=42, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2023-03-15 15:41:51,600:INFO:create_model() successfully completed......................................
2023-03-15 15:41:51,701:INFO:SubProcess create_model() end ==================================
2023-03-15 15:41:51,702:INFO:Creating metrics dataframe
2023-03-15 15:41:51,719:INFO:Initializing K Neighbors Classifier
2023-03-15 15:41:51,720:INFO:Total runtime is 0.12675350904464722 minutes
2023-03-15 15:41:51,726:INFO:SubProcess create_model() called ==================================
2023-03-15 15:41:51,727:INFO:Initializing create_model()
2023-03-15 15:41:51,727:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C93BBB9A80>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C93BC27940>, model_only=True, return_train_score=False, kwargs={})
2023-03-15 15:41:51,727:INFO:Checking exceptions
2023-03-15 15:41:51,727:INFO:Importing libraries
2023-03-15 15:41:51,727:INFO:Copying training dataset
2023-03-15 15:41:51,736:INFO:Defining folds
2023-03-15 15:41:51,736:INFO:Declaring metric variables
2023-03-15 15:41:51,742:INFO:Importing untrained model
2023-03-15 15:41:51,752:INFO:K Neighbors Classifier Imported successfully
2023-03-15 15:41:51,766:INFO:Starting cross validation
2023-03-15 15:41:51,768:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-15 15:41:52,146:INFO:Calculating mean and std
2023-03-15 15:41:52,148:INFO:Creating metrics dataframe
2023-03-15 15:41:52,152:INFO:Uploading results into container
2023-03-15 15:41:52,153:INFO:Uploading model into container now
2023-03-15 15:41:52,153:INFO:_master_model_container: 2
2023-03-15 15:41:52,153:INFO:_display_container: 2
2023-03-15 15:41:52,153:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2023-03-15 15:41:52,153:INFO:create_model() successfully completed......................................
2023-03-15 15:41:52,251:INFO:SubProcess create_model() end ==================================
2023-03-15 15:41:52,251:INFO:Creating metrics dataframe
2023-03-15 15:41:52,285:INFO:Initializing Naive Bayes
2023-03-15 15:41:52,285:INFO:Total runtime is 0.1361664096514384 minutes
2023-03-15 15:41:52,295:INFO:SubProcess create_model() called ==================================
2023-03-15 15:41:52,297:INFO:Initializing create_model()
2023-03-15 15:41:52,298:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C93BBB9A80>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C93BC27940>, model_only=True, return_train_score=False, kwargs={})
2023-03-15 15:41:52,298:INFO:Checking exceptions
2023-03-15 15:41:52,299:INFO:Importing libraries
2023-03-15 15:41:52,299:INFO:Copying training dataset
2023-03-15 15:41:52,313:INFO:Defining folds
2023-03-15 15:41:52,314:INFO:Declaring metric variables
2023-03-15 15:41:52,327:INFO:Importing untrained model
2023-03-15 15:41:52,342:INFO:Naive Bayes Imported successfully
2023-03-15 15:41:52,366:INFO:Starting cross validation
2023-03-15 15:41:52,369:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-15 15:41:52,723:INFO:Calculating mean and std
2023-03-15 15:41:52,724:INFO:Creating metrics dataframe
2023-03-15 15:41:52,727:INFO:Uploading results into container
2023-03-15 15:41:52,728:INFO:Uploading model into container now
2023-03-15 15:41:52,728:INFO:_master_model_container: 3
2023-03-15 15:41:52,728:INFO:_display_container: 2
2023-03-15 15:41:52,728:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2023-03-15 15:41:52,728:INFO:create_model() successfully completed......................................
2023-03-15 15:41:52,816:INFO:SubProcess create_model() end ==================================
2023-03-15 15:41:52,816:INFO:Creating metrics dataframe
2023-03-15 15:41:52,837:INFO:Initializing Decision Tree Classifier
2023-03-15 15:41:52,837:INFO:Total runtime is 0.1453605055809021 minutes
2023-03-15 15:41:52,844:INFO:SubProcess create_model() called ==================================
2023-03-15 15:41:52,844:INFO:Initializing create_model()
2023-03-15 15:41:52,844:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C93BBB9A80>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C93BC27940>, model_only=True, return_train_score=False, kwargs={})
2023-03-15 15:41:52,845:INFO:Checking exceptions
2023-03-15 15:41:52,845:INFO:Importing libraries
2023-03-15 15:41:52,845:INFO:Copying training dataset
2023-03-15 15:41:52,856:INFO:Defining folds
2023-03-15 15:41:52,856:INFO:Declaring metric variables
2023-03-15 15:41:52,865:INFO:Importing untrained model
2023-03-15 15:41:52,875:INFO:Decision Tree Classifier Imported successfully
2023-03-15 15:41:52,890:INFO:Starting cross validation
2023-03-15 15:41:52,891:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-15 15:41:53,266:INFO:Calculating mean and std
2023-03-15 15:41:53,268:INFO:Creating metrics dataframe
2023-03-15 15:41:53,272:INFO:Uploading results into container
2023-03-15 15:41:53,273:INFO:Uploading model into container now
2023-03-15 15:41:53,273:INFO:_master_model_container: 4
2023-03-15 15:41:53,274:INFO:_display_container: 2
2023-03-15 15:41:53,274:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=42, splitter='best')
2023-03-15 15:41:53,274:INFO:create_model() successfully completed......................................
2023-03-15 15:41:53,362:INFO:SubProcess create_model() end ==================================
2023-03-15 15:41:53,363:INFO:Creating metrics dataframe
2023-03-15 15:41:53,391:INFO:Initializing SVM - Linear Kernel
2023-03-15 15:41:53,391:INFO:Total runtime is 0.15460833311080932 minutes
2023-03-15 15:41:53,399:INFO:SubProcess create_model() called ==================================
2023-03-15 15:41:53,399:INFO:Initializing create_model()
2023-03-15 15:41:53,401:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C93BBB9A80>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C93BC27940>, model_only=True, return_train_score=False, kwargs={})
2023-03-15 15:41:53,401:INFO:Checking exceptions
2023-03-15 15:41:53,402:INFO:Importing libraries
2023-03-15 15:41:53,402:INFO:Copying training dataset
2023-03-15 15:41:53,409:INFO:Defining folds
2023-03-15 15:41:53,409:INFO:Declaring metric variables
2023-03-15 15:41:53,415:INFO:Importing untrained model
2023-03-15 15:41:53,422:INFO:SVM - Linear Kernel Imported successfully
2023-03-15 15:41:53,434:INFO:Starting cross validation
2023-03-15 15:41:53,435:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-15 15:41:53,709:INFO:Calculating mean and std
2023-03-15 15:41:53,711:INFO:Creating metrics dataframe
2023-03-15 15:41:53,719:INFO:Uploading results into container
2023-03-15 15:41:53,720:INFO:Uploading model into container now
2023-03-15 15:41:53,720:INFO:_master_model_container: 5
2023-03-15 15:41:53,720:INFO:_display_container: 2
2023-03-15 15:41:53,721:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=42, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2023-03-15 15:41:53,721:INFO:create_model() successfully completed......................................
2023-03-15 15:41:53,812:INFO:SubProcess create_model() end ==================================
2023-03-15 15:41:53,812:INFO:Creating metrics dataframe
2023-03-15 15:41:53,833:INFO:Initializing Ridge Classifier
2023-03-15 15:41:53,833:INFO:Total runtime is 0.16196272373199463 minutes
2023-03-15 15:41:53,840:INFO:SubProcess create_model() called ==================================
2023-03-15 15:41:53,840:INFO:Initializing create_model()
2023-03-15 15:41:53,840:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C93BBB9A80>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C93BC27940>, model_only=True, return_train_score=False, kwargs={})
2023-03-15 15:41:53,841:INFO:Checking exceptions
2023-03-15 15:41:53,841:INFO:Importing libraries
2023-03-15 15:41:53,841:INFO:Copying training dataset
2023-03-15 15:41:53,850:INFO:Defining folds
2023-03-15 15:41:53,850:INFO:Declaring metric variables
2023-03-15 15:41:53,857:INFO:Importing untrained model
2023-03-15 15:41:53,863:INFO:Ridge Classifier Imported successfully
2023-03-15 15:41:53,881:INFO:Starting cross validation
2023-03-15 15:41:53,883:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-15 15:41:54,183:INFO:Calculating mean and std
2023-03-15 15:41:54,184:INFO:Creating metrics dataframe
2023-03-15 15:41:54,188:INFO:Uploading results into container
2023-03-15 15:41:54,189:INFO:Uploading model into container now
2023-03-15 15:41:54,190:INFO:_master_model_container: 6
2023-03-15 15:41:54,190:INFO:_display_container: 2
2023-03-15 15:41:54,190:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=42, solver='auto',
                tol=0.0001)
2023-03-15 15:41:54,191:INFO:create_model() successfully completed......................................
2023-03-15 15:41:54,283:INFO:SubProcess create_model() end ==================================
2023-03-15 15:41:54,283:INFO:Creating metrics dataframe
2023-03-15 15:41:54,307:INFO:Initializing Random Forest Classifier
2023-03-15 15:41:54,307:INFO:Total runtime is 0.16987502574920654 minutes
2023-03-15 15:41:54,315:INFO:SubProcess create_model() called ==================================
2023-03-15 15:41:54,315:INFO:Initializing create_model()
2023-03-15 15:41:54,315:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C93BBB9A80>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C93BC27940>, model_only=True, return_train_score=False, kwargs={})
2023-03-15 15:41:54,317:INFO:Checking exceptions
2023-03-15 15:41:54,317:INFO:Importing libraries
2023-03-15 15:41:54,317:INFO:Copying training dataset
2023-03-15 15:41:54,327:INFO:Defining folds
2023-03-15 15:41:54,327:INFO:Declaring metric variables
2023-03-15 15:41:54,335:INFO:Importing untrained model
2023-03-15 15:41:54,345:INFO:Random Forest Classifier Imported successfully
2023-03-15 15:41:54,368:INFO:Starting cross validation
2023-03-15 15:41:54,371:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-15 15:41:55,567:INFO:Calculating mean and std
2023-03-15 15:41:55,568:INFO:Creating metrics dataframe
2023-03-15 15:41:55,572:INFO:Uploading results into container
2023-03-15 15:41:55,573:INFO:Uploading model into container now
2023-03-15 15:41:55,573:INFO:_master_model_container: 7
2023-03-15 15:41:55,573:INFO:_display_container: 2
2023-03-15 15:41:55,573:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       n_estimators=100, n_jobs=-1, oob_score=False,
                       random_state=42, verbose=0, warm_start=False)
2023-03-15 15:41:55,574:INFO:create_model() successfully completed......................................
2023-03-15 15:41:55,660:INFO:SubProcess create_model() end ==================================
2023-03-15 15:41:55,660:INFO:Creating metrics dataframe
2023-03-15 15:41:55,685:INFO:Initializing Quadratic Discriminant Analysis
2023-03-15 15:41:55,685:INFO:Total runtime is 0.19282993872960408 minutes
2023-03-15 15:41:55,690:INFO:SubProcess create_model() called ==================================
2023-03-15 15:41:55,691:INFO:Initializing create_model()
2023-03-15 15:41:55,691:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C93BBB9A80>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C93BC27940>, model_only=True, return_train_score=False, kwargs={})
2023-03-15 15:41:55,691:INFO:Checking exceptions
2023-03-15 15:41:55,692:INFO:Importing libraries
2023-03-15 15:41:55,692:INFO:Copying training dataset
2023-03-15 15:41:55,701:INFO:Defining folds
2023-03-15 15:41:55,701:INFO:Declaring metric variables
2023-03-15 15:41:55,708:INFO:Importing untrained model
2023-03-15 15:41:55,716:INFO:Quadratic Discriminant Analysis Imported successfully
2023-03-15 15:41:55,727:INFO:Starting cross validation
2023-03-15 15:41:55,730:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-15 15:41:56,089:INFO:Calculating mean and std
2023-03-15 15:41:56,090:INFO:Creating metrics dataframe
2023-03-15 15:41:56,094:INFO:Uploading results into container
2023-03-15 15:41:56,095:INFO:Uploading model into container now
2023-03-15 15:41:56,096:INFO:_master_model_container: 8
2023-03-15 15:41:56,096:INFO:_display_container: 2
2023-03-15 15:41:56,096:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2023-03-15 15:41:56,096:INFO:create_model() successfully completed......................................
2023-03-15 15:41:56,191:INFO:SubProcess create_model() end ==================================
2023-03-15 15:41:56,191:INFO:Creating metrics dataframe
2023-03-15 15:41:56,211:INFO:Initializing Ada Boost Classifier
2023-03-15 15:41:56,211:INFO:Total runtime is 0.2016052722930908 minutes
2023-03-15 15:41:56,217:INFO:SubProcess create_model() called ==================================
2023-03-15 15:41:56,217:INFO:Initializing create_model()
2023-03-15 15:41:56,217:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C93BBB9A80>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C93BC27940>, model_only=True, return_train_score=False, kwargs={})
2023-03-15 15:41:56,218:INFO:Checking exceptions
2023-03-15 15:41:56,218:INFO:Importing libraries
2023-03-15 15:41:56,218:INFO:Copying training dataset
2023-03-15 15:41:56,225:INFO:Defining folds
2023-03-15 15:41:56,225:INFO:Declaring metric variables
2023-03-15 15:41:56,230:INFO:Importing untrained model
2023-03-15 15:41:56,236:INFO:Ada Boost Classifier Imported successfully
2023-03-15 15:41:56,248:INFO:Starting cross validation
2023-03-15 15:41:56,249:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-15 15:41:56,915:INFO:Calculating mean and std
2023-03-15 15:41:56,916:INFO:Creating metrics dataframe
2023-03-15 15:41:56,919:INFO:Uploading results into container
2023-03-15 15:41:56,921:INFO:Uploading model into container now
2023-03-15 15:41:56,922:INFO:_master_model_container: 9
2023-03-15 15:41:56,922:INFO:_display_container: 2
2023-03-15 15:41:56,922:INFO:AdaBoostClassifier(algorithm='SAMME.R', base_estimator='deprecated',
                   estimator=None, learning_rate=1.0, n_estimators=50,
                   random_state=42)
2023-03-15 15:41:56,922:INFO:create_model() successfully completed......................................
2023-03-15 15:41:57,020:INFO:SubProcess create_model() end ==================================
2023-03-15 15:41:57,020:INFO:Creating metrics dataframe
2023-03-15 15:41:57,051:INFO:Initializing Gradient Boosting Classifier
2023-03-15 15:41:57,052:INFO:Total runtime is 0.215613321463267 minutes
2023-03-15 15:41:57,058:INFO:SubProcess create_model() called ==================================
2023-03-15 15:41:57,059:INFO:Initializing create_model()
2023-03-15 15:41:57,059:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C93BBB9A80>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C93BC27940>, model_only=True, return_train_score=False, kwargs={})
2023-03-15 15:41:57,060:INFO:Checking exceptions
2023-03-15 15:41:57,060:INFO:Importing libraries
2023-03-15 15:41:57,060:INFO:Copying training dataset
2023-03-15 15:41:57,069:INFO:Defining folds
2023-03-15 15:41:57,069:INFO:Declaring metric variables
2023-03-15 15:41:57,076:INFO:Importing untrained model
2023-03-15 15:41:57,086:INFO:Gradient Boosting Classifier Imported successfully
2023-03-15 15:41:57,100:INFO:Starting cross validation
2023-03-15 15:41:57,103:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-15 15:41:57,777:INFO:Calculating mean and std
2023-03-15 15:41:57,778:INFO:Creating metrics dataframe
2023-03-15 15:41:57,782:INFO:Uploading results into container
2023-03-15 15:41:57,783:INFO:Uploading model into container now
2023-03-15 15:41:57,783:INFO:_master_model_container: 10
2023-03-15 15:41:57,784:INFO:_display_container: 2
2023-03-15 15:41:57,784:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=42, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2023-03-15 15:41:57,784:INFO:create_model() successfully completed......................................
2023-03-15 15:41:57,869:INFO:SubProcess create_model() end ==================================
2023-03-15 15:41:57,870:INFO:Creating metrics dataframe
2023-03-15 15:41:57,892:INFO:Initializing Linear Discriminant Analysis
2023-03-15 15:41:57,894:INFO:Total runtime is 0.22965058088302612 minutes
2023-03-15 15:41:57,901:INFO:SubProcess create_model() called ==================================
2023-03-15 15:41:57,902:INFO:Initializing create_model()
2023-03-15 15:41:57,902:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C93BBB9A80>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C93BC27940>, model_only=True, return_train_score=False, kwargs={})
2023-03-15 15:41:57,902:INFO:Checking exceptions
2023-03-15 15:41:57,902:INFO:Importing libraries
2023-03-15 15:41:57,902:INFO:Copying training dataset
2023-03-15 15:41:57,911:INFO:Defining folds
2023-03-15 15:41:57,911:INFO:Declaring metric variables
2023-03-15 15:41:57,918:INFO:Importing untrained model
2023-03-15 15:41:57,929:INFO:Linear Discriminant Analysis Imported successfully
2023-03-15 15:41:57,942:INFO:Starting cross validation
2023-03-15 15:41:57,944:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-15 15:41:58,223:INFO:Calculating mean and std
2023-03-15 15:41:58,225:INFO:Creating metrics dataframe
2023-03-15 15:41:58,228:INFO:Uploading results into container
2023-03-15 15:41:58,228:INFO:Uploading model into container now
2023-03-15 15:41:58,229:INFO:_master_model_container: 11
2023-03-15 15:41:58,229:INFO:_display_container: 2
2023-03-15 15:41:58,229:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2023-03-15 15:41:58,230:INFO:create_model() successfully completed......................................
2023-03-15 15:41:58,315:INFO:SubProcess create_model() end ==================================
2023-03-15 15:41:58,316:INFO:Creating metrics dataframe
2023-03-15 15:41:58,338:INFO:Initializing Extra Trees Classifier
2023-03-15 15:41:58,338:INFO:Total runtime is 0.23705668846766154 minutes
2023-03-15 15:41:58,343:INFO:SubProcess create_model() called ==================================
2023-03-15 15:41:58,344:INFO:Initializing create_model()
2023-03-15 15:41:58,344:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C93BBB9A80>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C93BC27940>, model_only=True, return_train_score=False, kwargs={})
2023-03-15 15:41:58,345:INFO:Checking exceptions
2023-03-15 15:41:58,345:INFO:Importing libraries
2023-03-15 15:41:58,345:INFO:Copying training dataset
2023-03-15 15:41:58,353:INFO:Defining folds
2023-03-15 15:41:58,353:INFO:Declaring metric variables
2023-03-15 15:41:58,359:INFO:Importing untrained model
2023-03-15 15:41:58,368:INFO:Extra Trees Classifier Imported successfully
2023-03-15 15:41:58,379:INFO:Starting cross validation
2023-03-15 15:41:58,381:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-15 15:41:59,460:INFO:Calculating mean and std
2023-03-15 15:41:59,461:INFO:Creating metrics dataframe
2023-03-15 15:41:59,466:INFO:Uploading results into container
2023-03-15 15:41:59,466:INFO:Uploading model into container now
2023-03-15 15:41:59,467:INFO:_master_model_container: 12
2023-03-15 15:41:59,467:INFO:_display_container: 2
2023-03-15 15:41:59,467:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     n_estimators=100, n_jobs=-1, oob_score=False,
                     random_state=42, verbose=0, warm_start=False)
2023-03-15 15:41:59,467:INFO:create_model() successfully completed......................................
2023-03-15 15:41:59,555:INFO:SubProcess create_model() end ==================================
2023-03-15 15:41:59,555:INFO:Creating metrics dataframe
2023-03-15 15:41:59,578:INFO:Initializing Light Gradient Boosting Machine
2023-03-15 15:41:59,578:INFO:Total runtime is 0.25771388212839763 minutes
2023-03-15 15:41:59,586:INFO:SubProcess create_model() called ==================================
2023-03-15 15:41:59,586:INFO:Initializing create_model()
2023-03-15 15:41:59,586:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C93BBB9A80>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C93BC27940>, model_only=True, return_train_score=False, kwargs={})
2023-03-15 15:41:59,586:INFO:Checking exceptions
2023-03-15 15:41:59,586:INFO:Importing libraries
2023-03-15 15:41:59,587:INFO:Copying training dataset
2023-03-15 15:41:59,594:INFO:Defining folds
2023-03-15 15:41:59,594:INFO:Declaring metric variables
2023-03-15 15:41:59,600:INFO:Importing untrained model
2023-03-15 15:41:59,607:INFO:Light Gradient Boosting Machine Imported successfully
2023-03-15 15:41:59,618:INFO:Starting cross validation
2023-03-15 15:41:59,619:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-15 15:42:00,064:INFO:Calculating mean and std
2023-03-15 15:42:00,066:INFO:Creating metrics dataframe
2023-03-15 15:42:00,070:INFO:Uploading results into container
2023-03-15 15:42:00,070:INFO:Uploading model into container now
2023-03-15 15:42:00,071:INFO:_master_model_container: 13
2023-03-15 15:42:00,071:INFO:_display_container: 2
2023-03-15 15:42:00,071:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=42, reg_alpha=0.0, reg_lambda=0.0, silent='warn',
               subsample=1.0, subsample_for_bin=200000, subsample_freq=0)
2023-03-15 15:42:00,071:INFO:create_model() successfully completed......................................
2023-03-15 15:42:00,157:INFO:SubProcess create_model() end ==================================
2023-03-15 15:42:00,157:INFO:Creating metrics dataframe
2023-03-15 15:42:00,185:INFO:Initializing Dummy Classifier
2023-03-15 15:42:00,185:INFO:Total runtime is 0.26783483425776167 minutes
2023-03-15 15:42:00,192:INFO:SubProcess create_model() called ==================================
2023-03-15 15:42:00,192:INFO:Initializing create_model()
2023-03-15 15:42:00,193:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C93BBB9A80>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C93BC27940>, model_only=True, return_train_score=False, kwargs={})
2023-03-15 15:42:00,193:INFO:Checking exceptions
2023-03-15 15:42:00,193:INFO:Importing libraries
2023-03-15 15:42:00,193:INFO:Copying training dataset
2023-03-15 15:42:00,204:INFO:Defining folds
2023-03-15 15:42:00,204:INFO:Declaring metric variables
2023-03-15 15:42:00,212:INFO:Importing untrained model
2023-03-15 15:42:00,223:INFO:Dummy Classifier Imported successfully
2023-03-15 15:42:00,239:INFO:Starting cross validation
2023-03-15 15:42:00,241:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-15 15:42:00,486:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-03-15 15:42:00,489:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-03-15 15:42:00,494:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-03-15 15:42:00,510:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-03-15 15:42:00,519:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-03-15 15:42:00,523:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-03-15 15:42:00,524:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-03-15 15:42:00,529:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-03-15 15:42:00,585:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-03-15 15:42:00,586:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-03-15 15:42:00,590:INFO:Calculating mean and std
2023-03-15 15:42:00,590:INFO:Creating metrics dataframe
2023-03-15 15:42:00,594:INFO:Uploading results into container
2023-03-15 15:42:00,595:INFO:Uploading model into container now
2023-03-15 15:42:00,595:INFO:_master_model_container: 14
2023-03-15 15:42:00,595:INFO:_display_container: 2
2023-03-15 15:42:00,595:INFO:DummyClassifier(constant=None, random_state=42, strategy='prior')
2023-03-15 15:42:00,595:INFO:create_model() successfully completed......................................
2023-03-15 15:42:00,685:INFO:SubProcess create_model() end ==================================
2023-03-15 15:42:00,686:INFO:Creating metrics dataframe
2023-03-15 15:42:00,750:INFO:Initializing create_model()
2023-03-15 15:42:00,751:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C93BBB9A80>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=42, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-03-15 15:42:00,751:INFO:Checking exceptions
2023-03-15 15:42:00,755:INFO:Importing libraries
2023-03-15 15:42:00,755:INFO:Copying training dataset
2023-03-15 15:42:00,768:INFO:Defining folds
2023-03-15 15:42:00,768:INFO:Declaring metric variables
2023-03-15 15:42:00,769:INFO:Importing untrained model
2023-03-15 15:42:00,769:INFO:Declaring custom model
2023-03-15 15:42:00,770:INFO:Logistic Regression Imported successfully
2023-03-15 15:42:00,773:INFO:Cross validation set to False
2023-03-15 15:42:00,773:INFO:Fitting Model
2023-03-15 15:42:00,864:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=42, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2023-03-15 15:42:00,864:INFO:create_model() successfully completed......................................
2023-03-15 15:42:01,009:INFO:_master_model_container: 14
2023-03-15 15:42:01,010:INFO:_display_container: 2
2023-03-15 15:42:01,011:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=42, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2023-03-15 15:42:01,011:INFO:compare_models() successfully completed......................................
2023-03-15 15:42:01,296:INFO:gpu_param set to False
2023-03-15 15:42:01,397:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 15:42:01,398:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 15:42:01,484:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 15:42:01,485:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 15:42:01,544:INFO:gpu_param set to False
2023-03-15 15:42:01,643:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 15:42:01,644:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 15:42:01,726:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 15:42:01,726:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 15:42:01,906:INFO:Initializing evaluate_model()
2023-03-15 15:42:01,906:INFO:evaluate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C93BBB9A80>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=42, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None, use_train_data=False)
2023-03-15 15:42:01,925:INFO:Initializing plot_model()
2023-03-15 15:42:01,926:INFO:plot_model(plot=pipeline, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), use_train_data=False, verbose=False, display=None, display_format=None, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=42, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C93BBB9A80>, system=True)
2023-03-15 15:42:01,926:INFO:Checking exceptions
2023-03-15 15:42:01,930:INFO:Preloading libraries
2023-03-15 15:42:01,930:INFO:Copying training dataset
2023-03-15 15:42:01,930:INFO:Plot type: pipeline
2023-03-15 15:42:02,052:INFO:Visual Rendered Successfully
2023-03-15 15:42:02,144:INFO:plot_model() successfully completed......................................
2023-03-15 15:42:02,333:INFO:Initializing predict_model()
2023-03-15 15:42:02,334:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C93BBB9A80>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=42, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, replace_labels_in_column=<function _SupervisedExperiment.predict_model.<locals>.replace_labels_in_column at 0x000002C939898940>)
2023-03-15 15:42:02,334:INFO:Checking exceptions
2023-03-15 15:42:02,334:INFO:Preloading libraries
2023-03-15 15:42:02,641:INFO:Initializing create_model()
2023-03-15 15:42:02,641:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C93BBB9A80>, estimator=gbc, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-03-15 15:42:02,641:INFO:Checking exceptions
2023-03-15 15:42:02,675:INFO:Importing libraries
2023-03-15 15:42:02,675:INFO:Copying training dataset
2023-03-15 15:42:02,687:INFO:Defining folds
2023-03-15 15:42:02,687:INFO:Declaring metric variables
2023-03-15 15:42:02,693:INFO:Importing untrained model
2023-03-15 15:42:02,702:INFO:Gradient Boosting Classifier Imported successfully
2023-03-15 15:42:02,719:INFO:Starting cross validation
2023-03-15 15:42:02,720:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-15 15:42:03,450:INFO:Calculating mean and std
2023-03-15 15:42:03,450:INFO:Creating metrics dataframe
2023-03-15 15:42:03,456:INFO:Finalizing model
2023-03-15 15:42:03,504:INFO:Uploading results into container
2023-03-15 15:42:03,505:INFO:Uploading model into container now
2023-03-15 15:42:03,521:INFO:_master_model_container: 15
2023-03-15 15:42:03,521:INFO:_display_container: 4
2023-03-15 15:42:03,522:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=42, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2023-03-15 15:42:03,522:INFO:create_model() successfully completed......................................
2023-03-15 15:42:33,775:INFO:PyCaret ClassificationExperiment
2023-03-15 15:42:33,775:INFO:Logging name: clf-default-name
2023-03-15 15:42:33,775:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2023-03-15 15:42:33,776:INFO:version 3.0.0.rc9
2023-03-15 15:42:33,776:INFO:Initializing setup()
2023-03-15 15:42:33,776:INFO:self.USI: 501f
2023-03-15 15:42:33,776:INFO:self._variable_keys: {'is_multiclass', 'X_train', 'gpu_param', 'target_param', 'exp_id', '_ml_usecase', 'y_train', '_available_plots', 'X_test', 'memory', 'fold_groups_param', 'X', 'data', 'y', 'USI', 'idx', 'exp_name_log', 'fold_generator', 'log_plots_param', 'fold_shuffle_param', 'logging_param', 'y_test', 'pipeline', 'fix_imbalance', 'gpu_n_jobs_param', 'n_jobs_param', 'html_param', 'seed'}
2023-03-15 15:42:33,776:INFO:Checking environment
2023-03-15 15:42:33,776:INFO:python_version: 3.10.9
2023-03-15 15:42:33,776:INFO:python_build: ('main', 'Mar  1 2023 18:18:15')
2023-03-15 15:42:33,776:INFO:machine: AMD64
2023-03-15 15:42:33,776:INFO:platform: Windows-10-10.0.22621-SP0
2023-03-15 15:42:33,781:INFO:Memory: svmem(total=17005780992, available=5093064704, percent=70.1, used=11912716288, free=5093064704)
2023-03-15 15:42:33,781:INFO:Physical Core: 4
2023-03-15 15:42:33,781:INFO:Logical Core: 8
2023-03-15 15:42:33,782:INFO:Checking libraries
2023-03-15 15:42:33,782:INFO:System:
2023-03-15 15:42:33,782:INFO:    python: 3.10.9 | packaged by Anaconda, Inc. | (main, Mar  1 2023, 18:18:15) [MSC v.1916 64 bit (AMD64)]
2023-03-15 15:42:33,782:INFO:executable: c:\Users\juud0\miniconda3\envs\pip310\python.exe
2023-03-15 15:42:33,782:INFO:   machine: Windows-10-10.0.22621-SP0
2023-03-15 15:42:33,782:INFO:PyCaret required dependencies:
2023-03-15 15:42:33,782:INFO:                 pip: 23.0.1
2023-03-15 15:42:33,782:INFO:          setuptools: 65.6.3
2023-03-15 15:42:33,782:INFO:             pycaret: 3.0.0rc9
2023-03-15 15:42:33,783:INFO:             IPython: 8.11.0
2023-03-15 15:42:33,783:INFO:          ipywidgets: 8.0.4
2023-03-15 15:42:33,783:INFO:                tqdm: 4.65.0
2023-03-15 15:42:33,783:INFO:               numpy: 1.23.5
2023-03-15 15:42:33,783:INFO:              pandas: 1.5.3
2023-03-15 15:42:33,783:INFO:              jinja2: 3.1.2
2023-03-15 15:42:33,783:INFO:               scipy: 1.10.1
2023-03-15 15:42:33,783:INFO:              joblib: 1.2.0
2023-03-15 15:42:33,783:INFO:             sklearn: 1.2.1
2023-03-15 15:42:33,783:INFO:                pyod: 1.0.7
2023-03-15 15:42:33,783:INFO:            imblearn: 0.10.1
2023-03-15 15:42:33,783:INFO:   category_encoders: 2.6.0
2023-03-15 15:42:33,783:INFO:            lightgbm: 3.3.5
2023-03-15 15:42:33,784:INFO:               numba: 0.56.4
2023-03-15 15:42:33,784:INFO:            requests: 2.28.2
2023-03-15 15:42:33,784:INFO:          matplotlib: 3.7.1
2023-03-15 15:42:33,784:INFO:          scikitplot: 0.3.7
2023-03-15 15:42:33,784:INFO:         yellowbrick: 1.5
2023-03-15 15:42:33,784:INFO:              plotly: 5.13.1
2023-03-15 15:42:33,784:INFO:             kaleido: 0.2.1
2023-03-15 15:42:33,784:INFO:         statsmodels: 0.13.5
2023-03-15 15:42:33,784:INFO:              sktime: 0.16.1
2023-03-15 15:42:33,784:INFO:               tbats: 1.1.2
2023-03-15 15:42:33,784:INFO:            pmdarima: 2.0.2
2023-03-15 15:42:33,784:INFO:              psutil: 5.9.4
2023-03-15 15:42:33,784:INFO:PyCaret optional dependencies:
2023-03-15 15:42:33,785:INFO:                shap: Not installed
2023-03-15 15:42:33,785:INFO:           interpret: Not installed
2023-03-15 15:42:33,785:INFO:                umap: Not installed
2023-03-15 15:42:33,785:INFO:    pandas_profiling: Not installed
2023-03-15 15:42:33,785:INFO:  explainerdashboard: Not installed
2023-03-15 15:42:33,785:INFO:             autoviz: Not installed
2023-03-15 15:42:33,785:INFO:           fairlearn: Not installed
2023-03-15 15:42:33,785:INFO:             xgboost: Not installed
2023-03-15 15:42:33,785:INFO:            catboost: Not installed
2023-03-15 15:42:33,785:INFO:              kmodes: Not installed
2023-03-15 15:42:33,785:INFO:             mlxtend: Not installed
2023-03-15 15:42:33,786:INFO:       statsforecast: Not installed
2023-03-15 15:42:33,786:INFO:        tune_sklearn: Not installed
2023-03-15 15:42:33,786:INFO:                 ray: Not installed
2023-03-15 15:42:33,786:INFO:            hyperopt: Not installed
2023-03-15 15:42:33,786:INFO:              optuna: Not installed
2023-03-15 15:42:33,786:INFO:               skopt: Not installed
2023-03-15 15:42:33,786:INFO:              mlflow: Not installed
2023-03-15 15:42:33,786:INFO:              gradio: Not installed
2023-03-15 15:42:33,786:INFO:             fastapi: Not installed
2023-03-15 15:42:33,786:INFO:             uvicorn: Not installed
2023-03-15 15:42:33,787:INFO:              m2cgen: Not installed
2023-03-15 15:42:33,787:INFO:           evidently: Not installed
2023-03-15 15:42:33,787:INFO:               fugue: Not installed
2023-03-15 15:42:33,787:INFO:           streamlit: Not installed
2023-03-15 15:42:33,787:INFO:             prophet: Not installed
2023-03-15 15:42:33,787:INFO:None
2023-03-15 15:42:33,787:INFO:Set up data.
2023-03-15 15:42:33,798:INFO:Set up train/test split.
2023-03-15 15:42:33,803:INFO:Set up index.
2023-03-15 15:42:33,805:INFO:Set up folding strategy.
2023-03-15 15:42:33,805:INFO:Assigning column types.
2023-03-15 15:42:33,811:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-03-15 15:42:33,864:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-03-15 15:42:33,865:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-03-15 15:42:33,897:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 15:42:33,897:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 15:42:33,945:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-03-15 15:42:33,946:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-03-15 15:42:33,976:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 15:42:33,977:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 15:42:33,977:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-03-15 15:42:34,029:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-03-15 15:42:34,061:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 15:42:34,061:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 15:42:34,123:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-03-15 15:42:34,176:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 15:42:34,176:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 15:42:34,177:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2023-03-15 15:42:34,302:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 15:42:34,302:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 15:42:34,393:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 15:42:34,393:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 15:42:34,394:INFO:Preparing preprocessing pipeline...
2023-03-15 15:42:34,395:INFO:Set up column name cleaning.
2023-03-15 15:42:34,395:INFO:Set up simple imputation.
2023-03-15 15:42:34,425:INFO:Finished creating preprocessing pipeline.
2023-03-15 15:42:34,431:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\juud0\AppData\Local\Temp\joblib),
         steps=[('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Number of times pregnant',
                                             'Plasma glucose concentration a 2 '
                                             'hours in an oral glu...
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated')))],
         verbose=False)
2023-03-15 15:42:34,432:INFO:Creating final display dataframe.
2023-03-15 15:42:34,602:INFO:Setup _display_container:                     Description             Value
0                    Session id                42
1                        Target    Class variable
2                   Target type            Binary
3           Original data shape          (768, 9)
4        Transformed data shape          (768, 9)
5   Transformed train set shape          (614, 9)
6    Transformed test set shape          (154, 9)
7              Numeric features                 8
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12               Fold Generator   StratifiedKFold
13                  Fold Number                10
14                     CPU Jobs                -1
15                      Use GPU             False
16               Log Experiment             False
17              Experiment Name  clf-default-name
18                          USI              501f
2023-03-15 15:42:34,714:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 15:42:34,715:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 15:42:34,807:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 15:42:34,807:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 15:42:34,808:INFO:setup() successfully completed in 1.04s...............
2023-03-15 15:42:34,906:INFO:Initializing compare_models()
2023-03-15 15:42:34,907:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C93BB4D630>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000002C93BB4D630>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2023-03-15 15:42:34,907:INFO:Checking exceptions
2023-03-15 15:42:34,915:INFO:Preparing display monitor
2023-03-15 15:42:34,972:INFO:Initializing Logistic Regression
2023-03-15 15:42:34,973:INFO:Total runtime is 1.8274784088134767e-05 minutes
2023-03-15 15:42:34,982:INFO:SubProcess create_model() called ==================================
2023-03-15 15:42:34,982:INFO:Initializing create_model()
2023-03-15 15:42:34,983:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C93BB4D630>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C93885BE80>, model_only=True, return_train_score=False, kwargs={})
2023-03-15 15:42:34,983:INFO:Checking exceptions
2023-03-15 15:42:34,983:INFO:Importing libraries
2023-03-15 15:42:34,983:INFO:Copying training dataset
2023-03-15 15:42:34,991:INFO:Defining folds
2023-03-15 15:42:34,991:INFO:Declaring metric variables
2023-03-15 15:42:34,996:INFO:Importing untrained model
2023-03-15 15:42:35,001:INFO:Logistic Regression Imported successfully
2023-03-15 15:42:35,015:INFO:Starting cross validation
2023-03-15 15:42:35,018:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-15 15:42:35,411:INFO:Calculating mean and std
2023-03-15 15:42:35,414:INFO:Creating metrics dataframe
2023-03-15 15:42:35,417:INFO:Uploading results into container
2023-03-15 15:42:35,417:INFO:Uploading model into container now
2023-03-15 15:42:35,418:INFO:_master_model_container: 1
2023-03-15 15:42:35,418:INFO:_display_container: 2
2023-03-15 15:42:35,418:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=42, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2023-03-15 15:42:35,418:INFO:create_model() successfully completed......................................
2023-03-15 15:42:35,512:INFO:SubProcess create_model() end ==================================
2023-03-15 15:42:35,512:INFO:Creating metrics dataframe
2023-03-15 15:42:35,528:INFO:Initializing K Neighbors Classifier
2023-03-15 15:42:35,528:INFO:Total runtime is 0.009270230929056805 minutes
2023-03-15 15:42:35,533:INFO:SubProcess create_model() called ==================================
2023-03-15 15:42:35,535:INFO:Initializing create_model()
2023-03-15 15:42:35,535:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C93BB4D630>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C93885BE80>, model_only=True, return_train_score=False, kwargs={})
2023-03-15 15:42:35,535:INFO:Checking exceptions
2023-03-15 15:42:35,535:INFO:Importing libraries
2023-03-15 15:42:35,535:INFO:Copying training dataset
2023-03-15 15:42:35,542:INFO:Defining folds
2023-03-15 15:42:35,542:INFO:Declaring metric variables
2023-03-15 15:42:35,547:INFO:Importing untrained model
2023-03-15 15:42:35,553:INFO:K Neighbors Classifier Imported successfully
2023-03-15 15:42:35,566:INFO:Starting cross validation
2023-03-15 15:42:35,567:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-15 15:42:36,018:INFO:Calculating mean and std
2023-03-15 15:42:36,019:INFO:Creating metrics dataframe
2023-03-15 15:42:36,024:INFO:Uploading results into container
2023-03-15 15:42:36,025:INFO:Uploading model into container now
2023-03-15 15:42:36,025:INFO:_master_model_container: 2
2023-03-15 15:42:36,025:INFO:_display_container: 2
2023-03-15 15:42:36,026:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2023-03-15 15:42:36,026:INFO:create_model() successfully completed......................................
2023-03-15 15:42:36,121:INFO:SubProcess create_model() end ==================================
2023-03-15 15:42:36,121:INFO:Creating metrics dataframe
2023-03-15 15:42:36,143:INFO:Initializing Naive Bayes
2023-03-15 15:42:36,144:INFO:Total runtime is 0.01953658660252889 minutes
2023-03-15 15:42:36,150:INFO:SubProcess create_model() called ==================================
2023-03-15 15:42:36,151:INFO:Initializing create_model()
2023-03-15 15:42:36,151:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C93BB4D630>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C93885BE80>, model_only=True, return_train_score=False, kwargs={})
2023-03-15 15:42:36,151:INFO:Checking exceptions
2023-03-15 15:42:36,152:INFO:Importing libraries
2023-03-15 15:42:36,152:INFO:Copying training dataset
2023-03-15 15:42:36,162:INFO:Defining folds
2023-03-15 15:42:36,162:INFO:Declaring metric variables
2023-03-15 15:42:36,173:INFO:Importing untrained model
2023-03-15 15:42:36,184:INFO:Naive Bayes Imported successfully
2023-03-15 15:42:36,200:INFO:Starting cross validation
2023-03-15 15:42:36,202:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-15 15:42:36,563:INFO:Calculating mean and std
2023-03-15 15:42:36,564:INFO:Creating metrics dataframe
2023-03-15 15:42:36,568:INFO:Uploading results into container
2023-03-15 15:42:36,571:INFO:Uploading model into container now
2023-03-15 15:42:36,572:INFO:_master_model_container: 3
2023-03-15 15:42:36,572:INFO:_display_container: 2
2023-03-15 15:42:36,573:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2023-03-15 15:42:36,573:INFO:create_model() successfully completed......................................
2023-03-15 15:42:36,672:INFO:SubProcess create_model() end ==================================
2023-03-15 15:42:36,673:INFO:Creating metrics dataframe
2023-03-15 15:42:36,694:INFO:Initializing Decision Tree Classifier
2023-03-15 15:42:36,696:INFO:Total runtime is 0.028723355134328207 minutes
2023-03-15 15:42:36,705:INFO:SubProcess create_model() called ==================================
2023-03-15 15:42:36,706:INFO:Initializing create_model()
2023-03-15 15:42:36,706:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C93BB4D630>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C93885BE80>, model_only=True, return_train_score=False, kwargs={})
2023-03-15 15:42:36,707:INFO:Checking exceptions
2023-03-15 15:42:36,707:INFO:Importing libraries
2023-03-15 15:42:36,707:INFO:Copying training dataset
2023-03-15 15:42:36,717:INFO:Defining folds
2023-03-15 15:42:36,717:INFO:Declaring metric variables
2023-03-15 15:42:36,729:INFO:Importing untrained model
2023-03-15 15:42:36,742:INFO:Decision Tree Classifier Imported successfully
2023-03-15 15:42:36,761:INFO:Starting cross validation
2023-03-15 15:42:36,763:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-15 15:42:37,135:INFO:Calculating mean and std
2023-03-15 15:42:37,136:INFO:Creating metrics dataframe
2023-03-15 15:42:37,141:INFO:Uploading results into container
2023-03-15 15:42:37,142:INFO:Uploading model into container now
2023-03-15 15:42:37,142:INFO:_master_model_container: 4
2023-03-15 15:42:37,143:INFO:_display_container: 2
2023-03-15 15:42:37,143:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=42, splitter='best')
2023-03-15 15:42:37,143:INFO:create_model() successfully completed......................................
2023-03-15 15:42:37,234:INFO:SubProcess create_model() end ==================================
2023-03-15 15:42:37,236:INFO:Creating metrics dataframe
2023-03-15 15:42:37,269:INFO:Initializing SVM - Linear Kernel
2023-03-15 15:42:37,270:INFO:Total runtime is 0.03827880620956421 minutes
2023-03-15 15:42:37,279:INFO:SubProcess create_model() called ==================================
2023-03-15 15:42:37,280:INFO:Initializing create_model()
2023-03-15 15:42:37,280:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C93BB4D630>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C93885BE80>, model_only=True, return_train_score=False, kwargs={})
2023-03-15 15:42:37,280:INFO:Checking exceptions
2023-03-15 15:42:37,281:INFO:Importing libraries
2023-03-15 15:42:37,281:INFO:Copying training dataset
2023-03-15 15:42:37,301:INFO:Defining folds
2023-03-15 15:42:37,302:INFO:Declaring metric variables
2023-03-15 15:42:37,310:INFO:Importing untrained model
2023-03-15 15:42:37,318:INFO:SVM - Linear Kernel Imported successfully
2023-03-15 15:42:37,332:INFO:Starting cross validation
2023-03-15 15:42:37,333:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-15 15:42:37,596:INFO:Calculating mean and std
2023-03-15 15:42:37,597:INFO:Creating metrics dataframe
2023-03-15 15:42:37,600:INFO:Uploading results into container
2023-03-15 15:42:37,602:INFO:Uploading model into container now
2023-03-15 15:42:37,602:INFO:_master_model_container: 5
2023-03-15 15:42:37,602:INFO:_display_container: 2
2023-03-15 15:42:37,603:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=42, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2023-03-15 15:42:37,603:INFO:create_model() successfully completed......................................
2023-03-15 15:42:37,694:INFO:SubProcess create_model() end ==================================
2023-03-15 15:42:37,694:INFO:Creating metrics dataframe
2023-03-15 15:42:37,717:INFO:Initializing Ridge Classifier
2023-03-15 15:42:37,717:INFO:Total runtime is 0.04575534264246623 minutes
2023-03-15 15:42:37,726:INFO:SubProcess create_model() called ==================================
2023-03-15 15:42:37,727:INFO:Initializing create_model()
2023-03-15 15:42:37,727:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C93BB4D630>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C93885BE80>, model_only=True, return_train_score=False, kwargs={})
2023-03-15 15:42:37,728:INFO:Checking exceptions
2023-03-15 15:42:37,728:INFO:Importing libraries
2023-03-15 15:42:37,728:INFO:Copying training dataset
2023-03-15 15:42:37,742:INFO:Defining folds
2023-03-15 15:42:37,742:INFO:Declaring metric variables
2023-03-15 15:42:37,753:INFO:Importing untrained model
2023-03-15 15:42:37,767:INFO:Ridge Classifier Imported successfully
2023-03-15 15:42:37,788:INFO:Starting cross validation
2023-03-15 15:42:37,790:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-15 15:42:38,046:INFO:Calculating mean and std
2023-03-15 15:42:38,047:INFO:Creating metrics dataframe
2023-03-15 15:42:38,051:INFO:Uploading results into container
2023-03-15 15:42:38,052:INFO:Uploading model into container now
2023-03-15 15:42:38,052:INFO:_master_model_container: 6
2023-03-15 15:42:38,054:INFO:_display_container: 2
2023-03-15 15:42:38,054:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=42, solver='auto',
                tol=0.0001)
2023-03-15 15:42:38,054:INFO:create_model() successfully completed......................................
2023-03-15 15:42:38,144:INFO:SubProcess create_model() end ==================================
2023-03-15 15:42:38,146:INFO:Creating metrics dataframe
2023-03-15 15:42:38,176:INFO:Initializing Random Forest Classifier
2023-03-15 15:42:38,176:INFO:Total runtime is 0.05340274969736735 minutes
2023-03-15 15:42:38,185:INFO:SubProcess create_model() called ==================================
2023-03-15 15:42:38,186:INFO:Initializing create_model()
2023-03-15 15:42:38,187:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C93BB4D630>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C93885BE80>, model_only=True, return_train_score=False, kwargs={})
2023-03-15 15:42:38,189:INFO:Checking exceptions
2023-03-15 15:42:38,189:INFO:Importing libraries
2023-03-15 15:42:38,189:INFO:Copying training dataset
2023-03-15 15:42:38,201:INFO:Defining folds
2023-03-15 15:42:38,201:INFO:Declaring metric variables
2023-03-15 15:42:38,213:INFO:Importing untrained model
2023-03-15 15:42:38,226:INFO:Random Forest Classifier Imported successfully
2023-03-15 15:42:38,240:INFO:Starting cross validation
2023-03-15 15:42:38,242:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-15 15:42:39,281:INFO:Calculating mean and std
2023-03-15 15:42:39,282:INFO:Creating metrics dataframe
2023-03-15 15:42:39,287:INFO:Uploading results into container
2023-03-15 15:42:39,288:INFO:Uploading model into container now
2023-03-15 15:42:39,288:INFO:_master_model_container: 7
2023-03-15 15:42:39,288:INFO:_display_container: 2
2023-03-15 15:42:39,289:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       n_estimators=100, n_jobs=-1, oob_score=False,
                       random_state=42, verbose=0, warm_start=False)
2023-03-15 15:42:39,289:INFO:create_model() successfully completed......................................
2023-03-15 15:42:39,378:INFO:SubProcess create_model() end ==================================
2023-03-15 15:42:39,380:INFO:Creating metrics dataframe
2023-03-15 15:42:39,402:INFO:Initializing Quadratic Discriminant Analysis
2023-03-15 15:42:39,403:INFO:Total runtime is 0.07385087807973226 minutes
2023-03-15 15:42:39,411:INFO:SubProcess create_model() called ==================================
2023-03-15 15:42:39,411:INFO:Initializing create_model()
2023-03-15 15:42:39,411:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C93BB4D630>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C93885BE80>, model_only=True, return_train_score=False, kwargs={})
2023-03-15 15:42:39,411:INFO:Checking exceptions
2023-03-15 15:42:39,411:INFO:Importing libraries
2023-03-15 15:42:39,412:INFO:Copying training dataset
2023-03-15 15:42:39,421:INFO:Defining folds
2023-03-15 15:42:39,421:INFO:Declaring metric variables
2023-03-15 15:42:39,428:INFO:Importing untrained model
2023-03-15 15:42:39,437:INFO:Quadratic Discriminant Analysis Imported successfully
2023-03-15 15:42:39,454:INFO:Starting cross validation
2023-03-15 15:42:39,455:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-15 15:42:39,731:INFO:Calculating mean and std
2023-03-15 15:42:39,732:INFO:Creating metrics dataframe
2023-03-15 15:42:39,737:INFO:Uploading results into container
2023-03-15 15:42:39,737:INFO:Uploading model into container now
2023-03-15 15:42:39,738:INFO:_master_model_container: 8
2023-03-15 15:42:39,738:INFO:_display_container: 2
2023-03-15 15:42:39,739:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2023-03-15 15:42:39,739:INFO:create_model() successfully completed......................................
2023-03-15 15:42:39,843:INFO:SubProcess create_model() end ==================================
2023-03-15 15:42:39,843:INFO:Creating metrics dataframe
2023-03-15 15:42:39,869:INFO:Initializing Ada Boost Classifier
2023-03-15 15:42:39,869:INFO:Total runtime is 0.08161953290303547 minutes
2023-03-15 15:42:39,877:INFO:SubProcess create_model() called ==================================
2023-03-15 15:42:39,877:INFO:Initializing create_model()
2023-03-15 15:42:39,877:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C93BB4D630>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C93885BE80>, model_only=True, return_train_score=False, kwargs={})
2023-03-15 15:42:39,877:INFO:Checking exceptions
2023-03-15 15:42:39,877:INFO:Importing libraries
2023-03-15 15:42:39,877:INFO:Copying training dataset
2023-03-15 15:42:39,885:INFO:Defining folds
2023-03-15 15:42:39,886:INFO:Declaring metric variables
2023-03-15 15:42:39,892:INFO:Importing untrained model
2023-03-15 15:42:39,899:INFO:Ada Boost Classifier Imported successfully
2023-03-15 15:42:39,911:INFO:Starting cross validation
2023-03-15 15:42:39,911:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-15 15:42:40,544:INFO:Calculating mean and std
2023-03-15 15:42:40,546:INFO:Creating metrics dataframe
2023-03-15 15:42:40,551:INFO:Uploading results into container
2023-03-15 15:42:40,552:INFO:Uploading model into container now
2023-03-15 15:42:40,553:INFO:_master_model_container: 9
2023-03-15 15:42:40,553:INFO:_display_container: 2
2023-03-15 15:42:40,554:INFO:AdaBoostClassifier(algorithm='SAMME.R', base_estimator='deprecated',
                   estimator=None, learning_rate=1.0, n_estimators=50,
                   random_state=42)
2023-03-15 15:42:40,554:INFO:create_model() successfully completed......................................
2023-03-15 15:42:40,647:INFO:SubProcess create_model() end ==================================
2023-03-15 15:42:40,647:INFO:Creating metrics dataframe
2023-03-15 15:42:40,667:INFO:Initializing Gradient Boosting Classifier
2023-03-15 15:42:40,667:INFO:Total runtime is 0.09491964181264241 minutes
2023-03-15 15:42:40,674:INFO:SubProcess create_model() called ==================================
2023-03-15 15:42:40,674:INFO:Initializing create_model()
2023-03-15 15:42:40,675:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C93BB4D630>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C93885BE80>, model_only=True, return_train_score=False, kwargs={})
2023-03-15 15:42:40,675:INFO:Checking exceptions
2023-03-15 15:42:40,675:INFO:Importing libraries
2023-03-15 15:42:40,675:INFO:Copying training dataset
2023-03-15 15:42:40,681:INFO:Defining folds
2023-03-15 15:42:40,681:INFO:Declaring metric variables
2023-03-15 15:42:40,689:INFO:Importing untrained model
2023-03-15 15:42:40,695:INFO:Gradient Boosting Classifier Imported successfully
2023-03-15 15:42:40,707:INFO:Starting cross validation
2023-03-15 15:42:40,710:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-15 15:42:41,521:INFO:Calculating mean and std
2023-03-15 15:42:41,523:INFO:Creating metrics dataframe
2023-03-15 15:42:41,528:INFO:Uploading results into container
2023-03-15 15:42:41,529:INFO:Uploading model into container now
2023-03-15 15:42:41,529:INFO:_master_model_container: 10
2023-03-15 15:42:41,529:INFO:_display_container: 2
2023-03-15 15:42:41,530:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=42, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2023-03-15 15:42:41,530:INFO:create_model() successfully completed......................................
2023-03-15 15:42:41,618:INFO:SubProcess create_model() end ==================================
2023-03-15 15:42:41,618:INFO:Creating metrics dataframe
2023-03-15 15:42:41,638:INFO:Initializing Linear Discriminant Analysis
2023-03-15 15:42:41,638:INFO:Total runtime is 0.1111032485961914 minutes
2023-03-15 15:42:41,643:INFO:SubProcess create_model() called ==================================
2023-03-15 15:42:41,643:INFO:Initializing create_model()
2023-03-15 15:42:41,643:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C93BB4D630>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C93885BE80>, model_only=True, return_train_score=False, kwargs={})
2023-03-15 15:42:41,645:INFO:Checking exceptions
2023-03-15 15:42:41,645:INFO:Importing libraries
2023-03-15 15:42:41,645:INFO:Copying training dataset
2023-03-15 15:42:41,651:INFO:Defining folds
2023-03-15 15:42:41,651:INFO:Declaring metric variables
2023-03-15 15:42:41,658:INFO:Importing untrained model
2023-03-15 15:42:41,664:INFO:Linear Discriminant Analysis Imported successfully
2023-03-15 15:42:41,674:INFO:Starting cross validation
2023-03-15 15:42:41,676:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-15 15:42:41,965:INFO:Calculating mean and std
2023-03-15 15:42:41,966:INFO:Creating metrics dataframe
2023-03-15 15:42:41,971:INFO:Uploading results into container
2023-03-15 15:42:41,972:INFO:Uploading model into container now
2023-03-15 15:42:41,972:INFO:_master_model_container: 11
2023-03-15 15:42:41,972:INFO:_display_container: 2
2023-03-15 15:42:41,973:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2023-03-15 15:42:41,973:INFO:create_model() successfully completed......................................
2023-03-15 15:42:42,057:INFO:SubProcess create_model() end ==================================
2023-03-15 15:42:42,057:INFO:Creating metrics dataframe
2023-03-15 15:42:42,079:INFO:Initializing Extra Trees Classifier
2023-03-15 15:42:42,079:INFO:Total runtime is 0.11844006379445393 minutes
2023-03-15 15:42:42,086:INFO:SubProcess create_model() called ==================================
2023-03-15 15:42:42,086:INFO:Initializing create_model()
2023-03-15 15:42:42,086:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C93BB4D630>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C93885BE80>, model_only=True, return_train_score=False, kwargs={})
2023-03-15 15:42:42,086:INFO:Checking exceptions
2023-03-15 15:42:42,086:INFO:Importing libraries
2023-03-15 15:42:42,087:INFO:Copying training dataset
2023-03-15 15:42:42,097:INFO:Defining folds
2023-03-15 15:42:42,098:INFO:Declaring metric variables
2023-03-15 15:42:42,103:INFO:Importing untrained model
2023-03-15 15:42:42,109:INFO:Extra Trees Classifier Imported successfully
2023-03-15 15:42:42,120:INFO:Starting cross validation
2023-03-15 15:42:42,121:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-15 15:42:43,271:INFO:Calculating mean and std
2023-03-15 15:42:43,272:INFO:Creating metrics dataframe
2023-03-15 15:42:43,276:INFO:Uploading results into container
2023-03-15 15:42:43,276:INFO:Uploading model into container now
2023-03-15 15:42:43,277:INFO:_master_model_container: 12
2023-03-15 15:42:43,277:INFO:_display_container: 2
2023-03-15 15:42:43,277:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     n_estimators=100, n_jobs=-1, oob_score=False,
                     random_state=42, verbose=0, warm_start=False)
2023-03-15 15:42:43,277:INFO:create_model() successfully completed......................................
2023-03-15 15:42:43,375:INFO:SubProcess create_model() end ==================================
2023-03-15 15:42:43,376:INFO:Creating metrics dataframe
2023-03-15 15:42:43,411:INFO:Initializing Light Gradient Boosting Machine
2023-03-15 15:42:43,412:INFO:Total runtime is 0.14067047437032063 minutes
2023-03-15 15:42:43,422:INFO:SubProcess create_model() called ==================================
2023-03-15 15:42:43,423:INFO:Initializing create_model()
2023-03-15 15:42:43,423:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C93BB4D630>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C93885BE80>, model_only=True, return_train_score=False, kwargs={})
2023-03-15 15:42:43,423:INFO:Checking exceptions
2023-03-15 15:42:43,424:INFO:Importing libraries
2023-03-15 15:42:43,424:INFO:Copying training dataset
2023-03-15 15:42:43,437:INFO:Defining folds
2023-03-15 15:42:43,437:INFO:Declaring metric variables
2023-03-15 15:42:43,446:INFO:Importing untrained model
2023-03-15 15:42:43,455:INFO:Light Gradient Boosting Machine Imported successfully
2023-03-15 15:42:43,466:INFO:Starting cross validation
2023-03-15 15:42:43,468:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-15 15:42:43,982:INFO:Calculating mean and std
2023-03-15 15:42:43,983:INFO:Creating metrics dataframe
2023-03-15 15:42:43,987:INFO:Uploading results into container
2023-03-15 15:42:43,987:INFO:Uploading model into container now
2023-03-15 15:42:43,988:INFO:_master_model_container: 13
2023-03-15 15:42:43,988:INFO:_display_container: 2
2023-03-15 15:42:43,988:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=42, reg_alpha=0.0, reg_lambda=0.0, silent='warn',
               subsample=1.0, subsample_for_bin=200000, subsample_freq=0)
2023-03-15 15:42:43,988:INFO:create_model() successfully completed......................................
2023-03-15 15:42:44,091:INFO:SubProcess create_model() end ==================================
2023-03-15 15:42:44,091:INFO:Creating metrics dataframe
2023-03-15 15:42:44,120:INFO:Initializing Dummy Classifier
2023-03-15 15:42:44,120:INFO:Total runtime is 0.15245988368988037 minutes
2023-03-15 15:42:44,128:INFO:SubProcess create_model() called ==================================
2023-03-15 15:42:44,128:INFO:Initializing create_model()
2023-03-15 15:42:44,128:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C93BB4D630>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C93885BE80>, model_only=True, return_train_score=False, kwargs={})
2023-03-15 15:42:44,128:INFO:Checking exceptions
2023-03-15 15:42:44,128:INFO:Importing libraries
2023-03-15 15:42:44,128:INFO:Copying training dataset
2023-03-15 15:42:44,139:INFO:Defining folds
2023-03-15 15:42:44,139:INFO:Declaring metric variables
2023-03-15 15:42:44,145:INFO:Importing untrained model
2023-03-15 15:42:44,153:INFO:Dummy Classifier Imported successfully
2023-03-15 15:42:44,164:INFO:Starting cross validation
2023-03-15 15:42:44,165:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-15 15:42:44,347:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-03-15 15:42:44,349:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-03-15 15:42:44,353:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-03-15 15:42:44,358:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-03-15 15:42:44,360:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-03-15 15:42:44,393:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-03-15 15:42:44,397:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-03-15 15:42:44,410:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-03-15 15:42:44,477:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-03-15 15:42:44,478:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-03-15 15:42:44,481:INFO:Calculating mean and std
2023-03-15 15:42:44,482:INFO:Creating metrics dataframe
2023-03-15 15:42:44,487:INFO:Uploading results into container
2023-03-15 15:42:44,487:INFO:Uploading model into container now
2023-03-15 15:42:44,487:INFO:_master_model_container: 14
2023-03-15 15:42:44,487:INFO:_display_container: 2
2023-03-15 15:42:44,489:INFO:DummyClassifier(constant=None, random_state=42, strategy='prior')
2023-03-15 15:42:44,489:INFO:create_model() successfully completed......................................
2023-03-15 15:42:44,581:INFO:SubProcess create_model() end ==================================
2023-03-15 15:42:44,581:INFO:Creating metrics dataframe
2023-03-15 15:42:44,656:INFO:Initializing create_model()
2023-03-15 15:42:44,656:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C93BB4D630>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=42, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-03-15 15:42:44,657:INFO:Checking exceptions
2023-03-15 15:42:44,664:INFO:Importing libraries
2023-03-15 15:42:44,664:INFO:Copying training dataset
2023-03-15 15:42:44,677:INFO:Defining folds
2023-03-15 15:42:44,678:INFO:Declaring metric variables
2023-03-15 15:42:44,678:INFO:Importing untrained model
2023-03-15 15:42:44,679:INFO:Declaring custom model
2023-03-15 15:42:44,682:INFO:Logistic Regression Imported successfully
2023-03-15 15:42:44,686:INFO:Cross validation set to False
2023-03-15 15:42:44,686:INFO:Fitting Model
2023-03-15 15:42:44,767:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=42, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2023-03-15 15:42:44,767:INFO:create_model() successfully completed......................................
2023-03-15 15:42:44,919:INFO:_master_model_container: 14
2023-03-15 15:42:44,919:INFO:_display_container: 2
2023-03-15 15:42:44,920:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=42, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2023-03-15 15:42:44,920:INFO:compare_models() successfully completed......................................
2023-03-15 15:42:45,150:INFO:gpu_param set to False
2023-03-15 15:42:45,270:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 15:42:45,271:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 15:42:45,378:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 15:42:45,379:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 15:42:45,428:INFO:gpu_param set to False
2023-03-15 15:42:45,577:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 15:42:45,578:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 15:42:45,666:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 15:42:45,667:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 15:42:45,798:INFO:Initializing evaluate_model()
2023-03-15 15:42:45,799:INFO:evaluate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C93BB4D630>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=42, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None, use_train_data=False)
2023-03-15 15:42:45,827:INFO:Initializing plot_model()
2023-03-15 15:42:45,827:INFO:plot_model(plot=pipeline, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), use_train_data=False, verbose=False, display=None, display_format=None, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=42, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C93BB4D630>, system=True)
2023-03-15 15:42:45,827:INFO:Checking exceptions
2023-03-15 15:42:45,833:INFO:Preloading libraries
2023-03-15 15:42:45,834:INFO:Copying training dataset
2023-03-15 15:42:45,834:INFO:Plot type: pipeline
2023-03-15 15:42:46,019:INFO:Visual Rendered Successfully
2023-03-15 15:42:46,142:INFO:plot_model() successfully completed......................................
2023-03-15 15:42:46,265:INFO:Initializing predict_model()
2023-03-15 15:42:46,265:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C93BB4D630>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=42, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, replace_labels_in_column=<function _SupervisedExperiment.predict_model.<locals>.replace_labels_in_column at 0x000002C93BB0CAF0>)
2023-03-15 15:42:46,265:INFO:Checking exceptions
2023-03-15 15:42:46,265:INFO:Preloading libraries
2023-03-15 15:42:46,604:INFO:Initializing create_model()
2023-03-15 15:42:46,604:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C93BB4D630>, estimator=gbc, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-03-15 15:42:46,605:INFO:Checking exceptions
2023-03-15 15:42:46,635:INFO:Importing libraries
2023-03-15 15:42:46,637:INFO:Copying training dataset
2023-03-15 15:42:46,648:INFO:Defining folds
2023-03-15 15:42:46,649:INFO:Declaring metric variables
2023-03-15 15:42:46,656:INFO:Importing untrained model
2023-03-15 15:42:46,661:INFO:Gradient Boosting Classifier Imported successfully
2023-03-15 15:42:46,674:INFO:Starting cross validation
2023-03-15 15:42:46,676:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-15 15:42:47,443:INFO:Calculating mean and std
2023-03-15 15:42:47,444:INFO:Creating metrics dataframe
2023-03-15 15:42:47,449:INFO:Finalizing model
2023-03-15 15:42:47,490:INFO:Uploading results into container
2023-03-15 15:42:47,492:INFO:Uploading model into container now
2023-03-15 15:42:47,506:INFO:_master_model_container: 15
2023-03-15 15:42:47,506:INFO:_display_container: 4
2023-03-15 15:42:47,507:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=42, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2023-03-15 15:42:47,507:INFO:create_model() successfully completed......................................
2023-03-15 16:47:01,056:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-03-15 16:47:01,056:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-03-15 16:47:01,056:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-03-15 16:47:01,056:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-03-15 16:47:01,879:WARNING:
'prophet' is a soft dependency and not included in the pycaret installation. Please run: `pip install prophet` to install.
2023-03-15 16:47:02,272:INFO:PyCaret ClassificationExperiment
2023-03-15 16:47:02,272:INFO:Logging name: clf-default-name
2023-03-15 16:47:02,272:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2023-03-15 16:47:02,272:INFO:version 3.0.0.rc9
2023-03-15 16:47:02,272:INFO:Initializing setup()
2023-03-15 16:47:02,272:INFO:self.USI: 4b66
2023-03-15 16:47:02,272:INFO:self._variable_keys: {'X_train', 'log_plots_param', 'y', 'USI', 'seed', 'fold_groups_param', 'target_param', 'is_multiclass', 'idx', 'gpu_param', '_available_plots', 'memory', 'exp_name_log', 'data', 'n_jobs_param', 'fix_imbalance', 'X', '_ml_usecase', 'html_param', 'gpu_n_jobs_param', 'pipeline', 'fold_generator', 'fold_shuffle_param', 'y_test', 'y_train', 'exp_id', 'logging_param', 'X_test'}
2023-03-15 16:47:02,272:INFO:Checking environment
2023-03-15 16:47:02,273:INFO:python_version: 3.10.9
2023-03-15 16:47:02,273:INFO:python_build: ('main', 'Mar  1 2023 18:18:15')
2023-03-15 16:47:02,273:INFO:machine: AMD64
2023-03-15 16:47:02,273:INFO:platform: Windows-10-10.0.22621-SP0
2023-03-15 16:47:02,278:INFO:Memory: svmem(total=17005780992, available=5689274368, percent=66.5, used=11316506624, free=5689274368)
2023-03-15 16:47:02,278:INFO:Physical Core: 4
2023-03-15 16:47:02,278:INFO:Logical Core: 8
2023-03-15 16:47:02,278:INFO:Checking libraries
2023-03-15 16:47:02,278:INFO:System:
2023-03-15 16:47:02,278:INFO:    python: 3.10.9 | packaged by Anaconda, Inc. | (main, Mar  1 2023, 18:18:15) [MSC v.1916 64 bit (AMD64)]
2023-03-15 16:47:02,278:INFO:executable: c:\Users\juud0\miniconda3\envs\pip310\python.exe
2023-03-15 16:47:02,278:INFO:   machine: Windows-10-10.0.22621-SP0
2023-03-15 16:47:02,279:INFO:PyCaret required dependencies:
2023-03-15 16:47:02,279:INFO:                 pip: 23.0.1
2023-03-15 16:47:02,279:INFO:          setuptools: 65.6.3
2023-03-15 16:47:02,279:INFO:             pycaret: 3.0.0rc9
2023-03-15 16:47:02,279:INFO:             IPython: 8.11.0
2023-03-15 16:47:02,279:INFO:          ipywidgets: 8.0.4
2023-03-15 16:47:02,279:INFO:                tqdm: 4.65.0
2023-03-15 16:47:02,279:INFO:               numpy: 1.23.5
2023-03-15 16:47:02,279:INFO:              pandas: 1.5.3
2023-03-15 16:47:02,279:INFO:              jinja2: 3.1.2
2023-03-15 16:47:02,279:INFO:               scipy: 1.10.1
2023-03-15 16:47:02,279:INFO:              joblib: 1.2.0
2023-03-15 16:47:02,279:INFO:             sklearn: 1.2.1
2023-03-15 16:47:02,279:INFO:                pyod: 1.0.7
2023-03-15 16:47:02,280:INFO:            imblearn: 0.10.1
2023-03-15 16:47:02,280:INFO:   category_encoders: 2.6.0
2023-03-15 16:47:02,280:INFO:            lightgbm: 3.3.5
2023-03-15 16:47:02,280:INFO:               numba: 0.56.4
2023-03-15 16:47:02,280:INFO:            requests: 2.28.2
2023-03-15 16:47:02,280:INFO:          matplotlib: 3.7.1
2023-03-15 16:47:02,280:INFO:          scikitplot: 0.3.7
2023-03-15 16:47:02,280:INFO:         yellowbrick: 1.5
2023-03-15 16:47:02,280:INFO:              plotly: 5.13.1
2023-03-15 16:47:02,280:INFO:             kaleido: 0.2.1
2023-03-15 16:47:02,280:INFO:         statsmodels: 0.13.5
2023-03-15 16:47:02,280:INFO:              sktime: 0.16.1
2023-03-15 16:47:02,280:INFO:               tbats: 1.1.2
2023-03-15 16:47:02,280:INFO:            pmdarima: 2.0.2
2023-03-15 16:47:02,280:INFO:              psutil: 5.9.4
2023-03-15 16:47:02,280:INFO:PyCaret optional dependencies:
2023-03-15 16:47:02,297:INFO:                shap: Not installed
2023-03-15 16:47:02,297:INFO:           interpret: Not installed
2023-03-15 16:47:02,297:INFO:                umap: Not installed
2023-03-15 16:47:02,297:INFO:    pandas_profiling: Not installed
2023-03-15 16:47:02,297:INFO:  explainerdashboard: Not installed
2023-03-15 16:47:02,297:INFO:             autoviz: Not installed
2023-03-15 16:47:02,297:INFO:           fairlearn: Not installed
2023-03-15 16:47:02,297:INFO:             xgboost: Not installed
2023-03-15 16:47:02,297:INFO:            catboost: Not installed
2023-03-15 16:47:02,297:INFO:              kmodes: Not installed
2023-03-15 16:47:02,298:INFO:             mlxtend: Not installed
2023-03-15 16:47:02,298:INFO:       statsforecast: Not installed
2023-03-15 16:47:02,298:INFO:        tune_sklearn: Not installed
2023-03-15 16:47:02,298:INFO:                 ray: Not installed
2023-03-15 16:47:02,298:INFO:            hyperopt: Not installed
2023-03-15 16:47:02,298:INFO:              optuna: Not installed
2023-03-15 16:47:02,298:INFO:               skopt: Not installed
2023-03-15 16:47:02,298:INFO:              mlflow: Not installed
2023-03-15 16:47:02,298:INFO:              gradio: Not installed
2023-03-15 16:47:02,298:INFO:             fastapi: Not installed
2023-03-15 16:47:02,298:INFO:             uvicorn: Not installed
2023-03-15 16:47:02,298:INFO:              m2cgen: Not installed
2023-03-15 16:47:02,298:INFO:           evidently: Not installed
2023-03-15 16:47:02,298:INFO:               fugue: Not installed
2023-03-15 16:47:02,298:INFO:           streamlit: Not installed
2023-03-15 16:47:02,298:INFO:             prophet: Not installed
2023-03-15 16:47:02,298:INFO:None
2023-03-15 16:47:02,299:INFO:Set up data.
2023-03-15 16:47:02,305:INFO:Set up train/test split.
2023-03-15 16:47:02,317:INFO:Set up index.
2023-03-15 16:47:02,318:INFO:Set up folding strategy.
2023-03-15 16:47:02,318:INFO:Assigning column types.
2023-03-15 16:47:02,329:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-03-15 16:47:02,386:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-03-15 16:47:02,388:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-03-15 16:47:02,427:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 16:47:02,448:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 16:47:02,503:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-03-15 16:47:02,504:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-03-15 16:47:02,534:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 16:47:02,534:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 16:47:02,534:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-03-15 16:47:02,584:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-03-15 16:47:02,614:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 16:47:02,615:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 16:47:02,665:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-03-15 16:47:02,695:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 16:47:02,695:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 16:47:02,695:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2023-03-15 16:47:02,776:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 16:47:02,776:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 16:47:02,856:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 16:47:02,856:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 16:47:02,859:INFO:Preparing preprocessing pipeline...
2023-03-15 16:47:02,860:INFO:Set up label encoding.
2023-03-15 16:47:02,860:INFO:Set up simple imputation.
2023-03-15 16:47:02,863:INFO:Set up encoding of ordinal features.
2023-03-15 16:47:02,864:INFO:Set up encoding of categorical features.
2023-03-15 16:47:02,950:INFO:Finished creating preprocessing pipeline.
2023-03-15 16:47:02,980:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\juud0\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['bill_length_mm', 'bill_depth_mm',
                                             'flipper_length_mm',
                                             'body_mass_g'],
                                    transformer=SimpleImputer(add_in...
                                                               mapping=[{'col': 'sex',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': Female    0
Male      1
NaN      -1
dtype: int64}],
                                                               return_df=True,
                                                               verbose=0))),
                ('onehot_encoding',
                 TransformerWrapper(exclude=None, include=['island'],
                                    transformer=OneHotEncoder(cols=['island'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0)))],
         verbose=False)
2023-03-15 16:47:02,980:INFO:Creating final display dataframe.
2023-03-15 16:47:03,368:INFO:Setup _display_container:                     Description                               Value
0                    Session id                                  42
1                        Target                             species
2                   Target type                          Multiclass
3                Target mapping  Adelie: 0, Chinstrap: 1, Gentoo: 2
4           Original data shape                            (333, 7)
5        Transformed data shape                            (333, 9)
6   Transformed train set shape                            (266, 9)
7    Transformed test set shape                             (67, 9)
8              Ordinal features                                   1
9              Numeric features                                   4
10         Categorical features                                   2
11                   Preprocess                                True
12              Imputation type                              simple
13           Numeric imputation                                mean
14       Categorical imputation                                mode
15     Maximum one-hot encoding                                  25
16              Encoding method                                None
17               Fold Generator                     StratifiedKFold
18                  Fold Number                                  10
19                     CPU Jobs                                  -1
20                      Use GPU                               False
21               Log Experiment                               False
22              Experiment Name                    clf-default-name
23                          USI                                4b66
2023-03-15 16:47:03,467:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 16:47:03,467:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 16:47:03,559:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 16:47:03,559:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 16:47:03,559:INFO:setup() successfully completed in 1.29s...............
2023-03-15 16:53:40,787:INFO:PyCaret ClassificationExperiment
2023-03-15 16:53:40,787:INFO:Logging name: clf-default-name
2023-03-15 16:53:40,788:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2023-03-15 16:53:40,789:INFO:version 3.0.0.rc9
2023-03-15 16:53:40,789:INFO:Initializing setup()
2023-03-15 16:53:40,789:INFO:self.USI: 276d
2023-03-15 16:53:40,790:INFO:self._variable_keys: {'X_train', 'log_plots_param', 'y', 'USI', 'seed', 'fold_groups_param', 'target_param', 'is_multiclass', 'idx', 'gpu_param', '_available_plots', 'memory', 'exp_name_log', 'data', 'n_jobs_param', 'fix_imbalance', 'X', '_ml_usecase', 'html_param', 'gpu_n_jobs_param', 'pipeline', 'fold_generator', 'fold_shuffle_param', 'y_test', 'y_train', 'exp_id', 'logging_param', 'X_test'}
2023-03-15 16:53:40,790:INFO:Checking environment
2023-03-15 16:53:40,790:INFO:python_version: 3.10.9
2023-03-15 16:53:40,790:INFO:python_build: ('main', 'Mar  1 2023 18:18:15')
2023-03-15 16:53:40,790:INFO:machine: AMD64
2023-03-15 16:53:40,790:INFO:platform: Windows-10-10.0.22621-SP0
2023-03-15 16:53:40,796:INFO:Memory: svmem(total=17005780992, available=5621776384, percent=66.9, used=11384004608, free=5621776384)
2023-03-15 16:53:40,796:INFO:Physical Core: 4
2023-03-15 16:53:40,797:INFO:Logical Core: 8
2023-03-15 16:53:40,797:INFO:Checking libraries
2023-03-15 16:53:40,797:INFO:System:
2023-03-15 16:53:40,798:INFO:    python: 3.10.9 | packaged by Anaconda, Inc. | (main, Mar  1 2023, 18:18:15) [MSC v.1916 64 bit (AMD64)]
2023-03-15 16:53:40,798:INFO:executable: c:\Users\juud0\miniconda3\envs\pip310\python.exe
2023-03-15 16:53:40,798:INFO:   machine: Windows-10-10.0.22621-SP0
2023-03-15 16:53:40,800:INFO:PyCaret required dependencies:
2023-03-15 16:53:40,800:INFO:                 pip: 23.0.1
2023-03-15 16:53:40,800:INFO:          setuptools: 65.6.3
2023-03-15 16:53:40,800:INFO:             pycaret: 3.0.0rc9
2023-03-15 16:53:40,800:INFO:             IPython: 8.11.0
2023-03-15 16:53:40,800:INFO:          ipywidgets: 8.0.4
2023-03-15 16:53:40,801:INFO:                tqdm: 4.65.0
2023-03-15 16:53:40,801:INFO:               numpy: 1.23.5
2023-03-15 16:53:40,801:INFO:              pandas: 1.5.3
2023-03-15 16:53:40,801:INFO:              jinja2: 3.1.2
2023-03-15 16:53:40,801:INFO:               scipy: 1.10.1
2023-03-15 16:53:40,801:INFO:              joblib: 1.2.0
2023-03-15 16:53:40,801:INFO:             sklearn: 1.2.1
2023-03-15 16:53:40,801:INFO:                pyod: 1.0.7
2023-03-15 16:53:40,802:INFO:            imblearn: 0.10.1
2023-03-15 16:53:40,802:INFO:   category_encoders: 2.6.0
2023-03-15 16:53:40,802:INFO:            lightgbm: 3.3.5
2023-03-15 16:53:40,802:INFO:               numba: 0.56.4
2023-03-15 16:53:40,802:INFO:            requests: 2.28.2
2023-03-15 16:53:40,802:INFO:          matplotlib: 3.7.1
2023-03-15 16:53:40,802:INFO:          scikitplot: 0.3.7
2023-03-15 16:53:40,803:INFO:         yellowbrick: 1.5
2023-03-15 16:53:40,803:INFO:              plotly: 5.13.1
2023-03-15 16:53:40,803:INFO:             kaleido: 0.2.1
2023-03-15 16:53:40,803:INFO:         statsmodels: 0.13.5
2023-03-15 16:53:40,803:INFO:              sktime: 0.16.1
2023-03-15 16:53:40,803:INFO:               tbats: 1.1.2
2023-03-15 16:53:40,803:INFO:            pmdarima: 2.0.2
2023-03-15 16:53:40,804:INFO:              psutil: 5.9.4
2023-03-15 16:53:40,804:INFO:PyCaret optional dependencies:
2023-03-15 16:53:40,804:INFO:                shap: Not installed
2023-03-15 16:53:40,804:INFO:           interpret: Not installed
2023-03-15 16:53:40,804:INFO:                umap: Not installed
2023-03-15 16:53:40,804:INFO:    pandas_profiling: Not installed
2023-03-15 16:53:40,804:INFO:  explainerdashboard: Not installed
2023-03-15 16:53:40,804:INFO:             autoviz: Not installed
2023-03-15 16:53:40,805:INFO:           fairlearn: Not installed
2023-03-15 16:53:40,805:INFO:             xgboost: Not installed
2023-03-15 16:53:40,805:INFO:            catboost: Not installed
2023-03-15 16:53:40,805:INFO:              kmodes: Not installed
2023-03-15 16:53:40,806:INFO:             mlxtend: Not installed
2023-03-15 16:53:40,806:INFO:       statsforecast: Not installed
2023-03-15 16:53:40,806:INFO:        tune_sklearn: Not installed
2023-03-15 16:53:40,806:INFO:                 ray: Not installed
2023-03-15 16:53:40,806:INFO:            hyperopt: Not installed
2023-03-15 16:53:40,806:INFO:              optuna: Not installed
2023-03-15 16:53:40,806:INFO:               skopt: Not installed
2023-03-15 16:53:40,806:INFO:              mlflow: Not installed
2023-03-15 16:53:40,807:INFO:              gradio: Not installed
2023-03-15 16:53:40,807:INFO:             fastapi: Not installed
2023-03-15 16:53:40,807:INFO:             uvicorn: Not installed
2023-03-15 16:53:40,807:INFO:              m2cgen: Not installed
2023-03-15 16:53:40,807:INFO:           evidently: Not installed
2023-03-15 16:53:40,807:INFO:               fugue: Not installed
2023-03-15 16:53:40,807:INFO:           streamlit: Not installed
2023-03-15 16:53:40,807:INFO:             prophet: Not installed
2023-03-15 16:53:40,808:INFO:None
2023-03-15 16:53:40,808:INFO:Set up data.
2023-03-15 16:53:40,824:INFO:Set up train/test split.
2023-03-15 16:53:40,840:INFO:Set up index.
2023-03-15 16:53:40,840:INFO:Set up folding strategy.
2023-03-15 16:53:40,840:INFO:Assigning column types.
2023-03-15 16:53:40,850:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-03-15 16:53:40,978:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-03-15 16:53:40,979:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-03-15 16:53:41,011:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 16:53:41,011:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 16:53:41,060:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-03-15 16:53:41,061:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-03-15 16:53:41,096:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 16:53:41,097:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 16:53:41,097:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-03-15 16:53:41,155:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-03-15 16:53:41,196:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 16:53:41,196:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 16:53:41,259:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-03-15 16:53:41,292:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 16:53:41,292:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 16:53:41,293:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2023-03-15 16:53:41,380:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 16:53:41,381:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 16:53:41,466:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 16:53:41,466:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 16:53:41,467:INFO:Preparing preprocessing pipeline...
2023-03-15 16:53:41,468:INFO:Set up label encoding.
2023-03-15 16:53:41,469:INFO:Set up simple imputation.
2023-03-15 16:53:41,471:INFO:Set up encoding of ordinal features.
2023-03-15 16:53:41,472:INFO:Set up encoding of categorical features.
2023-03-15 16:53:41,554:INFO:Finished creating preprocessing pipeline.
2023-03-15 16:53:41,573:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\juud0\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['bill_length_mm', 'bill_depth_mm',
                                             'flipper_length_mm',
                                             'body_mass_g'],
                                    transformer=SimpleImputer(add_in...
                                                               mapping=[{'col': 'sex',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': Female    0
Male      1
NaN      -1
dtype: int64}],
                                                               return_df=True,
                                                               verbose=0))),
                ('onehot_encoding',
                 TransformerWrapper(exclude=None, include=['island'],
                                    transformer=OneHotEncoder(cols=['island'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0)))],
         verbose=False)
2023-03-15 16:53:41,573:INFO:Creating final display dataframe.
2023-03-15 16:53:41,984:INFO:Setup _display_container:                     Description                               Value
0                    Session id                                  42
1                        Target                             species
2                   Target type                          Multiclass
3                Target mapping  Adelie: 0, Chinstrap: 1, Gentoo: 2
4           Original data shape                            (333, 7)
5        Transformed data shape                            (333, 9)
6   Transformed train set shape                            (266, 9)
7    Transformed test set shape                             (67, 9)
8              Ordinal features                                   1
9              Numeric features                                   4
10         Categorical features                                   2
11                   Preprocess                                True
12              Imputation type                              simple
13           Numeric imputation                                mean
14       Categorical imputation                                mode
15     Maximum one-hot encoding                                  25
16              Encoding method                                None
17               Fold Generator                     StratifiedKFold
18                  Fold Number                                  10
19                     CPU Jobs                                  -1
20                      Use GPU                               False
21               Log Experiment                               False
22              Experiment Name                    clf-default-name
23                          USI                                276d
2023-03-15 16:53:42,087:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 16:53:42,087:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 16:53:42,172:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 16:53:42,172:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-03-15 16:53:42,173:INFO:setup() successfully completed in 1.39s...............
2023-03-15 16:54:26,963:INFO:Initializing compare_models()
2023-03-15 16:54:26,963:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C9F926F5E0>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000002C9F926F5E0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2023-03-15 16:54:26,963:INFO:Checking exceptions
2023-03-15 16:54:26,972:INFO:Preparing display monitor
2023-03-15 16:54:27,023:INFO:Initializing Logistic Regression
2023-03-15 16:54:27,023:INFO:Total runtime is 0.0 minutes
2023-03-15 16:54:27,029:INFO:SubProcess create_model() called ==================================
2023-03-15 16:54:27,029:INFO:Initializing create_model()
2023-03-15 16:54:27,029:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C9F926F5E0>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C9F926F2E0>, model_only=True, return_train_score=False, kwargs={})
2023-03-15 16:54:27,029:INFO:Checking exceptions
2023-03-15 16:54:27,029:INFO:Importing libraries
2023-03-15 16:54:27,030:INFO:Copying training dataset
2023-03-15 16:54:27,038:INFO:Defining folds
2023-03-15 16:54:27,038:INFO:Declaring metric variables
2023-03-15 16:54:27,047:INFO:Importing untrained model
2023-03-15 16:54:27,056:INFO:Logistic Regression Imported successfully
2023-03-15 16:54:27,069:INFO:Starting cross validation
2023-03-15 16:54:27,072:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-15 16:54:35,617:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:35,620:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:35,624:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:35,629:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-03-15 16:54:35,646:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:35,650:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:35,654:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:35,719:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-03-15 16:54:35,855:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-03-15 16:54:35,874:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:35,878:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:35,884:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:35,924:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:35,927:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:35,932:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:35,947:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:35,953:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:35,958:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:36,026:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:36,030:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:36,034:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:36,099:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:36,102:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:36,104:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:36,195:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:36,198:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:36,201:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:36,299:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:36,303:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:36,304:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:36,333:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:36,335:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:36,336:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:36,340:INFO:Calculating mean and std
2023-03-15 16:54:36,341:INFO:Creating metrics dataframe
2023-03-15 16:54:36,344:INFO:Uploading results into container
2023-03-15 16:54:36,345:INFO:Uploading model into container now
2023-03-15 16:54:36,345:INFO:_master_model_container: 1
2023-03-15 16:54:36,345:INFO:_display_container: 2
2023-03-15 16:54:36,346:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=42, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2023-03-15 16:54:36,346:INFO:create_model() successfully completed......................................
2023-03-15 16:54:36,449:INFO:SubProcess create_model() end ==================================
2023-03-15 16:54:36,449:INFO:Creating metrics dataframe
2023-03-15 16:54:36,470:INFO:Initializing K Neighbors Classifier
2023-03-15 16:54:36,471:INFO:Total runtime is 0.1574669082959493 minutes
2023-03-15 16:54:36,482:INFO:SubProcess create_model() called ==================================
2023-03-15 16:54:36,483:INFO:Initializing create_model()
2023-03-15 16:54:36,483:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C9F926F5E0>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C9F926F2E0>, model_only=True, return_train_score=False, kwargs={})
2023-03-15 16:54:36,483:INFO:Checking exceptions
2023-03-15 16:54:36,483:INFO:Importing libraries
2023-03-15 16:54:36,483:INFO:Copying training dataset
2023-03-15 16:54:36,490:INFO:Defining folds
2023-03-15 16:54:36,490:INFO:Declaring metric variables
2023-03-15 16:54:36,495:INFO:Importing untrained model
2023-03-15 16:54:36,503:INFO:K Neighbors Classifier Imported successfully
2023-03-15 16:54:36,516:INFO:Starting cross validation
2023-03-15 16:54:36,519:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-15 16:54:37,112:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:37,114:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:37,116:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:37,118:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:37,120:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:37,121:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:37,128:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:37,131:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:37,135:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:37,212:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:37,216:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:37,220:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:37,228:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:37,232:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:37,236:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:37,245:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:37,248:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:37,248:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:37,251:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:37,251:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:37,255:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:37,256:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:37,259:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:37,262:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:37,435:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:37,435:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:37,437:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:37,437:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:37,438:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:37,439:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:37,442:INFO:Calculating mean and std
2023-03-15 16:54:37,444:INFO:Creating metrics dataframe
2023-03-15 16:54:37,448:INFO:Uploading results into container
2023-03-15 16:54:37,449:INFO:Uploading model into container now
2023-03-15 16:54:37,449:INFO:_master_model_container: 2
2023-03-15 16:54:37,450:INFO:_display_container: 2
2023-03-15 16:54:37,450:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2023-03-15 16:54:37,450:INFO:create_model() successfully completed......................................
2023-03-15 16:54:37,568:INFO:SubProcess create_model() end ==================================
2023-03-15 16:54:37,568:INFO:Creating metrics dataframe
2023-03-15 16:54:37,592:INFO:Initializing Naive Bayes
2023-03-15 16:54:37,592:INFO:Total runtime is 0.17615209817886354 minutes
2023-03-15 16:54:37,601:INFO:SubProcess create_model() called ==================================
2023-03-15 16:54:37,603:INFO:Initializing create_model()
2023-03-15 16:54:37,603:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C9F926F5E0>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C9F926F2E0>, model_only=True, return_train_score=False, kwargs={})
2023-03-15 16:54:37,603:INFO:Checking exceptions
2023-03-15 16:54:37,603:INFO:Importing libraries
2023-03-15 16:54:37,603:INFO:Copying training dataset
2023-03-15 16:54:37,610:INFO:Defining folds
2023-03-15 16:54:37,611:INFO:Declaring metric variables
2023-03-15 16:54:37,622:INFO:Importing untrained model
2023-03-15 16:54:37,632:INFO:Naive Bayes Imported successfully
2023-03-15 16:54:37,644:INFO:Starting cross validation
2023-03-15 16:54:37,649:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-15 16:54:38,188:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:38,192:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:38,192:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:38,195:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:38,196:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:38,202:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:38,203:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:38,207:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:38,211:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:38,218:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:38,220:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:38,221:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:38,221:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:38,224:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:38,225:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:38,225:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:38,229:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:38,229:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:38,288:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:38,291:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:38,294:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:38,302:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:38,303:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:38,305:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:38,474:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:38,476:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:38,478:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:38,486:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:38,488:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:38,489:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:38,493:INFO:Calculating mean and std
2023-03-15 16:54:38,496:INFO:Creating metrics dataframe
2023-03-15 16:54:38,499:INFO:Uploading results into container
2023-03-15 16:54:38,501:INFO:Uploading model into container now
2023-03-15 16:54:38,501:INFO:_master_model_container: 3
2023-03-15 16:54:38,501:INFO:_display_container: 2
2023-03-15 16:54:38,501:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2023-03-15 16:54:38,501:INFO:create_model() successfully completed......................................
2023-03-15 16:54:38,601:INFO:SubProcess create_model() end ==================================
2023-03-15 16:54:38,602:INFO:Creating metrics dataframe
2023-03-15 16:54:38,625:INFO:Initializing Decision Tree Classifier
2023-03-15 16:54:38,625:INFO:Total runtime is 0.19336360692977908 minutes
2023-03-15 16:54:38,632:INFO:SubProcess create_model() called ==================================
2023-03-15 16:54:38,633:INFO:Initializing create_model()
2023-03-15 16:54:38,633:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C9F926F5E0>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C9F926F2E0>, model_only=True, return_train_score=False, kwargs={})
2023-03-15 16:54:38,633:INFO:Checking exceptions
2023-03-15 16:54:38,633:INFO:Importing libraries
2023-03-15 16:54:38,633:INFO:Copying training dataset
2023-03-15 16:54:38,640:INFO:Defining folds
2023-03-15 16:54:38,640:INFO:Declaring metric variables
2023-03-15 16:54:38,648:INFO:Importing untrained model
2023-03-15 16:54:38,656:INFO:Decision Tree Classifier Imported successfully
2023-03-15 16:54:38,668:INFO:Starting cross validation
2023-03-15 16:54:38,672:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-15 16:54:39,186:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:39,189:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:39,192:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:39,203:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:39,206:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:39,210:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:39,234:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:39,238:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:39,239:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:39,241:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:39,242:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:39,247:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:39,254:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:39,258:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:39,261:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:39,310:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:39,313:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:39,315:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:39,324:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:39,326:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:39,328:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:39,335:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:39,337:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:39,340:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:39,487:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:39,489:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:39,490:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:39,495:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:39,497:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:39,499:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:39,503:INFO:Calculating mean and std
2023-03-15 16:54:39,504:INFO:Creating metrics dataframe
2023-03-15 16:54:39,508:INFO:Uploading results into container
2023-03-15 16:54:39,508:INFO:Uploading model into container now
2023-03-15 16:54:39,509:INFO:_master_model_container: 4
2023-03-15 16:54:39,509:INFO:_display_container: 2
2023-03-15 16:54:39,509:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=42, splitter='best')
2023-03-15 16:54:39,509:INFO:create_model() successfully completed......................................
2023-03-15 16:54:39,609:INFO:SubProcess create_model() end ==================================
2023-03-15 16:54:39,609:INFO:Creating metrics dataframe
2023-03-15 16:54:39,643:INFO:Initializing SVM - Linear Kernel
2023-03-15 16:54:39,644:INFO:Total runtime is 0.21034450133641563 minutes
2023-03-15 16:54:39,654:INFO:SubProcess create_model() called ==================================
2023-03-15 16:54:39,655:INFO:Initializing create_model()
2023-03-15 16:54:39,655:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C9F926F5E0>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C9F926F2E0>, model_only=True, return_train_score=False, kwargs={})
2023-03-15 16:54:39,655:INFO:Checking exceptions
2023-03-15 16:54:39,655:INFO:Importing libraries
2023-03-15 16:54:39,655:INFO:Copying training dataset
2023-03-15 16:54:39,671:INFO:Defining folds
2023-03-15 16:54:39,671:INFO:Declaring metric variables
2023-03-15 16:54:39,680:INFO:Importing untrained model
2023-03-15 16:54:39,688:INFO:SVM - Linear Kernel Imported successfully
2023-03-15 16:54:39,705:INFO:Starting cross validation
2023-03-15 16:54:39,707:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-15 16:54:40,140:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:40,143:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:40,147:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-03-15 16:54:40,149:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:40,151:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:40,154:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:40,156:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-03-15 16:54:40,158:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:40,164:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:40,168:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:40,170:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-03-15 16:54:40,172:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:40,177:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:40,181:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:40,183:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-03-15 16:54:40,185:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:40,187:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:40,191:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:40,192:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-03-15 16:54:40,193:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:40,202:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:40,205:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:40,207:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-03-15 16:54:40,208:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:40,233:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:40,235:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:40,236:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-03-15 16:54:40,237:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:40,243:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:40,245:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:40,247:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-03-15 16:54:40,247:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:40,366:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:40,368:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:40,369:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-03-15 16:54:40,370:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:40,370:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:40,371:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:40,372:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-03-15 16:54:40,374:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:40,377:INFO:Calculating mean and std
2023-03-15 16:54:40,379:INFO:Creating metrics dataframe
2023-03-15 16:54:40,384:INFO:Uploading results into container
2023-03-15 16:54:40,384:INFO:Uploading model into container now
2023-03-15 16:54:40,384:INFO:_master_model_container: 5
2023-03-15 16:54:40,385:INFO:_display_container: 2
2023-03-15 16:54:40,385:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=42, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2023-03-15 16:54:40,385:INFO:create_model() successfully completed......................................
2023-03-15 16:54:40,480:INFO:SubProcess create_model() end ==================================
2023-03-15 16:54:40,480:INFO:Creating metrics dataframe
2023-03-15 16:54:40,503:INFO:Initializing Ridge Classifier
2023-03-15 16:54:40,503:INFO:Total runtime is 0.22466448545455936 minutes
2023-03-15 16:54:40,510:INFO:SubProcess create_model() called ==================================
2023-03-15 16:54:40,510:INFO:Initializing create_model()
2023-03-15 16:54:40,510:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C9F926F5E0>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C9F926F2E0>, model_only=True, return_train_score=False, kwargs={})
2023-03-15 16:54:40,510:INFO:Checking exceptions
2023-03-15 16:54:40,510:INFO:Importing libraries
2023-03-15 16:54:40,511:INFO:Copying training dataset
2023-03-15 16:54:40,518:INFO:Defining folds
2023-03-15 16:54:40,519:INFO:Declaring metric variables
2023-03-15 16:54:40,526:INFO:Importing untrained model
2023-03-15 16:54:40,535:INFO:Ridge Classifier Imported successfully
2023-03-15 16:54:40,553:INFO:Starting cross validation
2023-03-15 16:54:40,554:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-15 16:54:40,956:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:40,959:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:40,963:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:40,964:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:40,966:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:40,970:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:40,984:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:40,988:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:40,991:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:41,005:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:41,007:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:41,009:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:41,010:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:41,013:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:41,015:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:41,018:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:41,021:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:41,023:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:41,056:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:41,058:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:41,059:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:41,073:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:41,075:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:41,077:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:41,173:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:41,174:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:41,175:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:41,176:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:41,176:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:41,177:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:41,181:INFO:Calculating mean and std
2023-03-15 16:54:41,183:INFO:Creating metrics dataframe
2023-03-15 16:54:41,187:INFO:Uploading results into container
2023-03-15 16:54:41,188:INFO:Uploading model into container now
2023-03-15 16:54:41,188:INFO:_master_model_container: 6
2023-03-15 16:54:41,188:INFO:_display_container: 2
2023-03-15 16:54:41,189:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=42, solver='auto',
                tol=0.0001)
2023-03-15 16:54:41,189:INFO:create_model() successfully completed......................................
2023-03-15 16:54:41,306:INFO:SubProcess create_model() end ==================================
2023-03-15 16:54:41,307:INFO:Creating metrics dataframe
2023-03-15 16:54:41,338:INFO:Initializing Random Forest Classifier
2023-03-15 16:54:41,339:INFO:Total runtime is 0.23860034942626956 minutes
2023-03-15 16:54:41,349:INFO:SubProcess create_model() called ==================================
2023-03-15 16:54:41,351:INFO:Initializing create_model()
2023-03-15 16:54:41,351:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C9F926F5E0>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C9F926F2E0>, model_only=True, return_train_score=False, kwargs={})
2023-03-15 16:54:41,351:INFO:Checking exceptions
2023-03-15 16:54:41,352:INFO:Importing libraries
2023-03-15 16:54:41,352:INFO:Copying training dataset
2023-03-15 16:54:41,364:INFO:Defining folds
2023-03-15 16:54:41,364:INFO:Declaring metric variables
2023-03-15 16:54:41,372:INFO:Importing untrained model
2023-03-15 16:54:41,378:INFO:Random Forest Classifier Imported successfully
2023-03-15 16:54:41,394:INFO:Starting cross validation
2023-03-15 16:54:41,396:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-15 16:54:43,056:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:43,060:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:43,065:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:43,116:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:43,119:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:43,120:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:43,122:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:43,123:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:43,125:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:43,258:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:43,263:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:43,267:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:43,268:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:43,273:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:43,275:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:43,275:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:43,279:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:43,283:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:43,306:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:43,308:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:43,311:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:43,318:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:43,320:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:43,323:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:43,942:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:43,946:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:43,948:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:43,955:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:43,957:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:43,959:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:43,963:INFO:Calculating mean and std
2023-03-15 16:54:43,965:INFO:Creating metrics dataframe
2023-03-15 16:54:43,968:INFO:Uploading results into container
2023-03-15 16:54:43,969:INFO:Uploading model into container now
2023-03-15 16:54:43,969:INFO:_master_model_container: 7
2023-03-15 16:54:43,970:INFO:_display_container: 2
2023-03-15 16:54:43,970:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       n_estimators=100, n_jobs=-1, oob_score=False,
                       random_state=42, verbose=0, warm_start=False)
2023-03-15 16:54:43,970:INFO:create_model() successfully completed......................................
2023-03-15 16:54:44,067:INFO:SubProcess create_model() end ==================================
2023-03-15 16:54:44,068:INFO:Creating metrics dataframe
2023-03-15 16:54:44,089:INFO:Initializing Quadratic Discriminant Analysis
2023-03-15 16:54:44,089:INFO:Total runtime is 0.2844353000322978 minutes
2023-03-15 16:54:44,097:INFO:SubProcess create_model() called ==================================
2023-03-15 16:54:44,097:INFO:Initializing create_model()
2023-03-15 16:54:44,097:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C9F926F5E0>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C9F926F2E0>, model_only=True, return_train_score=False, kwargs={})
2023-03-15 16:54:44,097:INFO:Checking exceptions
2023-03-15 16:54:44,098:INFO:Importing libraries
2023-03-15 16:54:44,098:INFO:Copying training dataset
2023-03-15 16:54:44,105:INFO:Defining folds
2023-03-15 16:54:44,105:INFO:Declaring metric variables
2023-03-15 16:54:44,111:INFO:Importing untrained model
2023-03-15 16:54:44,119:INFO:Quadratic Discriminant Analysis Imported successfully
2023-03-15 16:54:44,133:INFO:Starting cross validation
2023-03-15 16:54:44,135:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-15 16:54:44,393:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2023-03-15 16:54:44,402:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2023-03-15 16:54:44,405:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2023-03-15 16:54:44,418:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2023-03-15 16:54:44,422:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2023-03-15 16:54:44,429:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2023-03-15 16:54:44,451:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2023-03-15 16:54:44,465:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2023-03-15 16:54:44,516:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\discriminant_analysis.py:951: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2023-03-15 16:54:44,516:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\discriminant_analysis.py:951: RuntimeWarning: invalid value encountered in multiply
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2023-03-15 16:54:44,517:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\discriminant_analysis.py:954: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2023-03-15 16:54:44,524:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\discriminant_analysis.py:951: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2023-03-15 16:54:44,525:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\discriminant_analysis.py:951: RuntimeWarning: invalid value encountered in multiply
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2023-03-15 16:54:44,525:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\discriminant_analysis.py:954: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2023-03-15 16:54:44,525:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\discriminant_analysis.py:951: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2023-03-15 16:54:44,525:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\discriminant_analysis.py:951: RuntimeWarning: invalid value encountered in multiply
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2023-03-15 16:54:44,526:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\discriminant_analysis.py:954: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2023-03-15 16:54:44,547:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\discriminant_analysis.py:951: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2023-03-15 16:54:44,547:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\discriminant_analysis.py:951: RuntimeWarning: invalid value encountered in multiply
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2023-03-15 16:54:44,548:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\discriminant_analysis.py:954: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2023-03-15 16:54:44,550:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\discriminant_analysis.py:951: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2023-03-15 16:54:44,551:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\discriminant_analysis.py:951: RuntimeWarning: invalid value encountered in multiply
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2023-03-15 16:54:44,551:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\discriminant_analysis.py:954: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2023-03-15 16:54:44,642:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\discriminant_analysis.py:951: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2023-03-15 16:54:44,643:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\discriminant_analysis.py:951: RuntimeWarning: invalid value encountered in multiply
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2023-03-15 16:54:44,644:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\discriminant_analysis.py:954: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2023-03-15 16:54:44,646:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\discriminant_analysis.py:951: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2023-03-15 16:54:44,646:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\discriminant_analysis.py:951: RuntimeWarning: invalid value encountered in multiply
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2023-03-15 16:54:44,646:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\discriminant_analysis.py:954: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2023-03-15 16:54:44,647:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:44,649:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:44,650:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\discriminant_analysis.py:951: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2023-03-15 16:54:44,650:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\discriminant_analysis.py:951: RuntimeWarning: invalid value encountered in multiply
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2023-03-15 16:54:44,651:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\discriminant_analysis.py:954: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2023-03-15 16:54:44,651:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:44,654:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:44,654:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-03-15 16:54:44,656:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\discriminant_analysis.py:951: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2023-03-15 16:54:44,656:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-03-15 16:54:44,656:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\discriminant_analysis.py:951: RuntimeWarning: invalid value encountered in multiply
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2023-03-15 16:54:44,656:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\discriminant_analysis.py:954: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2023-03-15 16:54:44,656:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:44,658:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:44,658:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:44,667:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:44,669:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-03-15 16:54:44,669:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\discriminant_analysis.py:951: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2023-03-15 16:54:44,670:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\discriminant_analysis.py:951: RuntimeWarning: invalid value encountered in multiply
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2023-03-15 16:54:44,670:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\discriminant_analysis.py:954: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2023-03-15 16:54:44,671:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:44,673:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:44,676:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:44,679:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-03-15 16:54:44,681:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:44,684:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\discriminant_analysis.py:951: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2023-03-15 16:54:44,684:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\discriminant_analysis.py:951: RuntimeWarning: invalid value encountered in multiply
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2023-03-15 16:54:44,685:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\discriminant_analysis.py:954: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2023-03-15 16:54:44,687:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:44,687:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\discriminant_analysis.py:951: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2023-03-15 16:54:44,687:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\discriminant_analysis.py:951: RuntimeWarning: invalid value encountered in multiply
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2023-03-15 16:54:44,688:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\discriminant_analysis.py:954: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2023-03-15 16:54:44,690:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:44,692:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-03-15 16:54:44,694:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:44,699:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\discriminant_analysis.py:951: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2023-03-15 16:54:44,699:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\discriminant_analysis.py:951: RuntimeWarning: invalid value encountered in multiply
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2023-03-15 16:54:44,699:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\discriminant_analysis.py:954: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2023-03-15 16:54:44,712:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\discriminant_analysis.py:951: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2023-03-15 16:54:44,712:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\discriminant_analysis.py:951: RuntimeWarning: invalid value encountered in multiply
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2023-03-15 16:54:44,712:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\discriminant_analysis.py:954: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2023-03-15 16:54:44,714:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:44,717:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:44,719:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-03-15 16:54:44,720:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:44,727:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\discriminant_analysis.py:951: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2023-03-15 16:54:44,727:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\discriminant_analysis.py:951: RuntimeWarning: invalid value encountered in multiply
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2023-03-15 16:54:44,728:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\discriminant_analysis.py:954: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2023-03-15 16:54:44,729:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:44,732:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:44,734:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-03-15 16:54:44,736:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:44,749:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\discriminant_analysis.py:951: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2023-03-15 16:54:44,749:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\discriminant_analysis.py:951: RuntimeWarning: invalid value encountered in multiply
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2023-03-15 16:54:44,750:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\discriminant_analysis.py:954: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2023-03-15 16:54:44,751:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:44,754:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:44,756:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-03-15 16:54:44,757:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:44,795:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2023-03-15 16:54:44,806:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2023-03-15 16:54:44,848:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\discriminant_analysis.py:951: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2023-03-15 16:54:44,848:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\discriminant_analysis.py:951: RuntimeWarning: invalid value encountered in multiply
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2023-03-15 16:54:44,848:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\discriminant_analysis.py:954: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2023-03-15 16:54:44,859:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\discriminant_analysis.py:951: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2023-03-15 16:54:44,860:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\discriminant_analysis.py:951: RuntimeWarning: invalid value encountered in multiply
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2023-03-15 16:54:44,860:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\discriminant_analysis.py:954: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2023-03-15 16:54:44,902:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\discriminant_analysis.py:951: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2023-03-15 16:54:44,903:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\discriminant_analysis.py:951: RuntimeWarning: invalid value encountered in multiply
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2023-03-15 16:54:44,903:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\discriminant_analysis.py:954: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2023-03-15 16:54:44,904:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:44,905:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:44,907:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-03-15 16:54:44,907:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:44,917:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\discriminant_analysis.py:951: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2023-03-15 16:54:44,917:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\discriminant_analysis.py:951: RuntimeWarning: invalid value encountered in multiply
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2023-03-15 16:54:44,917:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\discriminant_analysis.py:954: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2023-03-15 16:54:44,918:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:44,920:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:44,921:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-03-15 16:54:44,922:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:44,925:INFO:Calculating mean and std
2023-03-15 16:54:44,928:INFO:Creating metrics dataframe
2023-03-15 16:54:44,932:INFO:Uploading results into container
2023-03-15 16:54:44,932:INFO:Uploading model into container now
2023-03-15 16:54:44,932:INFO:_master_model_container: 8
2023-03-15 16:54:44,933:INFO:_display_container: 2
2023-03-15 16:54:44,933:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2023-03-15 16:54:44,933:INFO:create_model() successfully completed......................................
2023-03-15 16:54:45,028:INFO:SubProcess create_model() end ==================================
2023-03-15 16:54:45,029:INFO:Creating metrics dataframe
2023-03-15 16:54:45,057:INFO:Initializing Ada Boost Classifier
2023-03-15 16:54:45,057:INFO:Total runtime is 0.30056737661361693 minutes
2023-03-15 16:54:45,065:INFO:SubProcess create_model() called ==================================
2023-03-15 16:54:45,066:INFO:Initializing create_model()
2023-03-15 16:54:45,066:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C9F926F5E0>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C9F926F2E0>, model_only=True, return_train_score=False, kwargs={})
2023-03-15 16:54:45,066:INFO:Checking exceptions
2023-03-15 16:54:45,066:INFO:Importing libraries
2023-03-15 16:54:45,066:INFO:Copying training dataset
2023-03-15 16:54:45,076:INFO:Defining folds
2023-03-15 16:54:45,076:INFO:Declaring metric variables
2023-03-15 16:54:45,088:INFO:Importing untrained model
2023-03-15 16:54:45,097:INFO:Ada Boost Classifier Imported successfully
2023-03-15 16:54:45,108:INFO:Starting cross validation
2023-03-15 16:54:45,113:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-15 16:54:46,183:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:46,186:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:46,187:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:46,189:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:46,190:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:46,193:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:46,197:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:46,201:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:46,205:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:46,218:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:46,222:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:46,225:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:46,231:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:46,233:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:46,234:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:46,235:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:46,239:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:46,239:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:46,272:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:46,274:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:46,276:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:46,300:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:46,302:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:46,303:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:46,637:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:46,639:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:46,641:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:46,700:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:46,702:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:46,703:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:46,707:INFO:Calculating mean and std
2023-03-15 16:54:46,708:INFO:Creating metrics dataframe
2023-03-15 16:54:46,712:INFO:Uploading results into container
2023-03-15 16:54:46,713:INFO:Uploading model into container now
2023-03-15 16:54:46,713:INFO:_master_model_container: 9
2023-03-15 16:54:46,713:INFO:_display_container: 2
2023-03-15 16:54:46,714:INFO:AdaBoostClassifier(algorithm='SAMME.R', base_estimator='deprecated',
                   estimator=None, learning_rate=1.0, n_estimators=50,
                   random_state=42)
2023-03-15 16:54:46,714:INFO:create_model() successfully completed......................................
2023-03-15 16:54:46,810:INFO:SubProcess create_model() end ==================================
2023-03-15 16:54:46,811:INFO:Creating metrics dataframe
2023-03-15 16:54:46,835:INFO:Initializing Gradient Boosting Classifier
2023-03-15 16:54:46,837:INFO:Total runtime is 0.3302249987920125 minutes
2023-03-15 16:54:46,843:INFO:SubProcess create_model() called ==================================
2023-03-15 16:54:46,843:INFO:Initializing create_model()
2023-03-15 16:54:46,843:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C9F926F5E0>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C9F926F2E0>, model_only=True, return_train_score=False, kwargs={})
2023-03-15 16:54:46,843:INFO:Checking exceptions
2023-03-15 16:54:46,844:INFO:Importing libraries
2023-03-15 16:54:46,844:INFO:Copying training dataset
2023-03-15 16:54:46,852:INFO:Defining folds
2023-03-15 16:54:46,852:INFO:Declaring metric variables
2023-03-15 16:54:46,857:INFO:Importing untrained model
2023-03-15 16:54:46,866:INFO:Gradient Boosting Classifier Imported successfully
2023-03-15 16:54:46,881:INFO:Starting cross validation
2023-03-15 16:54:46,883:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-15 16:54:49,230:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:49,233:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:49,233:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:49,237:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:49,241:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:49,250:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:49,255:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:49,259:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:49,284:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:49,288:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:49,296:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:49,298:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:49,300:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:49,301:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:49,303:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:49,305:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:49,305:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:49,570:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:49,572:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:49,575:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:49,577:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:49,581:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:49,583:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:50,461:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:50,463:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:50,464:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:50,482:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:50,484:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:50,486:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:50,488:INFO:Calculating mean and std
2023-03-15 16:54:50,490:INFO:Creating metrics dataframe
2023-03-15 16:54:50,494:INFO:Uploading results into container
2023-03-15 16:54:50,495:INFO:Uploading model into container now
2023-03-15 16:54:50,495:INFO:_master_model_container: 10
2023-03-15 16:54:50,496:INFO:_display_container: 2
2023-03-15 16:54:50,496:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=42, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2023-03-15 16:54:50,496:INFO:create_model() successfully completed......................................
2023-03-15 16:54:50,596:INFO:SubProcess create_model() end ==================================
2023-03-15 16:54:50,596:INFO:Creating metrics dataframe
2023-03-15 16:54:50,620:INFO:Initializing Linear Discriminant Analysis
2023-03-15 16:54:50,620:INFO:Total runtime is 0.3932822187741597 minutes
2023-03-15 16:54:50,625:INFO:SubProcess create_model() called ==================================
2023-03-15 16:54:50,626:INFO:Initializing create_model()
2023-03-15 16:54:50,627:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C9F926F5E0>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C9F926F2E0>, model_only=True, return_train_score=False, kwargs={})
2023-03-15 16:54:50,627:INFO:Checking exceptions
2023-03-15 16:54:50,627:INFO:Importing libraries
2023-03-15 16:54:50,627:INFO:Copying training dataset
2023-03-15 16:54:50,635:INFO:Defining folds
2023-03-15 16:54:50,635:INFO:Declaring metric variables
2023-03-15 16:54:50,643:INFO:Importing untrained model
2023-03-15 16:54:50,652:INFO:Linear Discriminant Analysis Imported successfully
2023-03-15 16:54:50,666:INFO:Starting cross validation
2023-03-15 16:54:50,669:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-15 16:54:51,167:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:51,171:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:51,174:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:51,192:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:51,196:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:51,200:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:51,218:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:51,219:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:51,222:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:51,223:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:51,226:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:51,228:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:51,235:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:51,238:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:51,242:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:51,309:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:51,313:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:51,316:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:51,327:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:51,330:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:51,330:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:51,333:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:51,335:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:51,490:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:51,492:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:51,492:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:51,494:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:51,495:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:51,497:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:51,500:INFO:Calculating mean and std
2023-03-15 16:54:51,501:INFO:Creating metrics dataframe
2023-03-15 16:54:51,506:INFO:Uploading results into container
2023-03-15 16:54:51,506:INFO:Uploading model into container now
2023-03-15 16:54:51,507:INFO:_master_model_container: 11
2023-03-15 16:54:51,507:INFO:_display_container: 2
2023-03-15 16:54:51,507:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2023-03-15 16:54:51,507:INFO:create_model() successfully completed......................................
2023-03-15 16:54:51,612:INFO:SubProcess create_model() end ==================================
2023-03-15 16:54:51,613:INFO:Creating metrics dataframe
2023-03-15 16:54:51,638:INFO:Initializing Extra Trees Classifier
2023-03-15 16:54:51,638:INFO:Total runtime is 0.41024103562037145 minutes
2023-03-15 16:54:51,645:INFO:SubProcess create_model() called ==================================
2023-03-15 16:54:51,645:INFO:Initializing create_model()
2023-03-15 16:54:51,645:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C9F926F5E0>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C9F926F2E0>, model_only=True, return_train_score=False, kwargs={})
2023-03-15 16:54:51,646:INFO:Checking exceptions
2023-03-15 16:54:51,646:INFO:Importing libraries
2023-03-15 16:54:51,646:INFO:Copying training dataset
2023-03-15 16:54:51,654:INFO:Defining folds
2023-03-15 16:54:51,654:INFO:Declaring metric variables
2023-03-15 16:54:51,664:INFO:Importing untrained model
2023-03-15 16:54:51,673:INFO:Extra Trees Classifier Imported successfully
2023-03-15 16:54:51,690:INFO:Starting cross validation
2023-03-15 16:54:51,693:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-15 16:54:53,389:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:53,392:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:53,396:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:53,408:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:53,412:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:53,416:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:53,455:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:53,459:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:53,463:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:53,481:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:53,485:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:53,488:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:53,560:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:53,564:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:53,567:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:53,620:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:53,622:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:53,625:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:53,646:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:53,648:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:53,650:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:53,673:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:53,676:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:53,679:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:54,195:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:54,196:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:54,198:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:54,204:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:54,206:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:54,208:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:54,211:INFO:Calculating mean and std
2023-03-15 16:54:54,213:INFO:Creating metrics dataframe
2023-03-15 16:54:54,216:INFO:Uploading results into container
2023-03-15 16:54:54,217:INFO:Uploading model into container now
2023-03-15 16:54:54,217:INFO:_master_model_container: 12
2023-03-15 16:54:54,217:INFO:_display_container: 2
2023-03-15 16:54:54,217:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     n_estimators=100, n_jobs=-1, oob_score=False,
                     random_state=42, verbose=0, warm_start=False)
2023-03-15 16:54:54,218:INFO:create_model() successfully completed......................................
2023-03-15 16:54:54,317:INFO:SubProcess create_model() end ==================================
2023-03-15 16:54:54,317:INFO:Creating metrics dataframe
2023-03-15 16:54:54,344:INFO:Initializing Light Gradient Boosting Machine
2023-03-15 16:54:54,345:INFO:Total runtime is 0.4553608973821004 minutes
2023-03-15 16:54:54,351:INFO:SubProcess create_model() called ==================================
2023-03-15 16:54:54,351:INFO:Initializing create_model()
2023-03-15 16:54:54,351:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C9F926F5E0>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C9F926F2E0>, model_only=True, return_train_score=False, kwargs={})
2023-03-15 16:54:54,351:INFO:Checking exceptions
2023-03-15 16:54:54,351:INFO:Importing libraries
2023-03-15 16:54:54,351:INFO:Copying training dataset
2023-03-15 16:54:54,359:INFO:Defining folds
2023-03-15 16:54:54,359:INFO:Declaring metric variables
2023-03-15 16:54:54,367:INFO:Importing untrained model
2023-03-15 16:54:54,373:INFO:Light Gradient Boosting Machine Imported successfully
2023-03-15 16:54:54,391:INFO:Starting cross validation
2023-03-15 16:54:54,394:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-15 16:54:55,426:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:55,431:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:55,431:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:55,435:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:55,436:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:55,440:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:55,480:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:55,484:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:55,486:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:55,496:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:55,500:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:55,503:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:55,539:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:55,540:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:55,541:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:55,543:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:55,543:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:55,544:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:55,546:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:55,548:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:55,550:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:55,556:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:55,557:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:55,559:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:55,804:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:55,806:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:55,808:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:55,809:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:55,810:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:55,813:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:55,816:INFO:Calculating mean and std
2023-03-15 16:54:55,818:INFO:Creating metrics dataframe
2023-03-15 16:54:55,821:INFO:Uploading results into container
2023-03-15 16:54:55,822:INFO:Uploading model into container now
2023-03-15 16:54:55,822:INFO:_master_model_container: 13
2023-03-15 16:54:55,822:INFO:_display_container: 2
2023-03-15 16:54:55,823:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=42, reg_alpha=0.0, reg_lambda=0.0, silent='warn',
               subsample=1.0, subsample_for_bin=200000, subsample_freq=0)
2023-03-15 16:54:55,823:INFO:create_model() successfully completed......................................
2023-03-15 16:54:55,923:INFO:SubProcess create_model() end ==================================
2023-03-15 16:54:55,923:INFO:Creating metrics dataframe
2023-03-15 16:54:55,951:INFO:Initializing Dummy Classifier
2023-03-15 16:54:55,951:INFO:Total runtime is 0.4821389635403951 minutes
2023-03-15 16:54:55,958:INFO:SubProcess create_model() called ==================================
2023-03-15 16:54:55,959:INFO:Initializing create_model()
2023-03-15 16:54:55,959:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C9F926F5E0>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C9F926F2E0>, model_only=True, return_train_score=False, kwargs={})
2023-03-15 16:54:55,959:INFO:Checking exceptions
2023-03-15 16:54:55,959:INFO:Importing libraries
2023-03-15 16:54:55,959:INFO:Copying training dataset
2023-03-15 16:54:55,967:INFO:Defining folds
2023-03-15 16:54:55,967:INFO:Declaring metric variables
2023-03-15 16:54:55,973:INFO:Importing untrained model
2023-03-15 16:54:55,980:INFO:Dummy Classifier Imported successfully
2023-03-15 16:54:55,994:INFO:Starting cross validation
2023-03-15 16:54:55,998:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-15 16:54:56,560:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:56,560:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:56,564:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:56,564:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:56,564:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:56,567:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-03-15 16:54:56,567:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-03-15 16:54:56,569:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:56,569:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:56,574:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:56,579:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:56,583:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-03-15 16:54:56,585:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:56,585:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:56,589:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:56,592:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-03-15 16:54:56,594:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:56,594:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:56,594:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:56,597:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:56,598:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-03-15 16:54:56,598:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:56,599:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:56,600:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-03-15 16:54:56,602:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:56,617:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:56,619:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:56,620:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-03-15 16:54:56,621:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:56,863:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:56,865:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:56,865:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-03-15 16:54:56,866:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:56,868:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:56,870:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:56,872:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-03-15 16:54:56,873:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:54:56,877:INFO:Calculating mean and std
2023-03-15 16:54:56,879:INFO:Creating metrics dataframe
2023-03-15 16:54:56,883:INFO:Uploading results into container
2023-03-15 16:54:56,884:INFO:Uploading model into container now
2023-03-15 16:54:56,884:INFO:_master_model_container: 14
2023-03-15 16:54:56,884:INFO:_display_container: 2
2023-03-15 16:54:56,884:INFO:DummyClassifier(constant=None, random_state=42, strategy='prior')
2023-03-15 16:54:56,884:INFO:create_model() successfully completed......................................
2023-03-15 16:54:56,981:INFO:SubProcess create_model() end ==================================
2023-03-15 16:54:56,982:INFO:Creating metrics dataframe
2023-03-15 16:54:57,022:INFO:Initializing create_model()
2023-03-15 16:54:57,023:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C9F926F5E0>, estimator=RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=42, solver='auto',
                tol=0.0001), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-03-15 16:54:57,023:INFO:Checking exceptions
2023-03-15 16:54:57,026:INFO:Importing libraries
2023-03-15 16:54:57,026:INFO:Copying training dataset
2023-03-15 16:54:57,034:INFO:Defining folds
2023-03-15 16:54:57,036:INFO:Declaring metric variables
2023-03-15 16:54:57,036:INFO:Importing untrained model
2023-03-15 16:54:57,036:INFO:Declaring custom model
2023-03-15 16:54:57,037:INFO:Ridge Classifier Imported successfully
2023-03-15 16:54:57,039:INFO:Cross validation set to False
2023-03-15 16:54:57,040:INFO:Fitting Model
2023-03-15 16:54:57,142:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=42, solver='auto',
                tol=0.0001)
2023-03-15 16:54:57,142:INFO:create_model() successfully completed......................................
2023-03-15 16:54:57,294:INFO:_master_model_container: 14
2023-03-15 16:54:57,294:INFO:_display_container: 2
2023-03-15 16:54:57,295:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=42, solver='auto',
                tol=0.0001)
2023-03-15 16:54:57,295:INFO:compare_models() successfully completed......................................
2023-03-15 16:57:23,945:INFO:Initializing create_model()
2023-03-15 16:57:23,945:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C9F926F5E0>, estimator=lightgbm, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-03-15 16:57:23,945:INFO:Checking exceptions
2023-03-15 16:57:23,970:INFO:Importing libraries
2023-03-15 16:57:23,970:INFO:Copying training dataset
2023-03-15 16:57:23,978:INFO:Defining folds
2023-03-15 16:57:23,978:INFO:Declaring metric variables
2023-03-15 16:57:23,988:INFO:Importing untrained model
2023-03-15 16:57:23,994:INFO:Light Gradient Boosting Machine Imported successfully
2023-03-15 16:57:24,007:INFO:Starting cross validation
2023-03-15 16:57:24,009:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-15 16:57:24,550:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:57:24,554:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:57:24,560:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:57:24,570:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:57:24,575:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:57:24,578:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:57:24,590:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:57:24,593:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:57:24,599:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:57:24,620:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:57:24,624:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:57:24,627:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:57:24,639:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:57:24,642:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:57:24,644:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:57:24,684:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:57:24,685:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:57:24,687:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:57:24,752:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:57:24,753:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:57:24,757:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:57:24,773:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:57:24,775:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:57:24,777:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:57:25,010:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:57:25,012:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:57:25,014:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:57:25,015:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:57:25,016:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:57:25,018:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:57:25,023:INFO:Calculating mean and std
2023-03-15 16:57:25,025:INFO:Creating metrics dataframe
2023-03-15 16:57:25,032:INFO:Finalizing model
2023-03-15 16:57:25,404:INFO:Uploading results into container
2023-03-15 16:57:25,405:INFO:Uploading model into container now
2023-03-15 16:57:25,432:INFO:_master_model_container: 15
2023-03-15 16:57:25,433:INFO:_display_container: 3
2023-03-15 16:57:25,434:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=42, reg_alpha=0.0, reg_lambda=0.0, silent='warn',
               subsample=1.0, subsample_for_bin=200000, subsample_freq=0)
2023-03-15 16:57:25,434:INFO:create_model() successfully completed......................................
2023-03-15 16:57:25,563:INFO:Initializing create_model()
2023-03-15 16:57:25,563:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C9F926F5E0>, estimator=ridge, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-03-15 16:57:25,563:INFO:Checking exceptions
2023-03-15 16:57:25,597:INFO:Importing libraries
2023-03-15 16:57:25,597:INFO:Copying training dataset
2023-03-15 16:57:25,609:INFO:Defining folds
2023-03-15 16:57:25,610:INFO:Declaring metric variables
2023-03-15 16:57:25,618:INFO:Importing untrained model
2023-03-15 16:57:25,627:INFO:Ridge Classifier Imported successfully
2023-03-15 16:57:25,643:INFO:Starting cross validation
2023-03-15 16:57:25,646:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-15 16:57:25,971:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:57:25,976:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:57:25,979:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:57:26,036:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:57:26,040:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:57:26,044:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:57:26,092:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:57:26,095:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:57:26,099:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:57:26,125:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:57:26,130:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:57:26,134:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:57:26,153:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:57:26,160:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:57:26,164:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:57:26,245:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:57:26,248:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:57:26,251:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:57:26,252:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:57:26,254:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:57:26,258:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:57:26,274:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:57:26,276:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:57:26,277:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:57:26,322:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:57:26,327:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:57:26,329:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:57:26,385:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:57:26,388:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:57:26,392:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:57:26,396:INFO:Calculating mean and std
2023-03-15 16:57:26,397:INFO:Creating metrics dataframe
2023-03-15 16:57:26,407:INFO:Finalizing model
2023-03-15 16:57:26,563:INFO:Uploading results into container
2023-03-15 16:57:26,564:INFO:Uploading model into container now
2023-03-15 16:57:26,582:INFO:_master_model_container: 16
2023-03-15 16:57:26,582:INFO:_display_container: 4
2023-03-15 16:57:26,583:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=42, solver='auto',
                tol=0.0001)
2023-03-15 16:57:26,583:INFO:create_model() successfully completed......................................
2023-03-15 16:58:15,683:INFO:Initializing create_model()
2023-03-15 16:58:15,684:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C9F926F5E0>, estimator=lightgbm, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-03-15 16:58:15,684:INFO:Checking exceptions
2023-03-15 16:58:15,708:INFO:Importing libraries
2023-03-15 16:58:15,708:INFO:Copying training dataset
2023-03-15 16:58:15,716:INFO:Defining folds
2023-03-15 16:58:15,717:INFO:Declaring metric variables
2023-03-15 16:58:15,723:INFO:Importing untrained model
2023-03-15 16:58:15,731:INFO:Light Gradient Boosting Machine Imported successfully
2023-03-15 16:58:15,743:INFO:Starting cross validation
2023-03-15 16:58:15,746:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-15 16:58:16,209:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:58:16,213:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:58:16,217:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:58:16,266:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:58:16,286:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:58:16,289:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:58:16,330:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:58:16,333:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:58:16,337:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:58:16,354:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:58:16,359:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:58:16,367:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:58:16,423:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:58:16,430:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:58:16,436:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:58:16,479:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:58:16,484:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:58:16,487:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:58:16,729:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:58:16,735:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:58:16,740:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:58:16,903:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:58:16,907:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:58:16,913:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:58:17,001:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:58:17,003:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:58:17,005:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:58:17,154:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:58:17,157:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:58:17,162:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:58:17,169:INFO:Calculating mean and std
2023-03-15 16:58:17,171:INFO:Creating metrics dataframe
2023-03-15 16:58:17,185:INFO:Finalizing model
2023-03-15 16:58:17,430:INFO:Uploading results into container
2023-03-15 16:58:17,432:INFO:Uploading model into container now
2023-03-15 16:58:17,478:INFO:_master_model_container: 17
2023-03-15 16:58:17,479:INFO:_display_container: 5
2023-03-15 16:58:17,480:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=42, reg_alpha=0.0, reg_lambda=0.0, silent='warn',
               subsample=1.0, subsample_for_bin=200000, subsample_freq=0)
2023-03-15 16:58:17,481:INFO:create_model() successfully completed......................................
2023-03-15 16:58:20,885:INFO:Initializing create_model()
2023-03-15 16:58:20,886:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C9F926F5E0>, estimator=ridge, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-03-15 16:58:20,886:INFO:Checking exceptions
2023-03-15 16:58:20,915:INFO:Importing libraries
2023-03-15 16:58:20,915:INFO:Copying training dataset
2023-03-15 16:58:20,927:INFO:Defining folds
2023-03-15 16:58:20,927:INFO:Declaring metric variables
2023-03-15 16:58:20,933:INFO:Importing untrained model
2023-03-15 16:58:20,939:INFO:Ridge Classifier Imported successfully
2023-03-15 16:58:20,957:INFO:Starting cross validation
2023-03-15 16:58:20,961:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-03-15 16:58:21,425:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:58:21,425:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:58:21,429:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:58:21,430:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:58:21,434:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:58:21,434:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:58:21,486:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:58:21,489:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:58:21,490:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:58:21,495:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:58:21,495:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:58:21,498:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:58:21,501:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:58:21,504:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:58:21,510:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:58:21,518:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:58:21,522:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:58:21,525:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:58:21,539:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:58:21,543:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:58:21,547:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:58:21,579:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:58:21,581:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:58:21,584:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:58:21,705:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:58:21,707:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:58:21,711:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:58:21,719:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:58:21,721:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:58:21,723:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 16:58:21,729:INFO:Calculating mean and std
2023-03-15 16:58:21,729:INFO:Creating metrics dataframe
2023-03-15 16:58:21,737:INFO:Finalizing model
2023-03-15 16:58:21,909:INFO:Uploading results into container
2023-03-15 16:58:21,911:INFO:Uploading model into container now
2023-03-15 16:58:21,929:INFO:_master_model_container: 18
2023-03-15 16:58:21,929:INFO:_display_container: 6
2023-03-15 16:58:21,929:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=42, solver='auto',
                tol=0.0001)
2023-03-15 16:58:21,929:INFO:create_model() successfully completed......................................
2023-03-15 17:01:14,970:INFO:Initializing evaluate_model()
2023-03-15 17:01:14,970:INFO:evaluate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C9F926F5E0>, estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=42, reg_alpha=0.0, reg_lambda=0.0, silent='warn',
               subsample=1.0, subsample_for_bin=200000, subsample_freq=0), fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None, use_train_data=False)
2023-03-15 17:01:14,992:INFO:Initializing plot_model()
2023-03-15 17:01:14,992:INFO:plot_model(plot=pipeline, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), use_train_data=False, verbose=False, display=None, display_format=None, estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=42, reg_alpha=0.0, reg_lambda=0.0, silent='warn',
               subsample=1.0, subsample_for_bin=200000, subsample_freq=0), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C9F926F5E0>, system=True)
2023-03-15 17:01:14,992:INFO:Checking exceptions
2023-03-15 17:01:14,994:INFO:Preloading libraries
2023-03-15 17:01:15,014:INFO:Copying training dataset
2023-03-15 17:01:15,015:INFO:Plot type: pipeline
2023-03-15 17:01:15,298:INFO:Visual Rendered Successfully
2023-03-15 17:01:15,406:INFO:plot_model() successfully completed......................................
2023-03-15 17:01:23,178:INFO:Initializing plot_model()
2023-03-15 17:01:23,178:INFO:plot_model(plot=auc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), use_train_data=False, verbose=False, display=None, display_format=None, estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=42, reg_alpha=0.0, reg_lambda=0.0, silent='warn',
               subsample=1.0, subsample_for_bin=200000, subsample_freq=0), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C9F926F5E0>, system=True)
2023-03-15 17:01:23,178:INFO:Checking exceptions
2023-03-15 17:01:23,182:INFO:Preloading libraries
2023-03-15 17:01:23,200:INFO:Copying training dataset
2023-03-15 17:01:23,200:INFO:Plot type: auc
2023-03-15 17:01:23,433:INFO:Fitting Model
2023-03-15 17:01:23,433:INFO:Scoring test/hold-out set
2023-03-15 17:01:23,782:INFO:Visual Rendered Successfully
2023-03-15 17:01:23,875:INFO:plot_model() successfully completed......................................
2023-03-15 17:01:28,633:INFO:Initializing plot_model()
2023-03-15 17:01:28,633:INFO:plot_model(plot=feature, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), use_train_data=False, verbose=False, display=None, display_format=None, estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=42, reg_alpha=0.0, reg_lambda=0.0, silent='warn',
               subsample=1.0, subsample_for_bin=200000, subsample_freq=0), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C9F926F5E0>, system=True)
2023-03-15 17:01:28,634:INFO:Checking exceptions
2023-03-15 17:01:28,639:INFO:Preloading libraries
2023-03-15 17:01:28,665:INFO:Copying training dataset
2023-03-15 17:01:28,665:INFO:Plot type: feature
2023-03-15 17:01:28,666:WARNING:No coef_ found. Trying feature_importances_
2023-03-15 17:01:28,936:INFO:Visual Rendered Successfully
2023-03-15 17:01:29,030:INFO:plot_model() successfully completed......................................
2023-03-15 17:01:30,463:INFO:Initializing plot_model()
2023-03-15 17:01:30,464:INFO:plot_model(plot=pr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), use_train_data=False, verbose=False, display=None, display_format=None, estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=42, reg_alpha=0.0, reg_lambda=0.0, silent='warn',
               subsample=1.0, subsample_for_bin=200000, subsample_freq=0), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C9F926F5E0>, system=True)
2023-03-15 17:01:30,464:INFO:Checking exceptions
2023-03-15 17:01:30,469:INFO:Preloading libraries
2023-03-15 17:01:30,494:INFO:Copying training dataset
2023-03-15 17:01:30,495:INFO:Plot type: pr
2023-03-15 17:01:30,724:INFO:Fitting Model
2023-03-15 17:01:30,846:INFO:Scoring test/hold-out set
2023-03-15 17:01:31,105:INFO:Visual Rendered Successfully
2023-03-15 17:01:31,204:INFO:plot_model() successfully completed......................................
2023-03-15 17:01:32,165:INFO:Initializing plot_model()
2023-03-15 17:01:32,165:INFO:plot_model(plot=feature, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), use_train_data=False, verbose=False, display=None, display_format=None, estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=42, reg_alpha=0.0, reg_lambda=0.0, silent='warn',
               subsample=1.0, subsample_for_bin=200000, subsample_freq=0), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C9F926F5E0>, system=True)
2023-03-15 17:01:32,166:INFO:Checking exceptions
2023-03-15 17:01:32,172:INFO:Preloading libraries
2023-03-15 17:01:32,190:INFO:Copying training dataset
2023-03-15 17:01:32,191:INFO:Plot type: feature
2023-03-15 17:01:32,192:WARNING:No coef_ found. Trying feature_importances_
2023-03-15 17:01:32,458:INFO:Visual Rendered Successfully
2023-03-15 17:01:32,559:INFO:plot_model() successfully completed......................................
2023-03-15 17:01:32,931:INFO:Initializing plot_model()
2023-03-15 17:01:32,932:INFO:plot_model(plot=feature_all, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), use_train_data=False, verbose=False, display=None, display_format=None, estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=42, reg_alpha=0.0, reg_lambda=0.0, silent='warn',
               subsample=1.0, subsample_for_bin=200000, subsample_freq=0), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C9F926F5E0>, system=True)
2023-03-15 17:01:32,932:INFO:Checking exceptions
2023-03-15 17:01:32,937:INFO:Preloading libraries
2023-03-15 17:01:32,954:INFO:Copying training dataset
2023-03-15 17:01:32,954:INFO:Plot type: feature_all
2023-03-15 17:01:33,079:WARNING:No coef_ found. Trying feature_importances_
2023-03-15 17:01:33,255:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\matplotlib\_tight_bbox.py:64: RuntimeWarning: divide by zero encountered in double_scalars
  fig.patch.set_bounds(x0 / w1, y0 / h1,
2023-03-15 17:01:33,255:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\matplotlib\_tight_bbox.py:65: RuntimeWarning: divide by zero encountered in double_scalars
  fig.bbox.width / w1, fig.bbox.height / h1)
2023-03-15 17:01:33,257:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\matplotlib\patches.py:739: RuntimeWarning: invalid value encountered in double_scalars
  y1 = self.convert_yunits(self._y0 + self._height)
2023-03-15 17:01:33,260:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\matplotlib\transforms.py:2042: RuntimeWarning: invalid value encountered in double_scalars
  self._mtx[1, 2] += ty
2023-03-15 17:01:33,310:INFO:Visual Rendered Successfully
2023-03-15 17:01:33,407:INFO:plot_model() successfully completed......................................
2023-03-15 17:01:35,158:INFO:Initializing plot_model()
2023-03-15 17:01:35,158:INFO:plot_model(plot=feature, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), use_train_data=False, verbose=False, display=None, display_format=None, estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=42, reg_alpha=0.0, reg_lambda=0.0, silent='warn',
               subsample=1.0, subsample_for_bin=200000, subsample_freq=0), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C9F926F5E0>, system=True)
2023-03-15 17:01:35,159:INFO:Checking exceptions
2023-03-15 17:01:35,163:INFO:Preloading libraries
2023-03-15 17:01:35,183:INFO:Copying training dataset
2023-03-15 17:01:35,183:INFO:Plot type: feature
2023-03-15 17:01:35,184:WARNING:No coef_ found. Trying feature_importances_
2023-03-15 17:01:35,441:INFO:Visual Rendered Successfully
2023-03-15 17:01:35,534:INFO:plot_model() successfully completed......................................
2023-03-15 17:01:36,454:INFO:Initializing plot_model()
2023-03-15 17:01:36,455:INFO:plot_model(plot=error, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), use_train_data=False, verbose=False, display=None, display_format=None, estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=42, reg_alpha=0.0, reg_lambda=0.0, silent='warn',
               subsample=1.0, subsample_for_bin=200000, subsample_freq=0), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C9F926F5E0>, system=True)
2023-03-15 17:01:36,456:INFO:Checking exceptions
2023-03-15 17:01:36,461:INFO:Preloading libraries
2023-03-15 17:01:36,492:INFO:Copying training dataset
2023-03-15 17:01:36,494:INFO:Plot type: error
2023-03-15 17:01:36,757:INFO:Fitting Model
2023-03-15 17:01:36,758:INFO:Scoring test/hold-out set
2023-03-15 17:01:37,096:INFO:Visual Rendered Successfully
2023-03-15 17:01:37,191:INFO:plot_model() successfully completed......................................
2023-03-15 17:02:24,404:INFO:Initializing plot_model()
2023-03-15 17:02:24,405:INFO:plot_model(plot=auc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), use_train_data=False, verbose=False, display=None, display_format=None, estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=42, reg_alpha=0.0, reg_lambda=0.0, silent='warn',
               subsample=1.0, subsample_for_bin=200000, subsample_freq=0), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C9F926F5E0>, system=True)
2023-03-15 17:02:24,405:INFO:Checking exceptions
2023-03-15 17:02:24,411:INFO:Preloading libraries
2023-03-15 17:02:24,442:INFO:Copying training dataset
2023-03-15 17:02:24,442:INFO:Plot type: auc
2023-03-15 17:02:24,926:INFO:Fitting Model
2023-03-15 17:02:24,927:INFO:Scoring test/hold-out set
2023-03-15 17:02:25,502:INFO:Visual Rendered Successfully
2023-03-15 17:02:25,635:INFO:plot_model() successfully completed......................................
2023-03-15 17:02:28,400:INFO:Initializing plot_model()
2023-03-15 17:02:28,401:INFO:plot_model(plot=class_report, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), use_train_data=False, verbose=False, display=None, display_format=None, estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=42, reg_alpha=0.0, reg_lambda=0.0, silent='warn',
               subsample=1.0, subsample_for_bin=200000, subsample_freq=0), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C9F926F5E0>, system=True)
2023-03-15 17:02:28,401:INFO:Checking exceptions
2023-03-15 17:02:28,406:INFO:Preloading libraries
2023-03-15 17:02:28,422:INFO:Copying training dataset
2023-03-15 17:02:28,422:INFO:Plot type: class_report
2023-03-15 17:02:28,580:INFO:Fitting Model
2023-03-15 17:02:28,580:INFO:Scoring test/hold-out set
2023-03-15 17:02:28,880:INFO:Visual Rendered Successfully
2023-03-15 17:02:28,979:INFO:plot_model() successfully completed......................................
2023-03-15 17:02:33,333:INFO:Initializing plot_model()
2023-03-15 17:02:33,334:INFO:plot_model(plot=error, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), use_train_data=False, verbose=False, display=None, display_format=None, estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=42, reg_alpha=0.0, reg_lambda=0.0, silent='warn',
               subsample=1.0, subsample_for_bin=200000, subsample_freq=0), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C9F926F5E0>, system=True)
2023-03-15 17:02:33,335:INFO:Checking exceptions
2023-03-15 17:02:33,339:INFO:Preloading libraries
2023-03-15 17:02:33,361:INFO:Copying training dataset
2023-03-15 17:02:33,361:INFO:Plot type: error
2023-03-15 17:02:33,532:INFO:Fitting Model
2023-03-15 17:02:33,532:INFO:Scoring test/hold-out set
2023-03-15 17:02:33,834:INFO:Visual Rendered Successfully
2023-03-15 17:02:33,932:INFO:plot_model() successfully completed......................................
2023-03-15 17:02:47,715:INFO:Initializing evaluate_model()
2023-03-15 17:02:47,715:INFO:evaluate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C9F926F5E0>, estimator=RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=42, solver='auto',
                tol=0.0001), fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None, use_train_data=False)
2023-03-15 17:02:47,734:INFO:Initializing plot_model()
2023-03-15 17:02:47,734:INFO:plot_model(plot=pipeline, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), use_train_data=False, verbose=False, display=None, display_format=None, estimator=RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=42, solver='auto',
                tol=0.0001), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C9F926F5E0>, system=True)
2023-03-15 17:02:47,734:INFO:Checking exceptions
2023-03-15 17:02:47,738:INFO:Preloading libraries
2023-03-15 17:02:47,738:INFO:Copying training dataset
2023-03-15 17:02:47,738:INFO:Plot type: pipeline
2023-03-15 17:02:47,973:INFO:Visual Rendered Successfully
2023-03-15 17:02:48,077:INFO:plot_model() successfully completed......................................
2023-03-15 17:08:23,242:INFO:Initializing plot_model()
2023-03-15 17:08:23,242:INFO:plot_model(plot=auc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), use_train_data=False, verbose=False, display=None, display_format=None, estimator=RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=42, solver='auto',
                tol=0.0001), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C9F926F5E0>, system=True)
2023-03-15 17:08:23,242:INFO:Checking exceptions
2023-03-15 17:08:26,736:INFO:Initializing plot_model()
2023-03-15 17:08:26,736:INFO:plot_model(plot=error, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), use_train_data=False, verbose=False, display=None, display_format=None, estimator=RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=42, solver='auto',
                tol=0.0001), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C9F926F5E0>, system=True)
2023-03-15 17:08:26,736:INFO:Checking exceptions
2023-03-15 17:08:26,740:INFO:Preloading libraries
2023-03-15 17:08:26,740:INFO:Copying training dataset
2023-03-15 17:08:26,740:INFO:Plot type: error
2023-03-15 17:08:26,832:INFO:Fitting Model
2023-03-15 17:08:26,833:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\base.py:420: UserWarning: X does not have valid feature names, but RidgeClassifier was fitted with feature names
  warnings.warn(
2023-03-15 17:08:26,833:INFO:Scoring test/hold-out set
2023-03-15 17:08:27,065:INFO:Visual Rendered Successfully
2023-03-15 17:08:27,151:INFO:plot_model() successfully completed......................................
2023-03-15 17:10:06,229:INFO:Initializing plot_model()
2023-03-15 17:10:06,230:INFO:plot_model(plot=vc, fold=None, use_train_data=False, verbose=True, display=None, display_format=None, estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=42, reg_alpha=0.0, reg_lambda=0.0, silent='warn',
               subsample=1.0, subsample_for_bin=200000, subsample_freq=0), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C9F926F5E0>, system=True)
2023-03-15 17:10:06,230:INFO:Checking exceptions
2023-03-15 17:10:06,238:INFO:Preloading libraries
2023-03-15 17:10:06,251:INFO:Copying training dataset
2023-03-15 17:10:06,251:INFO:Plot type: vc
2023-03-15 17:10:06,252:INFO:Determining param_name
2023-03-15 17:10:06,252:INFO:param_name: max_depth
2023-03-15 17:10:06,418:INFO:Fitting Model
2023-03-15 17:10:11,556:INFO:Visual Rendered Successfully
2023-03-15 17:10:11,645:INFO:plot_model() successfully completed......................................
2023-03-15 17:40:17,579:INFO:Initializing predict_model()
2023-03-15 17:40:17,581:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C9F926F5E0>, estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=42, reg_alpha=0.0, reg_lambda=0.0, silent='warn',
               subsample=1.0, subsample_for_bin=200000, subsample_freq=0), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, replace_labels_in_column=<function _SupervisedExperiment.predict_model.<locals>.replace_labels_in_column at 0x000002C9F93A7760>)
2023-03-15 17:40:17,581:INFO:Checking exceptions
2023-03-15 17:40:17,581:INFO:Preloading libraries
2023-03-15 17:40:17,735:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(
2023-03-15 17:40:17,737:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(
2023-03-15 17:40:17,739:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(
2023-03-15 17:40:17,741:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(
2023-03-15 17:40:17,743:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(
2023-03-15 17:40:17,746:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(
2023-03-15 17:47:10,350:INFO:Initializing tune_model()
2023-03-15 17:47:10,351:INFO:tune_model(estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=42, reg_alpha=0.0, reg_lambda=0.0, silent='warn',
               subsample=1.0, subsample_for_bin=200000, subsample_freq=0), fold=15, round=4, n_iter=10, custom_grid=None, optimize=Accuracy, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C9F926F5E0>)
2023-03-15 17:47:10,351:INFO:Checking exceptions
2023-03-15 17:47:10,381:INFO:Copying training dataset
2023-03-15 17:47:10,384:INFO:Checking base model
2023-03-15 17:47:10,384:INFO:Base model : Light Gradient Boosting Machine
2023-03-15 17:47:10,389:INFO:Declaring metric variables
2023-03-15 17:47:10,397:INFO:Defining Hyperparameters
2023-03-15 17:47:10,514:INFO:Tuning with n_jobs=-1
2023-03-15 17:47:10,514:INFO:Initializing RandomizedSearchCV
2023-03-15 17:47:28,272:INFO:best_params: {'actual_estimator__reg_lambda': 2, 'actual_estimator__reg_alpha': 0.7, 'actual_estimator__num_leaves': 30, 'actual_estimator__n_estimators': 250, 'actual_estimator__min_split_gain': 0.3, 'actual_estimator__min_child_samples': 11, 'actual_estimator__learning_rate': 0.5, 'actual_estimator__feature_fraction': 0.8, 'actual_estimator__bagging_freq': 1, 'actual_estimator__bagging_fraction': 0.5}
2023-03-15 17:47:28,273:INFO:Hyperparameter search completed
2023-03-15 17:47:28,273:INFO:SubProcess create_model() called ==================================
2023-03-15 17:47:28,275:INFO:Initializing create_model()
2023-03-15 17:47:28,275:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C9F926F5E0>, estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=42, reg_alpha=0.0, reg_lambda=0.0, silent='warn',
               subsample=1.0, subsample_for_bin=200000, subsample_freq=0), fold=StratifiedKFold(n_splits=15, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C9FDB48070>, model_only=True, return_train_score=False, kwargs={'reg_lambda': 2, 'reg_alpha': 0.7, 'num_leaves': 30, 'n_estimators': 250, 'min_split_gain': 0.3, 'min_child_samples': 11, 'learning_rate': 0.5, 'feature_fraction': 0.8, 'bagging_freq': 1, 'bagging_fraction': 0.5})
2023-03-15 17:47:28,275:INFO:Checking exceptions
2023-03-15 17:47:28,275:INFO:Importing libraries
2023-03-15 17:47:28,276:INFO:Copying training dataset
2023-03-15 17:47:28,282:INFO:Defining folds
2023-03-15 17:47:28,282:INFO:Declaring metric variables
2023-03-15 17:47:28,288:INFO:Importing untrained model
2023-03-15 17:47:28,288:INFO:Declaring custom model
2023-03-15 17:47:28,295:INFO:Light Gradient Boosting Machine Imported successfully
2023-03-15 17:47:28,308:INFO:Starting cross validation
2023-03-15 17:47:28,310:INFO:Cross validating with StratifiedKFold(n_splits=15, random_state=None, shuffle=False), n_jobs=-1
2023-03-15 17:47:28,819:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 17:47:28,824:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 17:47:28,828:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 17:47:29,115:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 17:47:29,116:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 17:47:29,120:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 17:47:29,121:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 17:47:29,123:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 17:47:29,124:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 17:47:29,125:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 17:47:29,127:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 17:47:29,130:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 17:47:29,131:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 17:47:29,135:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 17:47:29,140:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 17:47:29,147:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 17:47:29,149:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 17:47:29,151:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 17:47:29,155:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 17:47:29,157:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 17:47:29,160:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 17:47:29,171:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 17:47:29,175:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 17:47:29,180:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 17:47:29,661:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 17:47:29,666:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 17:47:29,671:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 17:47:29,804:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 17:47:29,809:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 17:47:29,813:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 17:47:29,816:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 17:47:29,821:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 17:47:29,825:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 17:47:29,826:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 17:47:29,830:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 17:47:29,830:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 17:47:29,834:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 17:47:29,835:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 17:47:29,839:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 17:47:29,841:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 17:47:29,844:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 17:47:29,846:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 17:47:29,849:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 17:47:29,851:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 17:47:29,854:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 17:47:29,859:INFO:Calculating mean and std
2023-03-15 17:47:29,861:INFO:Creating metrics dataframe
2023-03-15 17:47:29,871:INFO:Finalizing model
2023-03-15 17:47:30,007:INFO:[LightGBM] [Warning] feature_fraction is set=0.8, colsample_bytree=1.0 will be ignored. Current value: feature_fraction=0.8
2023-03-15 17:47:30,007:INFO:[LightGBM] [Warning] bagging_fraction is set=0.5, subsample=1.0 will be ignored. Current value: bagging_fraction=0.5
2023-03-15 17:47:30,007:INFO:[LightGBM] [Warning] bagging_freq is set=1, subsample_freq=0 will be ignored. Current value: bagging_freq=1
2023-03-15 17:47:30,086:INFO:Uploading results into container
2023-03-15 17:47:30,088:INFO:Uploading model into container now
2023-03-15 17:47:30,089:INFO:_master_model_container: 19
2023-03-15 17:47:30,089:INFO:_display_container: 8
2023-03-15 17:47:30,091:INFO:LGBMClassifier(bagging_fraction=0.5, bagging_freq=1, boosting_type='gbdt',
               class_weight=None, colsample_bytree=1.0, feature_fraction=0.8,
               importance_type='split', learning_rate=0.5, max_depth=-1,
               min_child_samples=11, min_child_weight=0.001, min_split_gain=0.3,
               n_estimators=250, n_jobs=-1, num_leaves=30, objective=None,
               random_state=42, reg_alpha=0.7, reg_lambda=2, silent='warn',
               subsample=1.0, subsample_for_bin=200000, subsample_freq=0)
2023-03-15 17:47:30,091:INFO:create_model() successfully completed......................................
2023-03-15 17:47:30,221:INFO:SubProcess create_model() end ==================================
2023-03-15 17:47:30,222:INFO:choose_better activated
2023-03-15 17:47:30,227:INFO:SubProcess create_model() called ==================================
2023-03-15 17:47:30,228:INFO:Initializing create_model()
2023-03-15 17:47:30,228:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C9F926F5E0>, estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=42, reg_alpha=0.0, reg_lambda=0.0, silent='warn',
               subsample=1.0, subsample_for_bin=200000, subsample_freq=0), fold=StratifiedKFold(n_splits=15, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-03-15 17:47:30,228:INFO:Checking exceptions
2023-03-15 17:47:30,230:INFO:Importing libraries
2023-03-15 17:47:30,230:INFO:Copying training dataset
2023-03-15 17:47:30,237:INFO:Defining folds
2023-03-15 17:47:30,237:INFO:Declaring metric variables
2023-03-15 17:47:30,238:INFO:Importing untrained model
2023-03-15 17:47:30,238:INFO:Declaring custom model
2023-03-15 17:47:30,239:INFO:Light Gradient Boosting Machine Imported successfully
2023-03-15 17:47:30,239:INFO:Starting cross validation
2023-03-15 17:47:30,241:INFO:Cross validating with StratifiedKFold(n_splits=15, random_state=None, shuffle=False), n_jobs=-1
2023-03-15 17:47:31,276:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 17:47:31,280:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 17:47:31,285:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 17:47:31,311:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 17:47:31,313:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 17:47:31,316:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 17:47:31,317:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 17:47:31,321:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 17:47:31,322:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 17:47:31,329:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 17:47:31,333:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 17:47:31,337:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 17:47:31,337:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 17:47:31,338:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 17:47:31,342:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 17:47:31,342:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 17:47:31,346:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 17:47:31,347:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 17:47:31,347:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 17:47:31,348:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 17:47:31,351:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 17:47:31,353:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 17:47:31,358:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 17:47:31,358:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 17:47:32,074:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 17:47:32,078:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 17:47:32,082:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 17:47:32,123:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 17:47:32,126:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 17:47:32,128:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 17:47:32,259:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 17:47:32,264:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 17:47:32,270:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 17:47:32,272:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 17:47:32,277:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 17:47:32,278:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 17:47:32,281:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 17:47:32,282:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 17:47:32,288:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 17:47:32,298:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 17:47:32,302:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 17:47:32,307:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 17:47:32,320:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 17:47:32,323:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 17:47:32,327:WARNING:c:\Users\juud0\miniconda3\envs\pip310\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Gentoo') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-03-15 17:47:32,335:INFO:Calculating mean and std
2023-03-15 17:47:32,336:INFO:Creating metrics dataframe
2023-03-15 17:47:32,341:INFO:Finalizing model
2023-03-15 17:47:32,487:INFO:Uploading results into container
2023-03-15 17:47:32,489:INFO:Uploading model into container now
2023-03-15 17:47:32,490:INFO:_master_model_container: 20
2023-03-15 17:47:32,490:INFO:_display_container: 9
2023-03-15 17:47:32,491:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=42, reg_alpha=0.0, reg_lambda=0.0, silent='warn',
               subsample=1.0, subsample_for_bin=200000, subsample_freq=0)
2023-03-15 17:47:32,492:INFO:create_model() successfully completed......................................
2023-03-15 17:47:32,626:INFO:SubProcess create_model() end ==================================
2023-03-15 17:47:32,627:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=42, reg_alpha=0.0, reg_lambda=0.0, silent='warn',
               subsample=1.0, subsample_for_bin=200000, subsample_freq=0) result for Accuracy is 0.9885
2023-03-15 17:47:32,627:INFO:LGBMClassifier(bagging_fraction=0.5, bagging_freq=1, boosting_type='gbdt',
               class_weight=None, colsample_bytree=1.0, feature_fraction=0.8,
               importance_type='split', learning_rate=0.5, max_depth=-1,
               min_child_samples=11, min_child_weight=0.001, min_split_gain=0.3,
               n_estimators=250, n_jobs=-1, num_leaves=30, objective=None,
               random_state=42, reg_alpha=0.7, reg_lambda=2, silent='warn',
               subsample=1.0, subsample_for_bin=200000, subsample_freq=0) result for Accuracy is 0.9885
2023-03-15 17:47:32,627:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=42, reg_alpha=0.0, reg_lambda=0.0, silent='warn',
               subsample=1.0, subsample_for_bin=200000, subsample_freq=0) is best model
2023-03-15 17:47:32,627:INFO:choose_better completed
2023-03-15 17:47:32,628:INFO:Original model was better than the tuned model, hence it will be returned. NOTE: The display metrics are for the tuned model (not the original one).
2023-03-15 17:47:32,647:INFO:_master_model_container: 20
2023-03-15 17:47:32,647:INFO:_display_container: 8
2023-03-15 17:47:32,648:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=42, reg_alpha=0.0, reg_lambda=0.0, silent='warn',
               subsample=1.0, subsample_for_bin=200000, subsample_freq=0)
2023-03-15 17:47:32,648:INFO:tune_model() successfully completed......................................
